// --------------------------------------------------------------------------------------------------------------------
// <copyright company="Aspose" file="ApiBase.cs">
//   Copyright (c) 2020 Aspose.Slides for Cloud
// </copyright>
// <summary>
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
// 
//  The above copyright notice and this permission notice shall be included in all
//  copies or substantial portions of the Software.
// 
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//  SOFTWARE.
// </summary>
// --------------------------------------------------------------------------------------------------------------------


#include "gtest/gtest.h"

#include "TestUtils.h"

using namespace asposeslidescloud::api;

class SlidesApiTest : public ::testing::Test
{
public:
	static SlidesApi* api;
	static TestUtils* utils;

protected:
	void SetUp()
	{
		if (SlidesApiTest::api == nullptr)
		{
			std::ifstream rulesFile("testConfig.json");
			std::string rulesString;
			std::ostringstream rulesStream;
			rulesStream << rulesFile.rdbuf();
			rulesString = rulesStream.str();
			web::json::value config = web::json::value::parse(utility::conversions::to_string_t(rulesString));
			std::shared_ptr<ApiConfiguration> configuration = std::make_shared<ApiConfiguration>();
			if (config.has_field(utility::conversions::to_string_t("ClientId")))
			{
				configuration->setAppSid(config[utility::conversions::to_string_t("ClientId")].as_string());
			}
			if (config.has_field(utility::conversions::to_string_t("ClientSecret")))
			{
				configuration->setAppKey(config[utility::conversions::to_string_t("ClientSecret")].as_string());
			}
			if (config.has_field(utility::conversions::to_string_t("BaseUrl")))
			{
				configuration->setBaseUrl(config[utility::conversions::to_string_t("BaseUrl")].as_string());
			}
			if (config.has_field(utility::conversions::to_string_t("AuthBaseUrl")))
			{
				configuration->setBaseAuthUrl(config[utility::conversions::to_string_t("AuthBaseUrl")].as_string());
			}
			if (config.has_field(utility::conversions::to_string_t("Debug")))
			{
				configuration->setDebug(config[utility::conversions::to_string_t("Debug")].as_bool());
			}
			api = new SlidesApi(configuration);
			utils = new TestUtils(api);
		}
	}
};

SlidesApi* SlidesApiTest::api = nullptr;
TestUtils* SlidesApiTest::utils = nullptr;

TEST_F(SlidesApiTest, copyFile) {
	utility::string_t paramSrcPath = utils->getTestValue("copyFile", "srcPath");
	utility::string_t paramDestPath = utils->getTestValue("copyFile", "destPath");
	utility::string_t paramSrcStorageName = utils->getTestValue("copyFile", "srcStorageName");
	utility::string_t paramDestStorageName = utils->getTestValue("copyFile", "destStorageName");
	utility::string_t paramVersionId = utils->getTestValue("copyFile", "versionId");
	utils->initialize("copyFile", "");
	api->copyFile(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName, paramVersionId).wait();
}

TEST_F(SlidesApiTest, copyFileInvalidSrcPath) {
	utility::string_t paramSrcPath = utils->getTestValue("copyFile", "srcPath");
	utility::string_t paramDestPath = utils->getTestValue("copyFile", "destPath");
	utility::string_t paramSrcStorageName = utils->getTestValue("copyFile", "srcStorageName");
	utility::string_t paramDestStorageName = utils->getTestValue("copyFile", "destStorageName");
	utility::string_t paramVersionId = utils->getTestValue("copyFile", "versionId");
	paramSrcPath = utils->getInvalidTestValue("copyFile", "srcPath", paramSrcPath);
	utils->initialize("copyFile", "srcPath", paramSrcPath);

	bool failed = true;
	try
	{
		api->copyFile(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName, paramVersionId).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("copyFile", "srcPath");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("copyFile", "srcPath", paramSrcPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("copyFile", "srcPath");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("copyFile", "srcPath", paramSrcPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("copyFile", "srcPath"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, copyFileInvalidDestPath) {
	utility::string_t paramSrcPath = utils->getTestValue("copyFile", "srcPath");
	utility::string_t paramDestPath = utils->getTestValue("copyFile", "destPath");
	utility::string_t paramSrcStorageName = utils->getTestValue("copyFile", "srcStorageName");
	utility::string_t paramDestStorageName = utils->getTestValue("copyFile", "destStorageName");
	utility::string_t paramVersionId = utils->getTestValue("copyFile", "versionId");
	paramDestPath = utils->getInvalidTestValue("copyFile", "destPath", paramDestPath);
	utils->initialize("copyFile", "destPath", paramDestPath);

	bool failed = true;
	try
	{
		api->copyFile(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName, paramVersionId).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("copyFile", "destPath");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("copyFile", "destPath", paramDestPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("copyFile", "destPath");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("copyFile", "destPath", paramDestPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("copyFile", "destPath"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, copyFileInvalidSrcStorageName) {
	utility::string_t paramSrcPath = utils->getTestValue("copyFile", "srcPath");
	utility::string_t paramDestPath = utils->getTestValue("copyFile", "destPath");
	utility::string_t paramSrcStorageName = utils->getTestValue("copyFile", "srcStorageName");
	utility::string_t paramDestStorageName = utils->getTestValue("copyFile", "destStorageName");
	utility::string_t paramVersionId = utils->getTestValue("copyFile", "versionId");
	paramSrcStorageName = utils->getInvalidTestValue("copyFile", "srcStorageName", paramSrcStorageName);
	utils->initialize("copyFile", "srcStorageName", paramSrcStorageName);

	bool failed = true;
	try
	{
		api->copyFile(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName, paramVersionId).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("copyFile", "srcStorageName");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("copyFile", "srcStorageName", paramSrcStorageName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("copyFile", "srcStorageName");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("copyFile", "srcStorageName", paramSrcStorageName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("copyFile", "srcStorageName"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, copyFileInvalidDestStorageName) {
	utility::string_t paramSrcPath = utils->getTestValue("copyFile", "srcPath");
	utility::string_t paramDestPath = utils->getTestValue("copyFile", "destPath");
	utility::string_t paramSrcStorageName = utils->getTestValue("copyFile", "srcStorageName");
	utility::string_t paramDestStorageName = utils->getTestValue("copyFile", "destStorageName");
	utility::string_t paramVersionId = utils->getTestValue("copyFile", "versionId");
	paramDestStorageName = utils->getInvalidTestValue("copyFile", "destStorageName", paramDestStorageName);
	utils->initialize("copyFile", "destStorageName", paramDestStorageName);

	bool failed = true;
	try
	{
		api->copyFile(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName, paramVersionId).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("copyFile", "destStorageName");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("copyFile", "destStorageName", paramDestStorageName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("copyFile", "destStorageName");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("copyFile", "destStorageName", paramDestStorageName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("copyFile", "destStorageName"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, copyFileInvalidVersionId) {
	utility::string_t paramSrcPath = utils->getTestValue("copyFile", "srcPath");
	utility::string_t paramDestPath = utils->getTestValue("copyFile", "destPath");
	utility::string_t paramSrcStorageName = utils->getTestValue("copyFile", "srcStorageName");
	utility::string_t paramDestStorageName = utils->getTestValue("copyFile", "destStorageName");
	utility::string_t paramVersionId = utils->getTestValue("copyFile", "versionId");
	paramVersionId = utils->getInvalidTestValue("copyFile", "versionId", paramVersionId);
	utils->initialize("copyFile", "versionId", paramVersionId);

	bool failed = true;
	try
	{
		api->copyFile(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName, paramVersionId).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("copyFile", "versionId");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("copyFile", "versionId", paramVersionId);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("copyFile", "versionId");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("copyFile", "versionId", paramVersionId);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("copyFile", "versionId"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, copyFolder) {
	utility::string_t paramSrcPath = utils->getTestValue("copyFolder", "srcPath");
	utility::string_t paramDestPath = utils->getTestValue("copyFolder", "destPath");
	utility::string_t paramSrcStorageName = utils->getTestValue("copyFolder", "srcStorageName");
	utility::string_t paramDestStorageName = utils->getTestValue("copyFolder", "destStorageName");
	utils->initialize("copyFolder", "");
	api->copyFolder(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName).wait();
}

TEST_F(SlidesApiTest, copyFolderInvalidSrcPath) {
	utility::string_t paramSrcPath = utils->getTestValue("copyFolder", "srcPath");
	utility::string_t paramDestPath = utils->getTestValue("copyFolder", "destPath");
	utility::string_t paramSrcStorageName = utils->getTestValue("copyFolder", "srcStorageName");
	utility::string_t paramDestStorageName = utils->getTestValue("copyFolder", "destStorageName");
	paramSrcPath = utils->getInvalidTestValue("copyFolder", "srcPath", paramSrcPath);
	utils->initialize("copyFolder", "srcPath", paramSrcPath);

	bool failed = true;
	try
	{
		api->copyFolder(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("copyFolder", "srcPath");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("copyFolder", "srcPath", paramSrcPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("copyFolder", "srcPath");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("copyFolder", "srcPath", paramSrcPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("copyFolder", "srcPath"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, copyFolderInvalidDestPath) {
	utility::string_t paramSrcPath = utils->getTestValue("copyFolder", "srcPath");
	utility::string_t paramDestPath = utils->getTestValue("copyFolder", "destPath");
	utility::string_t paramSrcStorageName = utils->getTestValue("copyFolder", "srcStorageName");
	utility::string_t paramDestStorageName = utils->getTestValue("copyFolder", "destStorageName");
	paramDestPath = utils->getInvalidTestValue("copyFolder", "destPath", paramDestPath);
	utils->initialize("copyFolder", "destPath", paramDestPath);

	bool failed = true;
	try
	{
		api->copyFolder(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("copyFolder", "destPath");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("copyFolder", "destPath", paramDestPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("copyFolder", "destPath");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("copyFolder", "destPath", paramDestPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("copyFolder", "destPath"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, copyFolderInvalidSrcStorageName) {
	utility::string_t paramSrcPath = utils->getTestValue("copyFolder", "srcPath");
	utility::string_t paramDestPath = utils->getTestValue("copyFolder", "destPath");
	utility::string_t paramSrcStorageName = utils->getTestValue("copyFolder", "srcStorageName");
	utility::string_t paramDestStorageName = utils->getTestValue("copyFolder", "destStorageName");
	paramSrcStorageName = utils->getInvalidTestValue("copyFolder", "srcStorageName", paramSrcStorageName);
	utils->initialize("copyFolder", "srcStorageName", paramSrcStorageName);

	bool failed = true;
	try
	{
		api->copyFolder(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("copyFolder", "srcStorageName");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("copyFolder", "srcStorageName", paramSrcStorageName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("copyFolder", "srcStorageName");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("copyFolder", "srcStorageName", paramSrcStorageName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("copyFolder", "srcStorageName"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, copyFolderInvalidDestStorageName) {
	utility::string_t paramSrcPath = utils->getTestValue("copyFolder", "srcPath");
	utility::string_t paramDestPath = utils->getTestValue("copyFolder", "destPath");
	utility::string_t paramSrcStorageName = utils->getTestValue("copyFolder", "srcStorageName");
	utility::string_t paramDestStorageName = utils->getTestValue("copyFolder", "destStorageName");
	paramDestStorageName = utils->getInvalidTestValue("copyFolder", "destStorageName", paramDestStorageName);
	utils->initialize("copyFolder", "destStorageName", paramDestStorageName);

	bool failed = true;
	try
	{
		api->copyFolder(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("copyFolder", "destStorageName");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("copyFolder", "destStorageName", paramDestStorageName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("copyFolder", "destStorageName");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("copyFolder", "destStorageName", paramDestStorageName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("copyFolder", "destStorageName"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createFolder) {
	utility::string_t paramPath = utils->getTestValue("createFolder", "path");
	utility::string_t paramStorageName = utils->getTestValue("createFolder", "storageName");
	utils->initialize("createFolder", "");
	api->createFolder(paramPath, paramStorageName).wait();
}

TEST_F(SlidesApiTest, createFolderInvalidPath) {
	utility::string_t paramPath = utils->getTestValue("createFolder", "path");
	utility::string_t paramStorageName = utils->getTestValue("createFolder", "storageName");
	paramPath = utils->getInvalidTestValue("createFolder", "path", paramPath);
	utils->initialize("createFolder", "path", paramPath);

	bool failed = true;
	try
	{
		api->createFolder(paramPath, paramStorageName).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createFolder", "path");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createFolder", "path", paramPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createFolder", "path");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createFolder", "path", paramPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createFolder", "path"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createFolderInvalidStorageName) {
	utility::string_t paramPath = utils->getTestValue("createFolder", "path");
	utility::string_t paramStorageName = utils->getTestValue("createFolder", "storageName");
	paramStorageName = utils->getInvalidTestValue("createFolder", "storageName", paramStorageName);
	utils->initialize("createFolder", "storageName", paramStorageName);

	bool failed = true;
	try
	{
		api->createFolder(paramPath, paramStorageName).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createFolder", "storageName");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createFolder", "storageName", paramStorageName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createFolder", "storageName");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createFolder", "storageName", paramStorageName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createFolder", "storageName"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteChartCategory) {
	utility::string_t paramName = utils->getTestValue("deleteChartCategory", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteChartCategory", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteChartCategory", "shapeIndex");
	int32_t paramCategoryIndex = utils->getIntTestValue("deleteChartCategory", "categoryIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteChartCategory", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteChartCategory", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteChartCategory", "storage");
	utils->initialize("deleteChartCategory", "");
	std::shared_ptr<Chart> result = api->deleteChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategoryIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteChartCategoryInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteChartCategory", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteChartCategory", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteChartCategory", "shapeIndex");
	int32_t paramCategoryIndex = utils->getIntTestValue("deleteChartCategory", "categoryIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteChartCategory", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteChartCategory", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteChartCategory", "storage");
	paramName = utils->getInvalidTestValue("deleteChartCategory", "name", paramName);
	utils->initialize("deleteChartCategory", "name", paramName);

	bool failed = true;
	try
	{
		api->deleteChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategoryIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteChartCategory", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteChartCategory", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteChartCategory", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteChartCategory", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteChartCategory", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteChartCategoryInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("deleteChartCategory", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteChartCategory", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteChartCategory", "shapeIndex");
	int32_t paramCategoryIndex = utils->getIntTestValue("deleteChartCategory", "categoryIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteChartCategory", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteChartCategory", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteChartCategory", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("deleteChartCategory", "slideIndex", paramSlideIndex).value();
	utils->initialize("deleteChartCategory", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->deleteChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategoryIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteChartCategory", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteChartCategory", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteChartCategory", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteChartCategory", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteChartCategory", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteChartCategoryInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("deleteChartCategory", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteChartCategory", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteChartCategory", "shapeIndex");
	int32_t paramCategoryIndex = utils->getIntTestValue("deleteChartCategory", "categoryIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteChartCategory", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteChartCategory", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteChartCategory", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("deleteChartCategory", "shapeIndex", paramShapeIndex).value();
	utils->initialize("deleteChartCategory", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->deleteChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategoryIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteChartCategory", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteChartCategory", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteChartCategory", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteChartCategory", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteChartCategory", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteChartCategoryInvalidCategoryIndex) {
	utility::string_t paramName = utils->getTestValue("deleteChartCategory", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteChartCategory", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteChartCategory", "shapeIndex");
	int32_t paramCategoryIndex = utils->getIntTestValue("deleteChartCategory", "categoryIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteChartCategory", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteChartCategory", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteChartCategory", "storage");
	paramCategoryIndex = utils->getInvalidIntTestValue("deleteChartCategory", "categoryIndex", paramCategoryIndex).value();
	utils->initialize("deleteChartCategory", "categoryIndex", paramCategoryIndex);

	bool failed = true;
	try
	{
		api->deleteChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategoryIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteChartCategory", "categoryIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteChartCategory", "categoryIndex", paramCategoryIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteChartCategory", "categoryIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteChartCategory", "categoryIndex", paramCategoryIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteChartCategory", "categoryIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteChartCategoryInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteChartCategory", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteChartCategory", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteChartCategory", "shapeIndex");
	int32_t paramCategoryIndex = utils->getIntTestValue("deleteChartCategory", "categoryIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteChartCategory", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteChartCategory", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteChartCategory", "storage");
	paramPassword = utils->getInvalidTestValue("deleteChartCategory", "password", paramPassword);
	utils->initialize("deleteChartCategory", "password", paramPassword);

	bool failed = true;
	try
	{
		api->deleteChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategoryIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteChartCategory", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteChartCategory", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteChartCategory", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteChartCategory", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteChartCategory", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteChartCategoryInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteChartCategory", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteChartCategory", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteChartCategory", "shapeIndex");
	int32_t paramCategoryIndex = utils->getIntTestValue("deleteChartCategory", "categoryIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteChartCategory", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteChartCategory", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteChartCategory", "storage");
	paramFolder = utils->getInvalidTestValue("deleteChartCategory", "folder", paramFolder);
	utils->initialize("deleteChartCategory", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->deleteChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategoryIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteChartCategory", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteChartCategory", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteChartCategory", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteChartCategory", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteChartCategory", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteChartCategoryInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteChartCategory", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteChartCategory", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteChartCategory", "shapeIndex");
	int32_t paramCategoryIndex = utils->getIntTestValue("deleteChartCategory", "categoryIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteChartCategory", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteChartCategory", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteChartCategory", "storage");
	paramStorage = utils->getInvalidTestValue("deleteChartCategory", "storage", paramStorage);
	utils->initialize("deleteChartCategory", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->deleteChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategoryIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteChartCategory", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteChartCategory", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteChartCategory", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteChartCategory", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteChartCategory", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteChartDataPoint) {
	utility::string_t paramName = utils->getTestValue("deleteChartDataPoint", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteChartDataPoint", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteChartDataPoint", "shapeIndex");
	int32_t paramSeriesIndex = utils->getIntTestValue("deleteChartDataPoint", "seriesIndex");
	int32_t paramPointIndex = utils->getIntTestValue("deleteChartDataPoint", "pointIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteChartDataPoint", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteChartDataPoint", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteChartDataPoint", "storage");
	utils->initialize("deleteChartDataPoint", "");
	std::shared_ptr<Chart> result = api->deleteChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteChartDataPointInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteChartDataPoint", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteChartDataPoint", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteChartDataPoint", "shapeIndex");
	int32_t paramSeriesIndex = utils->getIntTestValue("deleteChartDataPoint", "seriesIndex");
	int32_t paramPointIndex = utils->getIntTestValue("deleteChartDataPoint", "pointIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteChartDataPoint", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteChartDataPoint", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteChartDataPoint", "storage");
	paramName = utils->getInvalidTestValue("deleteChartDataPoint", "name", paramName);
	utils->initialize("deleteChartDataPoint", "name", paramName);

	bool failed = true;
	try
	{
		api->deleteChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteChartDataPoint", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteChartDataPoint", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteChartDataPoint", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteChartDataPoint", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteChartDataPoint", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteChartDataPointInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("deleteChartDataPoint", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteChartDataPoint", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteChartDataPoint", "shapeIndex");
	int32_t paramSeriesIndex = utils->getIntTestValue("deleteChartDataPoint", "seriesIndex");
	int32_t paramPointIndex = utils->getIntTestValue("deleteChartDataPoint", "pointIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteChartDataPoint", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteChartDataPoint", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteChartDataPoint", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("deleteChartDataPoint", "slideIndex", paramSlideIndex).value();
	utils->initialize("deleteChartDataPoint", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->deleteChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteChartDataPoint", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteChartDataPoint", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteChartDataPoint", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteChartDataPoint", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteChartDataPoint", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteChartDataPointInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("deleteChartDataPoint", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteChartDataPoint", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteChartDataPoint", "shapeIndex");
	int32_t paramSeriesIndex = utils->getIntTestValue("deleteChartDataPoint", "seriesIndex");
	int32_t paramPointIndex = utils->getIntTestValue("deleteChartDataPoint", "pointIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteChartDataPoint", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteChartDataPoint", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteChartDataPoint", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("deleteChartDataPoint", "shapeIndex", paramShapeIndex).value();
	utils->initialize("deleteChartDataPoint", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->deleteChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteChartDataPoint", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteChartDataPoint", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteChartDataPoint", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteChartDataPoint", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteChartDataPoint", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteChartDataPointInvalidSeriesIndex) {
	utility::string_t paramName = utils->getTestValue("deleteChartDataPoint", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteChartDataPoint", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteChartDataPoint", "shapeIndex");
	int32_t paramSeriesIndex = utils->getIntTestValue("deleteChartDataPoint", "seriesIndex");
	int32_t paramPointIndex = utils->getIntTestValue("deleteChartDataPoint", "pointIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteChartDataPoint", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteChartDataPoint", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteChartDataPoint", "storage");
	paramSeriesIndex = utils->getInvalidIntTestValue("deleteChartDataPoint", "seriesIndex", paramSeriesIndex).value();
	utils->initialize("deleteChartDataPoint", "seriesIndex", paramSeriesIndex);

	bool failed = true;
	try
	{
		api->deleteChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteChartDataPoint", "seriesIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteChartDataPoint", "seriesIndex", paramSeriesIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteChartDataPoint", "seriesIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteChartDataPoint", "seriesIndex", paramSeriesIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteChartDataPoint", "seriesIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteChartDataPointInvalidPointIndex) {
	utility::string_t paramName = utils->getTestValue("deleteChartDataPoint", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteChartDataPoint", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteChartDataPoint", "shapeIndex");
	int32_t paramSeriesIndex = utils->getIntTestValue("deleteChartDataPoint", "seriesIndex");
	int32_t paramPointIndex = utils->getIntTestValue("deleteChartDataPoint", "pointIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteChartDataPoint", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteChartDataPoint", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteChartDataPoint", "storage");
	paramPointIndex = utils->getInvalidIntTestValue("deleteChartDataPoint", "pointIndex", paramPointIndex).value();
	utils->initialize("deleteChartDataPoint", "pointIndex", paramPointIndex);

	bool failed = true;
	try
	{
		api->deleteChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteChartDataPoint", "pointIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteChartDataPoint", "pointIndex", paramPointIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteChartDataPoint", "pointIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteChartDataPoint", "pointIndex", paramPointIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteChartDataPoint", "pointIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteChartDataPointInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteChartDataPoint", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteChartDataPoint", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteChartDataPoint", "shapeIndex");
	int32_t paramSeriesIndex = utils->getIntTestValue("deleteChartDataPoint", "seriesIndex");
	int32_t paramPointIndex = utils->getIntTestValue("deleteChartDataPoint", "pointIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteChartDataPoint", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteChartDataPoint", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteChartDataPoint", "storage");
	paramPassword = utils->getInvalidTestValue("deleteChartDataPoint", "password", paramPassword);
	utils->initialize("deleteChartDataPoint", "password", paramPassword);

	bool failed = true;
	try
	{
		api->deleteChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteChartDataPoint", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteChartDataPoint", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteChartDataPoint", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteChartDataPoint", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteChartDataPoint", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteChartDataPointInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteChartDataPoint", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteChartDataPoint", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteChartDataPoint", "shapeIndex");
	int32_t paramSeriesIndex = utils->getIntTestValue("deleteChartDataPoint", "seriesIndex");
	int32_t paramPointIndex = utils->getIntTestValue("deleteChartDataPoint", "pointIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteChartDataPoint", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteChartDataPoint", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteChartDataPoint", "storage");
	paramFolder = utils->getInvalidTestValue("deleteChartDataPoint", "folder", paramFolder);
	utils->initialize("deleteChartDataPoint", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->deleteChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteChartDataPoint", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteChartDataPoint", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteChartDataPoint", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteChartDataPoint", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteChartDataPoint", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteChartDataPointInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteChartDataPoint", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteChartDataPoint", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteChartDataPoint", "shapeIndex");
	int32_t paramSeriesIndex = utils->getIntTestValue("deleteChartDataPoint", "seriesIndex");
	int32_t paramPointIndex = utils->getIntTestValue("deleteChartDataPoint", "pointIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteChartDataPoint", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteChartDataPoint", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteChartDataPoint", "storage");
	paramStorage = utils->getInvalidTestValue("deleteChartDataPoint", "storage", paramStorage);
	utils->initialize("deleteChartDataPoint", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->deleteChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteChartDataPoint", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteChartDataPoint", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteChartDataPoint", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteChartDataPoint", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteChartDataPoint", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteChartSeries) {
	utility::string_t paramName = utils->getTestValue("deleteChartSeries", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteChartSeries", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteChartSeries", "shapeIndex");
	int32_t paramSeriesIndex = utils->getIntTestValue("deleteChartSeries", "seriesIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteChartSeries", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteChartSeries", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteChartSeries", "storage");
	utils->initialize("deleteChartSeries", "");
	std::shared_ptr<Chart> result = api->deleteChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteChartSeriesInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteChartSeries", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteChartSeries", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteChartSeries", "shapeIndex");
	int32_t paramSeriesIndex = utils->getIntTestValue("deleteChartSeries", "seriesIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteChartSeries", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteChartSeries", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteChartSeries", "storage");
	paramName = utils->getInvalidTestValue("deleteChartSeries", "name", paramName);
	utils->initialize("deleteChartSeries", "name", paramName);

	bool failed = true;
	try
	{
		api->deleteChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteChartSeries", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteChartSeries", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteChartSeries", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteChartSeries", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteChartSeries", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteChartSeriesInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("deleteChartSeries", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteChartSeries", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteChartSeries", "shapeIndex");
	int32_t paramSeriesIndex = utils->getIntTestValue("deleteChartSeries", "seriesIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteChartSeries", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteChartSeries", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteChartSeries", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("deleteChartSeries", "slideIndex", paramSlideIndex).value();
	utils->initialize("deleteChartSeries", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->deleteChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteChartSeries", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteChartSeries", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteChartSeries", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteChartSeries", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteChartSeries", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteChartSeriesInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("deleteChartSeries", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteChartSeries", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteChartSeries", "shapeIndex");
	int32_t paramSeriesIndex = utils->getIntTestValue("deleteChartSeries", "seriesIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteChartSeries", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteChartSeries", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteChartSeries", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("deleteChartSeries", "shapeIndex", paramShapeIndex).value();
	utils->initialize("deleteChartSeries", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->deleteChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteChartSeries", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteChartSeries", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteChartSeries", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteChartSeries", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteChartSeries", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteChartSeriesInvalidSeriesIndex) {
	utility::string_t paramName = utils->getTestValue("deleteChartSeries", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteChartSeries", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteChartSeries", "shapeIndex");
	int32_t paramSeriesIndex = utils->getIntTestValue("deleteChartSeries", "seriesIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteChartSeries", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteChartSeries", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteChartSeries", "storage");
	paramSeriesIndex = utils->getInvalidIntTestValue("deleteChartSeries", "seriesIndex", paramSeriesIndex).value();
	utils->initialize("deleteChartSeries", "seriesIndex", paramSeriesIndex);

	bool failed = true;
	try
	{
		api->deleteChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteChartSeries", "seriesIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteChartSeries", "seriesIndex", paramSeriesIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteChartSeries", "seriesIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteChartSeries", "seriesIndex", paramSeriesIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteChartSeries", "seriesIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteChartSeriesInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteChartSeries", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteChartSeries", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteChartSeries", "shapeIndex");
	int32_t paramSeriesIndex = utils->getIntTestValue("deleteChartSeries", "seriesIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteChartSeries", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteChartSeries", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteChartSeries", "storage");
	paramPassword = utils->getInvalidTestValue("deleteChartSeries", "password", paramPassword);
	utils->initialize("deleteChartSeries", "password", paramPassword);

	bool failed = true;
	try
	{
		api->deleteChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteChartSeries", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteChartSeries", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteChartSeries", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteChartSeries", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteChartSeries", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteChartSeriesInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteChartSeries", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteChartSeries", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteChartSeries", "shapeIndex");
	int32_t paramSeriesIndex = utils->getIntTestValue("deleteChartSeries", "seriesIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteChartSeries", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteChartSeries", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteChartSeries", "storage");
	paramFolder = utils->getInvalidTestValue("deleteChartSeries", "folder", paramFolder);
	utils->initialize("deleteChartSeries", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->deleteChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteChartSeries", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteChartSeries", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteChartSeries", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteChartSeries", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteChartSeries", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteChartSeriesInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteChartSeries", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteChartSeries", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteChartSeries", "shapeIndex");
	int32_t paramSeriesIndex = utils->getIntTestValue("deleteChartSeries", "seriesIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteChartSeries", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteChartSeries", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteChartSeries", "storage");
	paramStorage = utils->getInvalidTestValue("deleteChartSeries", "storage", paramStorage);
	utils->initialize("deleteChartSeries", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->deleteChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteChartSeries", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteChartSeries", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteChartSeries", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteChartSeries", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteChartSeries", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteFile) {
	utility::string_t paramPath = utils->getTestValue("deleteFile", "path");
	utility::string_t paramStorageName = utils->getTestValue("deleteFile", "storageName");
	utility::string_t paramVersionId = utils->getTestValue("deleteFile", "versionId");
	utils->initialize("deleteFile", "");
	api->deleteFile(paramPath, paramStorageName, paramVersionId).wait();
}

TEST_F(SlidesApiTest, deleteFileInvalidPath) {
	utility::string_t paramPath = utils->getTestValue("deleteFile", "path");
	utility::string_t paramStorageName = utils->getTestValue("deleteFile", "storageName");
	utility::string_t paramVersionId = utils->getTestValue("deleteFile", "versionId");
	paramPath = utils->getInvalidTestValue("deleteFile", "path", paramPath);
	utils->initialize("deleteFile", "path", paramPath);

	bool failed = true;
	try
	{
		api->deleteFile(paramPath, paramStorageName, paramVersionId).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteFile", "path");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteFile", "path", paramPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteFile", "path");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteFile", "path", paramPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteFile", "path"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteFileInvalidStorageName) {
	utility::string_t paramPath = utils->getTestValue("deleteFile", "path");
	utility::string_t paramStorageName = utils->getTestValue("deleteFile", "storageName");
	utility::string_t paramVersionId = utils->getTestValue("deleteFile", "versionId");
	paramStorageName = utils->getInvalidTestValue("deleteFile", "storageName", paramStorageName);
	utils->initialize("deleteFile", "storageName", paramStorageName);

	bool failed = true;
	try
	{
		api->deleteFile(paramPath, paramStorageName, paramVersionId).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteFile", "storageName");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteFile", "storageName", paramStorageName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteFile", "storageName");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteFile", "storageName", paramStorageName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteFile", "storageName"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteFileInvalidVersionId) {
	utility::string_t paramPath = utils->getTestValue("deleteFile", "path");
	utility::string_t paramStorageName = utils->getTestValue("deleteFile", "storageName");
	utility::string_t paramVersionId = utils->getTestValue("deleteFile", "versionId");
	paramVersionId = utils->getInvalidTestValue("deleteFile", "versionId", paramVersionId);
	utils->initialize("deleteFile", "versionId", paramVersionId);

	bool failed = true;
	try
	{
		api->deleteFile(paramPath, paramStorageName, paramVersionId).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteFile", "versionId");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteFile", "versionId", paramVersionId);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteFile", "versionId");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteFile", "versionId", paramVersionId);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteFile", "versionId"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteFolder) {
	utility::string_t paramPath = utils->getTestValue("deleteFolder", "path");
	utility::string_t paramStorageName = utils->getTestValue("deleteFolder", "storageName");
	auto paramRecursive = utils->getOptionalBoolTestValue("deleteFolder", "recursive");
	utils->initialize("deleteFolder", "");
	api->deleteFolder(paramPath, paramStorageName, paramRecursive).wait();
}

TEST_F(SlidesApiTest, deleteFolderInvalidPath) {
	utility::string_t paramPath = utils->getTestValue("deleteFolder", "path");
	utility::string_t paramStorageName = utils->getTestValue("deleteFolder", "storageName");
	auto paramRecursive = utils->getOptionalBoolTestValue("deleteFolder", "recursive");
	paramPath = utils->getInvalidTestValue("deleteFolder", "path", paramPath);
	utils->initialize("deleteFolder", "path", paramPath);

	bool failed = true;
	try
	{
		api->deleteFolder(paramPath, paramStorageName, paramRecursive).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteFolder", "path");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteFolder", "path", paramPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteFolder", "path");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteFolder", "path", paramPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteFolder", "path"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteFolderInvalidStorageName) {
	utility::string_t paramPath = utils->getTestValue("deleteFolder", "path");
	utility::string_t paramStorageName = utils->getTestValue("deleteFolder", "storageName");
	auto paramRecursive = utils->getOptionalBoolTestValue("deleteFolder", "recursive");
	paramStorageName = utils->getInvalidTestValue("deleteFolder", "storageName", paramStorageName);
	utils->initialize("deleteFolder", "storageName", paramStorageName);

	bool failed = true;
	try
	{
		api->deleteFolder(paramPath, paramStorageName, paramRecursive).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteFolder", "storageName");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteFolder", "storageName", paramStorageName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteFolder", "storageName");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteFolder", "storageName", paramStorageName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteFolder", "storageName"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteFolderInvalidRecursive) {
	utility::string_t paramPath = utils->getTestValue("deleteFolder", "path");
	utility::string_t paramStorageName = utils->getTestValue("deleteFolder", "storageName");
	auto paramRecursive = utils->getOptionalBoolTestValue("deleteFolder", "recursive");
	paramRecursive = utils->getInvalidBoolTestValue("deleteFolder", "recursive", paramRecursive).value();
	utils->initialize("deleteFolder", "recursive", paramRecursive);

	bool failed = true;
	try
	{
		api->deleteFolder(paramPath, paramStorageName, paramRecursive).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteFolder", "recursive");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteFolder", "recursive", paramRecursive);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteFolder", "recursive");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteFolder", "recursive", paramRecursive);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteFolder", "recursive"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlide) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlide", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlide", "storage");
	utils->initialize("deleteNotesSlide", "");
	std::shared_ptr<Slide> result = api->deleteNotesSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteNotesSlideInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlide", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlide", "storage");
	paramName = utils->getInvalidTestValue("deleteNotesSlide", "name", paramName);
	utils->initialize("deleteNotesSlide", "name", paramName);

	bool failed = true;
	try
	{
		api->deleteNotesSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlide", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlide", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlide", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlide", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlide", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlideInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlide", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlide", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("deleteNotesSlide", "slideIndex", paramSlideIndex).value();
	utils->initialize("deleteNotesSlide", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->deleteNotesSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlide", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlide", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlide", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlide", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlide", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlideInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlide", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlide", "storage");
	paramPassword = utils->getInvalidTestValue("deleteNotesSlide", "password", paramPassword);
	utils->initialize("deleteNotesSlide", "password", paramPassword);

	bool failed = true;
	try
	{
		api->deleteNotesSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlide", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlide", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlide", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlide", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlide", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlideInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlide", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlide", "storage");
	paramFolder = utils->getInvalidTestValue("deleteNotesSlide", "folder", paramFolder);
	utils->initialize("deleteNotesSlide", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->deleteNotesSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlide", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlide", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlide", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlide", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlide", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlideInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlide", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlide", "storage");
	paramStorage = utils->getInvalidTestValue("deleteNotesSlide", "storage", paramStorage);
	utils->initialize("deleteNotesSlide", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->deleteNotesSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlide", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlide", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlide", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlide", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlide", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlideParagraph) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlideParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlideParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteNotesSlideParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteNotesSlideParagraph", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlideParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlideParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlideParagraph", "storage");
	utils->initialize("deleteNotesSlideParagraph", "");
	std::shared_ptr<Paragraphs> result = api->deleteNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteNotesSlideParagraphInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlideParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlideParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteNotesSlideParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteNotesSlideParagraph", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlideParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlideParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlideParagraph", "storage");
	paramName = utils->getInvalidTestValue("deleteNotesSlideParagraph", "name", paramName);
	utils->initialize("deleteNotesSlideParagraph", "name", paramName);

	bool failed = true;
	try
	{
		api->deleteNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideParagraph", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideParagraph", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideParagraph", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideParagraph", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlideParagraph", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlideParagraphInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlideParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlideParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteNotesSlideParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteNotesSlideParagraph", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlideParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlideParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlideParagraph", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("deleteNotesSlideParagraph", "slideIndex", paramSlideIndex).value();
	utils->initialize("deleteNotesSlideParagraph", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->deleteNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideParagraph", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideParagraph", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideParagraph", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideParagraph", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlideParagraph", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlideParagraphInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlideParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlideParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteNotesSlideParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteNotesSlideParagraph", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlideParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlideParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlideParagraph", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("deleteNotesSlideParagraph", "shapeIndex", paramShapeIndex).value();
	utils->initialize("deleteNotesSlideParagraph", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->deleteNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideParagraph", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideParagraph", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideParagraph", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideParagraph", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlideParagraph", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlideParagraphInvalidParagraphIndex) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlideParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlideParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteNotesSlideParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteNotesSlideParagraph", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlideParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlideParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlideParagraph", "storage");
	paramParagraphIndex = utils->getInvalidIntTestValue("deleteNotesSlideParagraph", "paragraphIndex", paramParagraphIndex).value();
	utils->initialize("deleteNotesSlideParagraph", "paragraphIndex", paramParagraphIndex);

	bool failed = true;
	try
	{
		api->deleteNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideParagraph", "paragraphIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideParagraph", "paragraphIndex", paramParagraphIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideParagraph", "paragraphIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideParagraph", "paragraphIndex", paramParagraphIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlideParagraph", "paragraphIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlideParagraphInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlideParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlideParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteNotesSlideParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteNotesSlideParagraph", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlideParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlideParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlideParagraph", "storage");
	paramPassword = utils->getInvalidTestValue("deleteNotesSlideParagraph", "password", paramPassword);
	utils->initialize("deleteNotesSlideParagraph", "password", paramPassword);

	bool failed = true;
	try
	{
		api->deleteNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideParagraph", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideParagraph", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideParagraph", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideParagraph", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlideParagraph", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlideParagraphInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlideParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlideParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteNotesSlideParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteNotesSlideParagraph", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlideParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlideParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlideParagraph", "storage");
	paramFolder = utils->getInvalidTestValue("deleteNotesSlideParagraph", "folder", paramFolder);
	utils->initialize("deleteNotesSlideParagraph", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->deleteNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideParagraph", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideParagraph", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideParagraph", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideParagraph", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlideParagraph", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlideParagraphInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlideParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlideParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteNotesSlideParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteNotesSlideParagraph", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlideParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlideParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlideParagraph", "storage");
	paramStorage = utils->getInvalidTestValue("deleteNotesSlideParagraph", "storage", paramStorage);
	utils->initialize("deleteNotesSlideParagraph", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->deleteNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideParagraph", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideParagraph", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideParagraph", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideParagraph", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlideParagraph", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlideParagraphs) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlideParagraphs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlideParagraphs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteNotesSlideParagraphs", "shapeIndex");
	std::vector<int32_t> paramParagraphs = utils->getIntVectorTestValue("deleteNotesSlideParagraphs", "paragraphs");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlideParagraphs", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlideParagraphs", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlideParagraphs", "storage");
	utils->initialize("deleteNotesSlideParagraphs", "");
	std::shared_ptr<Paragraphs> result = api->deleteNotesSlideParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteNotesSlideParagraphsInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlideParagraphs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlideParagraphs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteNotesSlideParagraphs", "shapeIndex");
	std::vector<int32_t> paramParagraphs = utils->getIntVectorTestValue("deleteNotesSlideParagraphs", "paragraphs");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlideParagraphs", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlideParagraphs", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlideParagraphs", "storage");
	paramName = utils->getInvalidTestValue("deleteNotesSlideParagraphs", "name", paramName);
	utils->initialize("deleteNotesSlideParagraphs", "name", paramName);

	bool failed = true;
	try
	{
		api->deleteNotesSlideParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideParagraphs", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideParagraphs", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideParagraphs", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideParagraphs", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlideParagraphs", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlideParagraphsInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlideParagraphs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlideParagraphs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteNotesSlideParagraphs", "shapeIndex");
	std::vector<int32_t> paramParagraphs = utils->getIntVectorTestValue("deleteNotesSlideParagraphs", "paragraphs");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlideParagraphs", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlideParagraphs", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlideParagraphs", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("deleteNotesSlideParagraphs", "slideIndex", paramSlideIndex).value();
	utils->initialize("deleteNotesSlideParagraphs", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->deleteNotesSlideParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideParagraphs", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideParagraphs", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideParagraphs", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideParagraphs", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlideParagraphs", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlideParagraphsInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlideParagraphs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlideParagraphs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteNotesSlideParagraphs", "shapeIndex");
	std::vector<int32_t> paramParagraphs = utils->getIntVectorTestValue("deleteNotesSlideParagraphs", "paragraphs");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlideParagraphs", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlideParagraphs", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlideParagraphs", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("deleteNotesSlideParagraphs", "shapeIndex", paramShapeIndex).value();
	utils->initialize("deleteNotesSlideParagraphs", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->deleteNotesSlideParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideParagraphs", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideParagraphs", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideParagraphs", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideParagraphs", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlideParagraphs", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlideParagraphsInvalidParagraphs) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlideParagraphs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlideParagraphs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteNotesSlideParagraphs", "shapeIndex");
	std::vector<int32_t> paramParagraphs = utils->getIntVectorTestValue("deleteNotesSlideParagraphs", "paragraphs");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlideParagraphs", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlideParagraphs", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlideParagraphs", "storage");
	paramParagraphs = utils->getInvalidIntVectorTestValue("deleteNotesSlideParagraphs", "paragraphs", paramParagraphs);
	utils->initialize("deleteNotesSlideParagraphs", "paragraphs", paramParagraphs);

	bool failed = true;
	try
	{
		api->deleteNotesSlideParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideParagraphs", "paragraphs");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideParagraphs", "paragraphs", paramParagraphs);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideParagraphs", "paragraphs");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideParagraphs", "paragraphs", paramParagraphs);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlideParagraphs", "paragraphs"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlideParagraphsInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlideParagraphs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlideParagraphs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteNotesSlideParagraphs", "shapeIndex");
	std::vector<int32_t> paramParagraphs = utils->getIntVectorTestValue("deleteNotesSlideParagraphs", "paragraphs");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlideParagraphs", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlideParagraphs", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlideParagraphs", "storage");
	paramPassword = utils->getInvalidTestValue("deleteNotesSlideParagraphs", "password", paramPassword);
	utils->initialize("deleteNotesSlideParagraphs", "password", paramPassword);

	bool failed = true;
	try
	{
		api->deleteNotesSlideParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideParagraphs", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideParagraphs", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideParagraphs", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideParagraphs", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlideParagraphs", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlideParagraphsInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlideParagraphs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlideParagraphs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteNotesSlideParagraphs", "shapeIndex");
	std::vector<int32_t> paramParagraphs = utils->getIntVectorTestValue("deleteNotesSlideParagraphs", "paragraphs");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlideParagraphs", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlideParagraphs", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlideParagraphs", "storage");
	paramFolder = utils->getInvalidTestValue("deleteNotesSlideParagraphs", "folder", paramFolder);
	utils->initialize("deleteNotesSlideParagraphs", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->deleteNotesSlideParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideParagraphs", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideParagraphs", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideParagraphs", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideParagraphs", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlideParagraphs", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlideParagraphsInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlideParagraphs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlideParagraphs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteNotesSlideParagraphs", "shapeIndex");
	std::vector<int32_t> paramParagraphs = utils->getIntVectorTestValue("deleteNotesSlideParagraphs", "paragraphs");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlideParagraphs", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlideParagraphs", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlideParagraphs", "storage");
	paramStorage = utils->getInvalidTestValue("deleteNotesSlideParagraphs", "storage", paramStorage);
	utils->initialize("deleteNotesSlideParagraphs", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->deleteNotesSlideParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideParagraphs", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideParagraphs", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideParagraphs", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideParagraphs", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlideParagraphs", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlidePortion) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlidePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlidePortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteNotesSlidePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteNotesSlidePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("deleteNotesSlidePortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlidePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlidePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlidePortion", "storage");
	utils->initialize("deleteNotesSlidePortion", "");
	std::shared_ptr<Portions> result = api->deleteNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteNotesSlidePortionInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlidePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlidePortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteNotesSlidePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteNotesSlidePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("deleteNotesSlidePortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlidePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlidePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlidePortion", "storage");
	paramName = utils->getInvalidTestValue("deleteNotesSlidePortion", "name", paramName);
	utils->initialize("deleteNotesSlidePortion", "name", paramName);

	bool failed = true;
	try
	{
		api->deleteNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlidePortion", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlidePortion", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlidePortion", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlidePortion", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlidePortion", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlidePortionInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlidePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlidePortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteNotesSlidePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteNotesSlidePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("deleteNotesSlidePortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlidePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlidePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlidePortion", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("deleteNotesSlidePortion", "slideIndex", paramSlideIndex).value();
	utils->initialize("deleteNotesSlidePortion", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->deleteNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlidePortion", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlidePortion", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlidePortion", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlidePortion", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlidePortion", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlidePortionInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlidePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlidePortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteNotesSlidePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteNotesSlidePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("deleteNotesSlidePortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlidePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlidePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlidePortion", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("deleteNotesSlidePortion", "shapeIndex", paramShapeIndex).value();
	utils->initialize("deleteNotesSlidePortion", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->deleteNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlidePortion", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlidePortion", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlidePortion", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlidePortion", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlidePortion", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlidePortionInvalidParagraphIndex) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlidePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlidePortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteNotesSlidePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteNotesSlidePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("deleteNotesSlidePortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlidePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlidePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlidePortion", "storage");
	paramParagraphIndex = utils->getInvalidIntTestValue("deleteNotesSlidePortion", "paragraphIndex", paramParagraphIndex).value();
	utils->initialize("deleteNotesSlidePortion", "paragraphIndex", paramParagraphIndex);

	bool failed = true;
	try
	{
		api->deleteNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlidePortion", "paragraphIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlidePortion", "paragraphIndex", paramParagraphIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlidePortion", "paragraphIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlidePortion", "paragraphIndex", paramParagraphIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlidePortion", "paragraphIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlidePortionInvalidPortionIndex) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlidePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlidePortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteNotesSlidePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteNotesSlidePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("deleteNotesSlidePortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlidePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlidePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlidePortion", "storage");
	paramPortionIndex = utils->getInvalidIntTestValue("deleteNotesSlidePortion", "portionIndex", paramPortionIndex).value();
	utils->initialize("deleteNotesSlidePortion", "portionIndex", paramPortionIndex);

	bool failed = true;
	try
	{
		api->deleteNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlidePortion", "portionIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlidePortion", "portionIndex", paramPortionIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlidePortion", "portionIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlidePortion", "portionIndex", paramPortionIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlidePortion", "portionIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlidePortionInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlidePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlidePortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteNotesSlidePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteNotesSlidePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("deleteNotesSlidePortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlidePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlidePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlidePortion", "storage");
	paramPassword = utils->getInvalidTestValue("deleteNotesSlidePortion", "password", paramPassword);
	utils->initialize("deleteNotesSlidePortion", "password", paramPassword);

	bool failed = true;
	try
	{
		api->deleteNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlidePortion", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlidePortion", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlidePortion", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlidePortion", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlidePortion", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlidePortionInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlidePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlidePortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteNotesSlidePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteNotesSlidePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("deleteNotesSlidePortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlidePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlidePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlidePortion", "storage");
	paramFolder = utils->getInvalidTestValue("deleteNotesSlidePortion", "folder", paramFolder);
	utils->initialize("deleteNotesSlidePortion", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->deleteNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlidePortion", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlidePortion", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlidePortion", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlidePortion", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlidePortion", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlidePortionInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlidePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlidePortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteNotesSlidePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteNotesSlidePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("deleteNotesSlidePortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlidePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlidePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlidePortion", "storage");
	paramStorage = utils->getInvalidTestValue("deleteNotesSlidePortion", "storage", paramStorage);
	utils->initialize("deleteNotesSlidePortion", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->deleteNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlidePortion", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlidePortion", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlidePortion", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlidePortion", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlidePortion", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlidePortions) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlidePortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlidePortions", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteNotesSlidePortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteNotesSlidePortions", "paragraphIndex");
	std::vector<int32_t> paramPortions = utils->getIntVectorTestValue("deleteNotesSlidePortions", "portions");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlidePortions", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlidePortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlidePortions", "storage");
	utils->initialize("deleteNotesSlidePortions", "");
	std::shared_ptr<Portions> result = api->deleteNotesSlidePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteNotesSlidePortionsInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlidePortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlidePortions", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteNotesSlidePortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteNotesSlidePortions", "paragraphIndex");
	std::vector<int32_t> paramPortions = utils->getIntVectorTestValue("deleteNotesSlidePortions", "portions");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlidePortions", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlidePortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlidePortions", "storage");
	paramName = utils->getInvalidTestValue("deleteNotesSlidePortions", "name", paramName);
	utils->initialize("deleteNotesSlidePortions", "name", paramName);

	bool failed = true;
	try
	{
		api->deleteNotesSlidePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlidePortions", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlidePortions", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlidePortions", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlidePortions", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlidePortions", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlidePortionsInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlidePortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlidePortions", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteNotesSlidePortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteNotesSlidePortions", "paragraphIndex");
	std::vector<int32_t> paramPortions = utils->getIntVectorTestValue("deleteNotesSlidePortions", "portions");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlidePortions", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlidePortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlidePortions", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("deleteNotesSlidePortions", "slideIndex", paramSlideIndex).value();
	utils->initialize("deleteNotesSlidePortions", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->deleteNotesSlidePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlidePortions", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlidePortions", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlidePortions", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlidePortions", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlidePortions", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlidePortionsInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlidePortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlidePortions", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteNotesSlidePortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteNotesSlidePortions", "paragraphIndex");
	std::vector<int32_t> paramPortions = utils->getIntVectorTestValue("deleteNotesSlidePortions", "portions");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlidePortions", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlidePortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlidePortions", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("deleteNotesSlidePortions", "shapeIndex", paramShapeIndex).value();
	utils->initialize("deleteNotesSlidePortions", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->deleteNotesSlidePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlidePortions", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlidePortions", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlidePortions", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlidePortions", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlidePortions", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlidePortionsInvalidParagraphIndex) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlidePortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlidePortions", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteNotesSlidePortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteNotesSlidePortions", "paragraphIndex");
	std::vector<int32_t> paramPortions = utils->getIntVectorTestValue("deleteNotesSlidePortions", "portions");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlidePortions", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlidePortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlidePortions", "storage");
	paramParagraphIndex = utils->getInvalidIntTestValue("deleteNotesSlidePortions", "paragraphIndex", paramParagraphIndex).value();
	utils->initialize("deleteNotesSlidePortions", "paragraphIndex", paramParagraphIndex);

	bool failed = true;
	try
	{
		api->deleteNotesSlidePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlidePortions", "paragraphIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlidePortions", "paragraphIndex", paramParagraphIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlidePortions", "paragraphIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlidePortions", "paragraphIndex", paramParagraphIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlidePortions", "paragraphIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlidePortionsInvalidPortions) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlidePortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlidePortions", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteNotesSlidePortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteNotesSlidePortions", "paragraphIndex");
	std::vector<int32_t> paramPortions = utils->getIntVectorTestValue("deleteNotesSlidePortions", "portions");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlidePortions", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlidePortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlidePortions", "storage");
	paramPortions = utils->getInvalidIntVectorTestValue("deleteNotesSlidePortions", "portions", paramPortions);
	utils->initialize("deleteNotesSlidePortions", "portions", paramPortions);

	bool failed = true;
	try
	{
		api->deleteNotesSlidePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlidePortions", "portions");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlidePortions", "portions", paramPortions);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlidePortions", "portions");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlidePortions", "portions", paramPortions);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlidePortions", "portions"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlidePortionsInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlidePortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlidePortions", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteNotesSlidePortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteNotesSlidePortions", "paragraphIndex");
	std::vector<int32_t> paramPortions = utils->getIntVectorTestValue("deleteNotesSlidePortions", "portions");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlidePortions", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlidePortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlidePortions", "storage");
	paramPassword = utils->getInvalidTestValue("deleteNotesSlidePortions", "password", paramPassword);
	utils->initialize("deleteNotesSlidePortions", "password", paramPassword);

	bool failed = true;
	try
	{
		api->deleteNotesSlidePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlidePortions", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlidePortions", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlidePortions", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlidePortions", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlidePortions", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlidePortionsInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlidePortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlidePortions", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteNotesSlidePortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteNotesSlidePortions", "paragraphIndex");
	std::vector<int32_t> paramPortions = utils->getIntVectorTestValue("deleteNotesSlidePortions", "portions");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlidePortions", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlidePortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlidePortions", "storage");
	paramFolder = utils->getInvalidTestValue("deleteNotesSlidePortions", "folder", paramFolder);
	utils->initialize("deleteNotesSlidePortions", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->deleteNotesSlidePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlidePortions", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlidePortions", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlidePortions", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlidePortions", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlidePortions", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlidePortionsInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlidePortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlidePortions", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteNotesSlidePortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteNotesSlidePortions", "paragraphIndex");
	std::vector<int32_t> paramPortions = utils->getIntVectorTestValue("deleteNotesSlidePortions", "portions");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlidePortions", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlidePortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlidePortions", "storage");
	paramStorage = utils->getInvalidTestValue("deleteNotesSlidePortions", "storage", paramStorage);
	utils->initialize("deleteNotesSlidePortions", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->deleteNotesSlidePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlidePortions", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlidePortions", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlidePortions", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlidePortions", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlidePortions", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlideShape) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlideShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlideShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteNotesSlideShape", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlideShape", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlideShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlideShape", "storage");
	utils->initialize("deleteNotesSlideShape", "");
	std::shared_ptr<Shapes> result = api->deleteNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteNotesSlideShapeInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlideShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlideShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteNotesSlideShape", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlideShape", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlideShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlideShape", "storage");
	paramName = utils->getInvalidTestValue("deleteNotesSlideShape", "name", paramName);
	utils->initialize("deleteNotesSlideShape", "name", paramName);

	bool failed = true;
	try
	{
		api->deleteNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideShape", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideShape", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideShape", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideShape", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlideShape", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlideShapeInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlideShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlideShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteNotesSlideShape", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlideShape", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlideShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlideShape", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("deleteNotesSlideShape", "slideIndex", paramSlideIndex).value();
	utils->initialize("deleteNotesSlideShape", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->deleteNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideShape", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideShape", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideShape", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideShape", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlideShape", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlideShapeInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlideShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlideShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteNotesSlideShape", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlideShape", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlideShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlideShape", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("deleteNotesSlideShape", "shapeIndex", paramShapeIndex).value();
	utils->initialize("deleteNotesSlideShape", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->deleteNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideShape", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideShape", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideShape", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideShape", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlideShape", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlideShapeInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlideShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlideShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteNotesSlideShape", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlideShape", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlideShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlideShape", "storage");
	paramPassword = utils->getInvalidTestValue("deleteNotesSlideShape", "password", paramPassword);
	utils->initialize("deleteNotesSlideShape", "password", paramPassword);

	bool failed = true;
	try
	{
		api->deleteNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideShape", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideShape", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideShape", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideShape", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlideShape", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlideShapeInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlideShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlideShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteNotesSlideShape", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlideShape", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlideShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlideShape", "storage");
	paramFolder = utils->getInvalidTestValue("deleteNotesSlideShape", "folder", paramFolder);
	utils->initialize("deleteNotesSlideShape", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->deleteNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideShape", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideShape", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideShape", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideShape", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlideShape", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlideShapeInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlideShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlideShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteNotesSlideShape", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlideShape", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlideShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlideShape", "storage");
	paramStorage = utils->getInvalidTestValue("deleteNotesSlideShape", "storage", paramStorage);
	utils->initialize("deleteNotesSlideShape", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->deleteNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideShape", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideShape", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideShape", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideShape", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlideShape", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlideShapes) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlideShapes", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlideShapes", "slideIndex");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("deleteNotesSlideShapes", "shapes");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlideShapes", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlideShapes", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlideShapes", "storage");
	utils->initialize("deleteNotesSlideShapes", "");
	std::shared_ptr<Shapes> result = api->deleteNotesSlideShapes(paramName, paramSlideIndex, paramShapes, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteNotesSlideShapesInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlideShapes", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlideShapes", "slideIndex");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("deleteNotesSlideShapes", "shapes");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlideShapes", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlideShapes", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlideShapes", "storage");
	paramName = utils->getInvalidTestValue("deleteNotesSlideShapes", "name", paramName);
	utils->initialize("deleteNotesSlideShapes", "name", paramName);

	bool failed = true;
	try
	{
		api->deleteNotesSlideShapes(paramName, paramSlideIndex, paramShapes, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideShapes", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideShapes", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideShapes", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideShapes", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlideShapes", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlideShapesInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlideShapes", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlideShapes", "slideIndex");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("deleteNotesSlideShapes", "shapes");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlideShapes", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlideShapes", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlideShapes", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("deleteNotesSlideShapes", "slideIndex", paramSlideIndex).value();
	utils->initialize("deleteNotesSlideShapes", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->deleteNotesSlideShapes(paramName, paramSlideIndex, paramShapes, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideShapes", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideShapes", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideShapes", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideShapes", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlideShapes", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlideShapesInvalidShapes) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlideShapes", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlideShapes", "slideIndex");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("deleteNotesSlideShapes", "shapes");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlideShapes", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlideShapes", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlideShapes", "storage");
	paramShapes = utils->getInvalidIntVectorTestValue("deleteNotesSlideShapes", "shapes", paramShapes);
	utils->initialize("deleteNotesSlideShapes", "shapes", paramShapes);

	bool failed = true;
	try
	{
		api->deleteNotesSlideShapes(paramName, paramSlideIndex, paramShapes, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideShapes", "shapes");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideShapes", "shapes", paramShapes);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideShapes", "shapes");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideShapes", "shapes", paramShapes);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlideShapes", "shapes"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlideShapesInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlideShapes", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlideShapes", "slideIndex");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("deleteNotesSlideShapes", "shapes");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlideShapes", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlideShapes", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlideShapes", "storage");
	paramPassword = utils->getInvalidTestValue("deleteNotesSlideShapes", "password", paramPassword);
	utils->initialize("deleteNotesSlideShapes", "password", paramPassword);

	bool failed = true;
	try
	{
		api->deleteNotesSlideShapes(paramName, paramSlideIndex, paramShapes, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideShapes", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideShapes", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideShapes", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideShapes", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlideShapes", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlideShapesInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlideShapes", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlideShapes", "slideIndex");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("deleteNotesSlideShapes", "shapes");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlideShapes", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlideShapes", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlideShapes", "storage");
	paramFolder = utils->getInvalidTestValue("deleteNotesSlideShapes", "folder", paramFolder);
	utils->initialize("deleteNotesSlideShapes", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->deleteNotesSlideShapes(paramName, paramSlideIndex, paramShapes, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideShapes", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideShapes", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideShapes", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideShapes", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlideShapes", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlideShapesInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlideShapes", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlideShapes", "slideIndex");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("deleteNotesSlideShapes", "shapes");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlideShapes", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlideShapes", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlideShapes", "storage");
	paramStorage = utils->getInvalidTestValue("deleteNotesSlideShapes", "storage", paramStorage);
	utils->initialize("deleteNotesSlideShapes", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->deleteNotesSlideShapes(paramName, paramSlideIndex, paramShapes, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideShapes", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideShapes", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideShapes", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideShapes", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlideShapes", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteParagraph) {
	utility::string_t paramName = utils->getTestValue("deleteParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteParagraph", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteParagraph", "storage");
	utils->initialize("deleteParagraph", "");
	std::shared_ptr<Paragraphs> result = api->deleteParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteParagraphInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteParagraph", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteParagraph", "storage");
	paramName = utils->getInvalidTestValue("deleteParagraph", "name", paramName);
	utils->initialize("deleteParagraph", "name", paramName);

	bool failed = true;
	try
	{
		api->deleteParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteParagraph", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteParagraph", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteParagraph", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteParagraph", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteParagraph", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteParagraphInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("deleteParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteParagraph", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteParagraph", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("deleteParagraph", "slideIndex", paramSlideIndex).value();
	utils->initialize("deleteParagraph", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->deleteParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteParagraph", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteParagraph", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteParagraph", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteParagraph", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteParagraph", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteParagraphInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("deleteParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteParagraph", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteParagraph", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("deleteParagraph", "shapeIndex", paramShapeIndex).value();
	utils->initialize("deleteParagraph", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->deleteParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteParagraph", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteParagraph", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteParagraph", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteParagraph", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteParagraph", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteParagraphInvalidParagraphIndex) {
	utility::string_t paramName = utils->getTestValue("deleteParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteParagraph", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteParagraph", "storage");
	paramParagraphIndex = utils->getInvalidIntTestValue("deleteParagraph", "paragraphIndex", paramParagraphIndex).value();
	utils->initialize("deleteParagraph", "paragraphIndex", paramParagraphIndex);

	bool failed = true;
	try
	{
		api->deleteParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteParagraph", "paragraphIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteParagraph", "paragraphIndex", paramParagraphIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteParagraph", "paragraphIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteParagraph", "paragraphIndex", paramParagraphIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteParagraph", "paragraphIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteParagraphInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteParagraph", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteParagraph", "storage");
	paramPassword = utils->getInvalidTestValue("deleteParagraph", "password", paramPassword);
	utils->initialize("deleteParagraph", "password", paramPassword);

	bool failed = true;
	try
	{
		api->deleteParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteParagraph", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteParagraph", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteParagraph", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteParagraph", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteParagraph", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteParagraphInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteParagraph", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteParagraph", "storage");
	paramFolder = utils->getInvalidTestValue("deleteParagraph", "folder", paramFolder);
	utils->initialize("deleteParagraph", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->deleteParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteParagraph", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteParagraph", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteParagraph", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteParagraph", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteParagraph", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteParagraphInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteParagraph", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteParagraph", "storage");
	paramStorage = utils->getInvalidTestValue("deleteParagraph", "storage", paramStorage);
	utils->initialize("deleteParagraph", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->deleteParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteParagraph", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteParagraph", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteParagraph", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteParagraph", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteParagraph", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteParagraphs) {
	utility::string_t paramName = utils->getTestValue("deleteParagraphs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteParagraphs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteParagraphs", "shapeIndex");
	std::vector<int32_t> paramParagraphs = utils->getIntVectorTestValue("deleteParagraphs", "paragraphs");
	utility::string_t paramPassword = utils->getTestValue("deleteParagraphs", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteParagraphs", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteParagraphs", "storage");
	utils->initialize("deleteParagraphs", "");
	std::shared_ptr<Paragraphs> result = api->deleteParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteParagraphsInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteParagraphs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteParagraphs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteParagraphs", "shapeIndex");
	std::vector<int32_t> paramParagraphs = utils->getIntVectorTestValue("deleteParagraphs", "paragraphs");
	utility::string_t paramPassword = utils->getTestValue("deleteParagraphs", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteParagraphs", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteParagraphs", "storage");
	paramName = utils->getInvalidTestValue("deleteParagraphs", "name", paramName);
	utils->initialize("deleteParagraphs", "name", paramName);

	bool failed = true;
	try
	{
		api->deleteParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteParagraphs", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteParagraphs", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteParagraphs", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteParagraphs", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteParagraphs", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteParagraphsInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("deleteParagraphs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteParagraphs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteParagraphs", "shapeIndex");
	std::vector<int32_t> paramParagraphs = utils->getIntVectorTestValue("deleteParagraphs", "paragraphs");
	utility::string_t paramPassword = utils->getTestValue("deleteParagraphs", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteParagraphs", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteParagraphs", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("deleteParagraphs", "slideIndex", paramSlideIndex).value();
	utils->initialize("deleteParagraphs", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->deleteParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteParagraphs", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteParagraphs", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteParagraphs", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteParagraphs", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteParagraphs", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteParagraphsInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("deleteParagraphs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteParagraphs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteParagraphs", "shapeIndex");
	std::vector<int32_t> paramParagraphs = utils->getIntVectorTestValue("deleteParagraphs", "paragraphs");
	utility::string_t paramPassword = utils->getTestValue("deleteParagraphs", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteParagraphs", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteParagraphs", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("deleteParagraphs", "shapeIndex", paramShapeIndex).value();
	utils->initialize("deleteParagraphs", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->deleteParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteParagraphs", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteParagraphs", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteParagraphs", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteParagraphs", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteParagraphs", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteParagraphsInvalidParagraphs) {
	utility::string_t paramName = utils->getTestValue("deleteParagraphs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteParagraphs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteParagraphs", "shapeIndex");
	std::vector<int32_t> paramParagraphs = utils->getIntVectorTestValue("deleteParagraphs", "paragraphs");
	utility::string_t paramPassword = utils->getTestValue("deleteParagraphs", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteParagraphs", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteParagraphs", "storage");
	paramParagraphs = utils->getInvalidIntVectorTestValue("deleteParagraphs", "paragraphs", paramParagraphs);
	utils->initialize("deleteParagraphs", "paragraphs", paramParagraphs);

	bool failed = true;
	try
	{
		api->deleteParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteParagraphs", "paragraphs");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteParagraphs", "paragraphs", paramParagraphs);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteParagraphs", "paragraphs");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteParagraphs", "paragraphs", paramParagraphs);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteParagraphs", "paragraphs"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteParagraphsInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteParagraphs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteParagraphs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteParagraphs", "shapeIndex");
	std::vector<int32_t> paramParagraphs = utils->getIntVectorTestValue("deleteParagraphs", "paragraphs");
	utility::string_t paramPassword = utils->getTestValue("deleteParagraphs", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteParagraphs", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteParagraphs", "storage");
	paramPassword = utils->getInvalidTestValue("deleteParagraphs", "password", paramPassword);
	utils->initialize("deleteParagraphs", "password", paramPassword);

	bool failed = true;
	try
	{
		api->deleteParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteParagraphs", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteParagraphs", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteParagraphs", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteParagraphs", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteParagraphs", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteParagraphsInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteParagraphs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteParagraphs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteParagraphs", "shapeIndex");
	std::vector<int32_t> paramParagraphs = utils->getIntVectorTestValue("deleteParagraphs", "paragraphs");
	utility::string_t paramPassword = utils->getTestValue("deleteParagraphs", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteParagraphs", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteParagraphs", "storage");
	paramFolder = utils->getInvalidTestValue("deleteParagraphs", "folder", paramFolder);
	utils->initialize("deleteParagraphs", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->deleteParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteParagraphs", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteParagraphs", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteParagraphs", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteParagraphs", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteParagraphs", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteParagraphsInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteParagraphs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteParagraphs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteParagraphs", "shapeIndex");
	std::vector<int32_t> paramParagraphs = utils->getIntVectorTestValue("deleteParagraphs", "paragraphs");
	utility::string_t paramPassword = utils->getTestValue("deleteParagraphs", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteParagraphs", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteParagraphs", "storage");
	paramStorage = utils->getInvalidTestValue("deleteParagraphs", "storage", paramStorage);
	utils->initialize("deleteParagraphs", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->deleteParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteParagraphs", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteParagraphs", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteParagraphs", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteParagraphs", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteParagraphs", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deletePortion) {
	utility::string_t paramName = utils->getTestValue("deletePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deletePortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deletePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deletePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("deletePortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("deletePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("deletePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("deletePortion", "storage");
	utils->initialize("deletePortion", "");
	std::shared_ptr<Portions> result = api->deletePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deletePortionInvalidName) {
	utility::string_t paramName = utils->getTestValue("deletePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deletePortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deletePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deletePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("deletePortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("deletePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("deletePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("deletePortion", "storage");
	paramName = utils->getInvalidTestValue("deletePortion", "name", paramName);
	utils->initialize("deletePortion", "name", paramName);

	bool failed = true;
	try
	{
		api->deletePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deletePortion", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deletePortion", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deletePortion", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deletePortion", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deletePortion", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deletePortionInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("deletePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deletePortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deletePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deletePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("deletePortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("deletePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("deletePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("deletePortion", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("deletePortion", "slideIndex", paramSlideIndex).value();
	utils->initialize("deletePortion", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->deletePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deletePortion", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deletePortion", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deletePortion", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deletePortion", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deletePortion", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deletePortionInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("deletePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deletePortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deletePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deletePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("deletePortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("deletePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("deletePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("deletePortion", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("deletePortion", "shapeIndex", paramShapeIndex).value();
	utils->initialize("deletePortion", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->deletePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deletePortion", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deletePortion", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deletePortion", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deletePortion", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deletePortion", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deletePortionInvalidParagraphIndex) {
	utility::string_t paramName = utils->getTestValue("deletePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deletePortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deletePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deletePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("deletePortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("deletePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("deletePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("deletePortion", "storage");
	paramParagraphIndex = utils->getInvalidIntTestValue("deletePortion", "paragraphIndex", paramParagraphIndex).value();
	utils->initialize("deletePortion", "paragraphIndex", paramParagraphIndex);

	bool failed = true;
	try
	{
		api->deletePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deletePortion", "paragraphIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deletePortion", "paragraphIndex", paramParagraphIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deletePortion", "paragraphIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deletePortion", "paragraphIndex", paramParagraphIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deletePortion", "paragraphIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deletePortionInvalidPortionIndex) {
	utility::string_t paramName = utils->getTestValue("deletePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deletePortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deletePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deletePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("deletePortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("deletePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("deletePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("deletePortion", "storage");
	paramPortionIndex = utils->getInvalidIntTestValue("deletePortion", "portionIndex", paramPortionIndex).value();
	utils->initialize("deletePortion", "portionIndex", paramPortionIndex);

	bool failed = true;
	try
	{
		api->deletePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deletePortion", "portionIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deletePortion", "portionIndex", paramPortionIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deletePortion", "portionIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deletePortion", "portionIndex", paramPortionIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deletePortion", "portionIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deletePortionInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deletePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deletePortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deletePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deletePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("deletePortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("deletePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("deletePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("deletePortion", "storage");
	paramPassword = utils->getInvalidTestValue("deletePortion", "password", paramPassword);
	utils->initialize("deletePortion", "password", paramPassword);

	bool failed = true;
	try
	{
		api->deletePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deletePortion", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deletePortion", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deletePortion", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deletePortion", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deletePortion", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deletePortionInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deletePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deletePortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deletePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deletePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("deletePortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("deletePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("deletePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("deletePortion", "storage");
	paramFolder = utils->getInvalidTestValue("deletePortion", "folder", paramFolder);
	utils->initialize("deletePortion", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->deletePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deletePortion", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deletePortion", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deletePortion", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deletePortion", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deletePortion", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deletePortionInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deletePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deletePortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deletePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deletePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("deletePortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("deletePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("deletePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("deletePortion", "storage");
	paramStorage = utils->getInvalidTestValue("deletePortion", "storage", paramStorage);
	utils->initialize("deletePortion", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->deletePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deletePortion", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deletePortion", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deletePortion", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deletePortion", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deletePortion", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deletePortions) {
	utility::string_t paramName = utils->getTestValue("deletePortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deletePortions", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deletePortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deletePortions", "paragraphIndex");
	std::vector<int32_t> paramPortions = utils->getIntVectorTestValue("deletePortions", "portions");
	utility::string_t paramPassword = utils->getTestValue("deletePortions", "password");
	utility::string_t paramFolder = utils->getTestValue("deletePortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("deletePortions", "storage");
	utils->initialize("deletePortions", "");
	std::shared_ptr<Portions> result = api->deletePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deletePortionsInvalidName) {
	utility::string_t paramName = utils->getTestValue("deletePortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deletePortions", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deletePortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deletePortions", "paragraphIndex");
	std::vector<int32_t> paramPortions = utils->getIntVectorTestValue("deletePortions", "portions");
	utility::string_t paramPassword = utils->getTestValue("deletePortions", "password");
	utility::string_t paramFolder = utils->getTestValue("deletePortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("deletePortions", "storage");
	paramName = utils->getInvalidTestValue("deletePortions", "name", paramName);
	utils->initialize("deletePortions", "name", paramName);

	bool failed = true;
	try
	{
		api->deletePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deletePortions", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deletePortions", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deletePortions", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deletePortions", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deletePortions", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deletePortionsInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("deletePortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deletePortions", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deletePortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deletePortions", "paragraphIndex");
	std::vector<int32_t> paramPortions = utils->getIntVectorTestValue("deletePortions", "portions");
	utility::string_t paramPassword = utils->getTestValue("deletePortions", "password");
	utility::string_t paramFolder = utils->getTestValue("deletePortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("deletePortions", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("deletePortions", "slideIndex", paramSlideIndex).value();
	utils->initialize("deletePortions", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->deletePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deletePortions", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deletePortions", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deletePortions", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deletePortions", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deletePortions", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deletePortionsInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("deletePortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deletePortions", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deletePortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deletePortions", "paragraphIndex");
	std::vector<int32_t> paramPortions = utils->getIntVectorTestValue("deletePortions", "portions");
	utility::string_t paramPassword = utils->getTestValue("deletePortions", "password");
	utility::string_t paramFolder = utils->getTestValue("deletePortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("deletePortions", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("deletePortions", "shapeIndex", paramShapeIndex).value();
	utils->initialize("deletePortions", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->deletePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deletePortions", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deletePortions", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deletePortions", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deletePortions", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deletePortions", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deletePortionsInvalidParagraphIndex) {
	utility::string_t paramName = utils->getTestValue("deletePortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deletePortions", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deletePortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deletePortions", "paragraphIndex");
	std::vector<int32_t> paramPortions = utils->getIntVectorTestValue("deletePortions", "portions");
	utility::string_t paramPassword = utils->getTestValue("deletePortions", "password");
	utility::string_t paramFolder = utils->getTestValue("deletePortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("deletePortions", "storage");
	paramParagraphIndex = utils->getInvalidIntTestValue("deletePortions", "paragraphIndex", paramParagraphIndex).value();
	utils->initialize("deletePortions", "paragraphIndex", paramParagraphIndex);

	bool failed = true;
	try
	{
		api->deletePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deletePortions", "paragraphIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deletePortions", "paragraphIndex", paramParagraphIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deletePortions", "paragraphIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deletePortions", "paragraphIndex", paramParagraphIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deletePortions", "paragraphIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deletePortionsInvalidPortions) {
	utility::string_t paramName = utils->getTestValue("deletePortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deletePortions", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deletePortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deletePortions", "paragraphIndex");
	std::vector<int32_t> paramPortions = utils->getIntVectorTestValue("deletePortions", "portions");
	utility::string_t paramPassword = utils->getTestValue("deletePortions", "password");
	utility::string_t paramFolder = utils->getTestValue("deletePortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("deletePortions", "storage");
	paramPortions = utils->getInvalidIntVectorTestValue("deletePortions", "portions", paramPortions);
	utils->initialize("deletePortions", "portions", paramPortions);

	bool failed = true;
	try
	{
		api->deletePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deletePortions", "portions");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deletePortions", "portions", paramPortions);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deletePortions", "portions");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deletePortions", "portions", paramPortions);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deletePortions", "portions"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deletePortionsInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deletePortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deletePortions", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deletePortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deletePortions", "paragraphIndex");
	std::vector<int32_t> paramPortions = utils->getIntVectorTestValue("deletePortions", "portions");
	utility::string_t paramPassword = utils->getTestValue("deletePortions", "password");
	utility::string_t paramFolder = utils->getTestValue("deletePortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("deletePortions", "storage");
	paramPassword = utils->getInvalidTestValue("deletePortions", "password", paramPassword);
	utils->initialize("deletePortions", "password", paramPassword);

	bool failed = true;
	try
	{
		api->deletePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deletePortions", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deletePortions", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deletePortions", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deletePortions", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deletePortions", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deletePortionsInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deletePortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deletePortions", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deletePortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deletePortions", "paragraphIndex");
	std::vector<int32_t> paramPortions = utils->getIntVectorTestValue("deletePortions", "portions");
	utility::string_t paramPassword = utils->getTestValue("deletePortions", "password");
	utility::string_t paramFolder = utils->getTestValue("deletePortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("deletePortions", "storage");
	paramFolder = utils->getInvalidTestValue("deletePortions", "folder", paramFolder);
	utils->initialize("deletePortions", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->deletePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deletePortions", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deletePortions", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deletePortions", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deletePortions", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deletePortions", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deletePortionsInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deletePortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deletePortions", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deletePortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deletePortions", "paragraphIndex");
	std::vector<int32_t> paramPortions = utils->getIntVectorTestValue("deletePortions", "portions");
	utility::string_t paramPassword = utils->getTestValue("deletePortions", "password");
	utility::string_t paramFolder = utils->getTestValue("deletePortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("deletePortions", "storage");
	paramStorage = utils->getInvalidTestValue("deletePortions", "storage", paramStorage);
	utils->initialize("deletePortions", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->deletePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deletePortions", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deletePortions", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deletePortions", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deletePortions", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deletePortions", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSection) {
	utility::string_t paramName = utils->getTestValue("deleteSection", "name");
	int32_t paramSectionIndex = utils->getIntTestValue("deleteSection", "sectionIndex");
	auto paramWithSlides = utils->getOptionalBoolTestValue("deleteSection", "withSlides");
	utility::string_t paramPassword = utils->getTestValue("deleteSection", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSection", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSection", "storage");
	utils->initialize("deleteSection", "");
	std::shared_ptr<Sections> result = api->deleteSection(paramName, paramSectionIndex, paramWithSlides, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteSectionInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteSection", "name");
	int32_t paramSectionIndex = utils->getIntTestValue("deleteSection", "sectionIndex");
	auto paramWithSlides = utils->getOptionalBoolTestValue("deleteSection", "withSlides");
	utility::string_t paramPassword = utils->getTestValue("deleteSection", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSection", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSection", "storage");
	paramName = utils->getInvalidTestValue("deleteSection", "name", paramName);
	utils->initialize("deleteSection", "name", paramName);

	bool failed = true;
	try
	{
		api->deleteSection(paramName, paramSectionIndex, paramWithSlides, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSection", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSection", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSection", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSection", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSection", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSectionInvalidSectionIndex) {
	utility::string_t paramName = utils->getTestValue("deleteSection", "name");
	int32_t paramSectionIndex = utils->getIntTestValue("deleteSection", "sectionIndex");
	auto paramWithSlides = utils->getOptionalBoolTestValue("deleteSection", "withSlides");
	utility::string_t paramPassword = utils->getTestValue("deleteSection", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSection", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSection", "storage");
	paramSectionIndex = utils->getInvalidIntTestValue("deleteSection", "sectionIndex", paramSectionIndex).value();
	utils->initialize("deleteSection", "sectionIndex", paramSectionIndex);

	bool failed = true;
	try
	{
		api->deleteSection(paramName, paramSectionIndex, paramWithSlides, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSection", "sectionIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSection", "sectionIndex", paramSectionIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSection", "sectionIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSection", "sectionIndex", paramSectionIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSection", "sectionIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSectionInvalidWithSlides) {
	utility::string_t paramName = utils->getTestValue("deleteSection", "name");
	int32_t paramSectionIndex = utils->getIntTestValue("deleteSection", "sectionIndex");
	auto paramWithSlides = utils->getOptionalBoolTestValue("deleteSection", "withSlides");
	utility::string_t paramPassword = utils->getTestValue("deleteSection", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSection", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSection", "storage");
	paramWithSlides = utils->getInvalidBoolTestValue("deleteSection", "withSlides", paramWithSlides).value();
	utils->initialize("deleteSection", "withSlides", paramWithSlides);

	bool failed = true;
	try
	{
		api->deleteSection(paramName, paramSectionIndex, paramWithSlides, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSection", "withSlides");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSection", "withSlides", paramWithSlides);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSection", "withSlides");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSection", "withSlides", paramWithSlides);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSection", "withSlides"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSectionInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteSection", "name");
	int32_t paramSectionIndex = utils->getIntTestValue("deleteSection", "sectionIndex");
	auto paramWithSlides = utils->getOptionalBoolTestValue("deleteSection", "withSlides");
	utility::string_t paramPassword = utils->getTestValue("deleteSection", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSection", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSection", "storage");
	paramPassword = utils->getInvalidTestValue("deleteSection", "password", paramPassword);
	utils->initialize("deleteSection", "password", paramPassword);

	bool failed = true;
	try
	{
		api->deleteSection(paramName, paramSectionIndex, paramWithSlides, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSection", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSection", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSection", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSection", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSection", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSectionInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteSection", "name");
	int32_t paramSectionIndex = utils->getIntTestValue("deleteSection", "sectionIndex");
	auto paramWithSlides = utils->getOptionalBoolTestValue("deleteSection", "withSlides");
	utility::string_t paramPassword = utils->getTestValue("deleteSection", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSection", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSection", "storage");
	paramFolder = utils->getInvalidTestValue("deleteSection", "folder", paramFolder);
	utils->initialize("deleteSection", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->deleteSection(paramName, paramSectionIndex, paramWithSlides, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSection", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSection", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSection", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSection", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSection", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSectionInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteSection", "name");
	int32_t paramSectionIndex = utils->getIntTestValue("deleteSection", "sectionIndex");
	auto paramWithSlides = utils->getOptionalBoolTestValue("deleteSection", "withSlides");
	utility::string_t paramPassword = utils->getTestValue("deleteSection", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSection", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSection", "storage");
	paramStorage = utils->getInvalidTestValue("deleteSection", "storage", paramStorage);
	utils->initialize("deleteSection", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->deleteSection(paramName, paramSectionIndex, paramWithSlides, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSection", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSection", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSection", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSection", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSection", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSections) {
	utility::string_t paramName = utils->getTestValue("deleteSections", "name");
	std::vector<int32_t> paramSections = utils->getIntVectorTestValue("deleteSections", "sections");
	auto paramWithSlides = utils->getOptionalBoolTestValue("deleteSections", "withSlides");
	utility::string_t paramPassword = utils->getTestValue("deleteSections", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSections", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSections", "storage");
	utils->initialize("deleteSections", "");
	std::shared_ptr<Sections> result = api->deleteSections(paramName, paramSections, paramWithSlides, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteSectionsInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteSections", "name");
	std::vector<int32_t> paramSections = utils->getIntVectorTestValue("deleteSections", "sections");
	auto paramWithSlides = utils->getOptionalBoolTestValue("deleteSections", "withSlides");
	utility::string_t paramPassword = utils->getTestValue("deleteSections", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSections", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSections", "storage");
	paramName = utils->getInvalidTestValue("deleteSections", "name", paramName);
	utils->initialize("deleteSections", "name", paramName);

	bool failed = true;
	try
	{
		api->deleteSections(paramName, paramSections, paramWithSlides, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSections", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSections", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSections", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSections", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSections", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSectionsInvalidSections) {
	utility::string_t paramName = utils->getTestValue("deleteSections", "name");
	std::vector<int32_t> paramSections = utils->getIntVectorTestValue("deleteSections", "sections");
	auto paramWithSlides = utils->getOptionalBoolTestValue("deleteSections", "withSlides");
	utility::string_t paramPassword = utils->getTestValue("deleteSections", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSections", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSections", "storage");
	paramSections = utils->getInvalidIntVectorTestValue("deleteSections", "sections", paramSections);
	utils->initialize("deleteSections", "sections", paramSections);

	bool failed = true;
	try
	{
		api->deleteSections(paramName, paramSections, paramWithSlides, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSections", "sections");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSections", "sections", paramSections);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSections", "sections");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSections", "sections", paramSections);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSections", "sections"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSectionsInvalidWithSlides) {
	utility::string_t paramName = utils->getTestValue("deleteSections", "name");
	std::vector<int32_t> paramSections = utils->getIntVectorTestValue("deleteSections", "sections");
	auto paramWithSlides = utils->getOptionalBoolTestValue("deleteSections", "withSlides");
	utility::string_t paramPassword = utils->getTestValue("deleteSections", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSections", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSections", "storage");
	paramWithSlides = utils->getInvalidBoolTestValue("deleteSections", "withSlides", paramWithSlides).value();
	utils->initialize("deleteSections", "withSlides", paramWithSlides);

	bool failed = true;
	try
	{
		api->deleteSections(paramName, paramSections, paramWithSlides, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSections", "withSlides");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSections", "withSlides", paramWithSlides);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSections", "withSlides");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSections", "withSlides", paramWithSlides);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSections", "withSlides"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSectionsInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteSections", "name");
	std::vector<int32_t> paramSections = utils->getIntVectorTestValue("deleteSections", "sections");
	auto paramWithSlides = utils->getOptionalBoolTestValue("deleteSections", "withSlides");
	utility::string_t paramPassword = utils->getTestValue("deleteSections", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSections", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSections", "storage");
	paramPassword = utils->getInvalidTestValue("deleteSections", "password", paramPassword);
	utils->initialize("deleteSections", "password", paramPassword);

	bool failed = true;
	try
	{
		api->deleteSections(paramName, paramSections, paramWithSlides, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSections", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSections", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSections", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSections", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSections", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSectionsInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteSections", "name");
	std::vector<int32_t> paramSections = utils->getIntVectorTestValue("deleteSections", "sections");
	auto paramWithSlides = utils->getOptionalBoolTestValue("deleteSections", "withSlides");
	utility::string_t paramPassword = utils->getTestValue("deleteSections", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSections", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSections", "storage");
	paramFolder = utils->getInvalidTestValue("deleteSections", "folder", paramFolder);
	utils->initialize("deleteSections", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->deleteSections(paramName, paramSections, paramWithSlides, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSections", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSections", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSections", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSections", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSections", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSectionsInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteSections", "name");
	std::vector<int32_t> paramSections = utils->getIntVectorTestValue("deleteSections", "sections");
	auto paramWithSlides = utils->getOptionalBoolTestValue("deleteSections", "withSlides");
	utility::string_t paramPassword = utils->getTestValue("deleteSections", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSections", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSections", "storage");
	paramStorage = utils->getInvalidTestValue("deleteSections", "storage", paramStorage);
	utils->initialize("deleteSections", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->deleteSections(paramName, paramSections, paramWithSlides, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSections", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSections", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSections", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSections", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSections", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideAnimation) {
	utility::string_t paramName = utils->getTestValue("deleteSlideAnimation", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlideAnimation", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSlideAnimation", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlideAnimation", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlideAnimation", "storage");
	utils->initialize("deleteSlideAnimation", "");
	std::shared_ptr<SlideAnimation> result = api->deleteAnimation(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteSlideAnimationInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteSlideAnimation", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlideAnimation", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSlideAnimation", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlideAnimation", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlideAnimation", "storage");
	paramName = utils->getInvalidTestValue("deleteSlideAnimation", "name", paramName);
	utils->initialize("deleteSlideAnimation", "name", paramName);

	bool failed = true;
	try
	{
		api->deleteAnimation(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimation", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimation", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimation", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimation", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideAnimation", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideAnimationInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("deleteSlideAnimation", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlideAnimation", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSlideAnimation", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlideAnimation", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlideAnimation", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("deleteSlideAnimation", "slideIndex", paramSlideIndex).value();
	utils->initialize("deleteSlideAnimation", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->deleteAnimation(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimation", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimation", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimation", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimation", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideAnimation", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideAnimationInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteSlideAnimation", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlideAnimation", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSlideAnimation", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlideAnimation", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlideAnimation", "storage");
	paramPassword = utils->getInvalidTestValue("deleteSlideAnimation", "password", paramPassword);
	utils->initialize("deleteSlideAnimation", "password", paramPassword);

	bool failed = true;
	try
	{
		api->deleteAnimation(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimation", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimation", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimation", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimation", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideAnimation", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideAnimationInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteSlideAnimation", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlideAnimation", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSlideAnimation", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlideAnimation", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlideAnimation", "storage");
	paramFolder = utils->getInvalidTestValue("deleteSlideAnimation", "folder", paramFolder);
	utils->initialize("deleteSlideAnimation", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->deleteAnimation(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimation", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimation", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimation", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimation", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideAnimation", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideAnimationInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteSlideAnimation", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlideAnimation", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSlideAnimation", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlideAnimation", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlideAnimation", "storage");
	paramStorage = utils->getInvalidTestValue("deleteSlideAnimation", "storage", paramStorage);
	utils->initialize("deleteSlideAnimation", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->deleteAnimation(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimation", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimation", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimation", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimation", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideAnimation", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideAnimationEffect) {
	utility::string_t paramName = utils->getTestValue("deleteSlideAnimationEffect", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlideAnimationEffect", "slideIndex");
	int32_t paramEffectIndex = utils->getIntTestValue("deleteSlideAnimationEffect", "effectIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSlideAnimationEffect", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlideAnimationEffect", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlideAnimationEffect", "storage");
	utils->initialize("deleteSlideAnimationEffect", "");
	std::shared_ptr<SlideAnimation> result = api->deleteAnimationEffect(paramName, paramSlideIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteSlideAnimationEffectInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteSlideAnimationEffect", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlideAnimationEffect", "slideIndex");
	int32_t paramEffectIndex = utils->getIntTestValue("deleteSlideAnimationEffect", "effectIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSlideAnimationEffect", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlideAnimationEffect", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlideAnimationEffect", "storage");
	paramName = utils->getInvalidTestValue("deleteSlideAnimationEffect", "name", paramName);
	utils->initialize("deleteSlideAnimationEffect", "name", paramName);

	bool failed = true;
	try
	{
		api->deleteAnimationEffect(paramName, paramSlideIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationEffect", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationEffect", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationEffect", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationEffect", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideAnimationEffect", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideAnimationEffectInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("deleteSlideAnimationEffect", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlideAnimationEffect", "slideIndex");
	int32_t paramEffectIndex = utils->getIntTestValue("deleteSlideAnimationEffect", "effectIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSlideAnimationEffect", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlideAnimationEffect", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlideAnimationEffect", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("deleteSlideAnimationEffect", "slideIndex", paramSlideIndex).value();
	utils->initialize("deleteSlideAnimationEffect", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->deleteAnimationEffect(paramName, paramSlideIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationEffect", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationEffect", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationEffect", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationEffect", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideAnimationEffect", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideAnimationEffectInvalidEffectIndex) {
	utility::string_t paramName = utils->getTestValue("deleteSlideAnimationEffect", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlideAnimationEffect", "slideIndex");
	int32_t paramEffectIndex = utils->getIntTestValue("deleteSlideAnimationEffect", "effectIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSlideAnimationEffect", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlideAnimationEffect", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlideAnimationEffect", "storage");
	paramEffectIndex = utils->getInvalidIntTestValue("deleteSlideAnimationEffect", "effectIndex", paramEffectIndex).value();
	utils->initialize("deleteSlideAnimationEffect", "effectIndex", paramEffectIndex);

	bool failed = true;
	try
	{
		api->deleteAnimationEffect(paramName, paramSlideIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationEffect", "effectIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationEffect", "effectIndex", paramEffectIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationEffect", "effectIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationEffect", "effectIndex", paramEffectIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideAnimationEffect", "effectIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideAnimationEffectInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteSlideAnimationEffect", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlideAnimationEffect", "slideIndex");
	int32_t paramEffectIndex = utils->getIntTestValue("deleteSlideAnimationEffect", "effectIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSlideAnimationEffect", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlideAnimationEffect", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlideAnimationEffect", "storage");
	paramPassword = utils->getInvalidTestValue("deleteSlideAnimationEffect", "password", paramPassword);
	utils->initialize("deleteSlideAnimationEffect", "password", paramPassword);

	bool failed = true;
	try
	{
		api->deleteAnimationEffect(paramName, paramSlideIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationEffect", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationEffect", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationEffect", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationEffect", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideAnimationEffect", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideAnimationEffectInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteSlideAnimationEffect", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlideAnimationEffect", "slideIndex");
	int32_t paramEffectIndex = utils->getIntTestValue("deleteSlideAnimationEffect", "effectIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSlideAnimationEffect", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlideAnimationEffect", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlideAnimationEffect", "storage");
	paramFolder = utils->getInvalidTestValue("deleteSlideAnimationEffect", "folder", paramFolder);
	utils->initialize("deleteSlideAnimationEffect", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->deleteAnimationEffect(paramName, paramSlideIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationEffect", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationEffect", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationEffect", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationEffect", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideAnimationEffect", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideAnimationEffectInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteSlideAnimationEffect", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlideAnimationEffect", "slideIndex");
	int32_t paramEffectIndex = utils->getIntTestValue("deleteSlideAnimationEffect", "effectIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSlideAnimationEffect", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlideAnimationEffect", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlideAnimationEffect", "storage");
	paramStorage = utils->getInvalidTestValue("deleteSlideAnimationEffect", "storage", paramStorage);
	utils->initialize("deleteSlideAnimationEffect", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->deleteAnimationEffect(paramName, paramSlideIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationEffect", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationEffect", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationEffect", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationEffect", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideAnimationEffect", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideAnimationInteractiveSequence) {
	utility::string_t paramName = utils->getTestValue("deleteSlideAnimationInteractiveSequence", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlideAnimationInteractiveSequence", "slideIndex");
	int32_t paramSequenceIndex = utils->getIntTestValue("deleteSlideAnimationInteractiveSequence", "sequenceIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSlideAnimationInteractiveSequence", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlideAnimationInteractiveSequence", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlideAnimationInteractiveSequence", "storage");
	utils->initialize("deleteSlideAnimationInteractiveSequence", "");
	std::shared_ptr<SlideAnimation> result = api->deleteAnimationInteractiveSequence(paramName, paramSlideIndex, paramSequenceIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteSlideAnimationInteractiveSequenceInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteSlideAnimationInteractiveSequence", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlideAnimationInteractiveSequence", "slideIndex");
	int32_t paramSequenceIndex = utils->getIntTestValue("deleteSlideAnimationInteractiveSequence", "sequenceIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSlideAnimationInteractiveSequence", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlideAnimationInteractiveSequence", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlideAnimationInteractiveSequence", "storage");
	paramName = utils->getInvalidTestValue("deleteSlideAnimationInteractiveSequence", "name", paramName);
	utils->initialize("deleteSlideAnimationInteractiveSequence", "name", paramName);

	bool failed = true;
	try
	{
		api->deleteAnimationInteractiveSequence(paramName, paramSlideIndex, paramSequenceIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationInteractiveSequence", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationInteractiveSequence", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationInteractiveSequence", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationInteractiveSequence", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideAnimationInteractiveSequence", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideAnimationInteractiveSequenceInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("deleteSlideAnimationInteractiveSequence", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlideAnimationInteractiveSequence", "slideIndex");
	int32_t paramSequenceIndex = utils->getIntTestValue("deleteSlideAnimationInteractiveSequence", "sequenceIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSlideAnimationInteractiveSequence", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlideAnimationInteractiveSequence", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlideAnimationInteractiveSequence", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("deleteSlideAnimationInteractiveSequence", "slideIndex", paramSlideIndex).value();
	utils->initialize("deleteSlideAnimationInteractiveSequence", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->deleteAnimationInteractiveSequence(paramName, paramSlideIndex, paramSequenceIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationInteractiveSequence", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationInteractiveSequence", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationInteractiveSequence", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationInteractiveSequence", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideAnimationInteractiveSequence", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideAnimationInteractiveSequenceInvalidSequenceIndex) {
	utility::string_t paramName = utils->getTestValue("deleteSlideAnimationInteractiveSequence", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlideAnimationInteractiveSequence", "slideIndex");
	int32_t paramSequenceIndex = utils->getIntTestValue("deleteSlideAnimationInteractiveSequence", "sequenceIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSlideAnimationInteractiveSequence", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlideAnimationInteractiveSequence", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlideAnimationInteractiveSequence", "storage");
	paramSequenceIndex = utils->getInvalidIntTestValue("deleteSlideAnimationInteractiveSequence", "sequenceIndex", paramSequenceIndex).value();
	utils->initialize("deleteSlideAnimationInteractiveSequence", "sequenceIndex", paramSequenceIndex);

	bool failed = true;
	try
	{
		api->deleteAnimationInteractiveSequence(paramName, paramSlideIndex, paramSequenceIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationInteractiveSequence", "sequenceIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationInteractiveSequence", "sequenceIndex", paramSequenceIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationInteractiveSequence", "sequenceIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationInteractiveSequence", "sequenceIndex", paramSequenceIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideAnimationInteractiveSequence", "sequenceIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideAnimationInteractiveSequenceInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteSlideAnimationInteractiveSequence", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlideAnimationInteractiveSequence", "slideIndex");
	int32_t paramSequenceIndex = utils->getIntTestValue("deleteSlideAnimationInteractiveSequence", "sequenceIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSlideAnimationInteractiveSequence", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlideAnimationInteractiveSequence", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlideAnimationInteractiveSequence", "storage");
	paramPassword = utils->getInvalidTestValue("deleteSlideAnimationInteractiveSequence", "password", paramPassword);
	utils->initialize("deleteSlideAnimationInteractiveSequence", "password", paramPassword);

	bool failed = true;
	try
	{
		api->deleteAnimationInteractiveSequence(paramName, paramSlideIndex, paramSequenceIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationInteractiveSequence", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationInteractiveSequence", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationInteractiveSequence", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationInteractiveSequence", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideAnimationInteractiveSequence", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideAnimationInteractiveSequenceInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteSlideAnimationInteractiveSequence", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlideAnimationInteractiveSequence", "slideIndex");
	int32_t paramSequenceIndex = utils->getIntTestValue("deleteSlideAnimationInteractiveSequence", "sequenceIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSlideAnimationInteractiveSequence", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlideAnimationInteractiveSequence", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlideAnimationInteractiveSequence", "storage");
	paramFolder = utils->getInvalidTestValue("deleteSlideAnimationInteractiveSequence", "folder", paramFolder);
	utils->initialize("deleteSlideAnimationInteractiveSequence", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->deleteAnimationInteractiveSequence(paramName, paramSlideIndex, paramSequenceIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationInteractiveSequence", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationInteractiveSequence", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationInteractiveSequence", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationInteractiveSequence", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideAnimationInteractiveSequence", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideAnimationInteractiveSequenceInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteSlideAnimationInteractiveSequence", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlideAnimationInteractiveSequence", "slideIndex");
	int32_t paramSequenceIndex = utils->getIntTestValue("deleteSlideAnimationInteractiveSequence", "sequenceIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSlideAnimationInteractiveSequence", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlideAnimationInteractiveSequence", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlideAnimationInteractiveSequence", "storage");
	paramStorage = utils->getInvalidTestValue("deleteSlideAnimationInteractiveSequence", "storage", paramStorage);
	utils->initialize("deleteSlideAnimationInteractiveSequence", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->deleteAnimationInteractiveSequence(paramName, paramSlideIndex, paramSequenceIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationInteractiveSequence", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationInteractiveSequence", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationInteractiveSequence", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationInteractiveSequence", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideAnimationInteractiveSequence", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideAnimationInteractiveSequenceEffect) {
	utility::string_t paramName = utils->getTestValue("deleteSlideAnimationInteractiveSequenceEffect", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlideAnimationInteractiveSequenceEffect", "slideIndex");
	int32_t paramSequenceIndex = utils->getIntTestValue("deleteSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
	int32_t paramEffectIndex = utils->getIntTestValue("deleteSlideAnimationInteractiveSequenceEffect", "effectIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSlideAnimationInteractiveSequenceEffect", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlideAnimationInteractiveSequenceEffect", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlideAnimationInteractiveSequenceEffect", "storage");
	utils->initialize("deleteSlideAnimationInteractiveSequenceEffect", "");
	std::shared_ptr<SlideAnimation> result = api->deleteAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteSlideAnimationInteractiveSequenceEffectInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteSlideAnimationInteractiveSequenceEffect", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlideAnimationInteractiveSequenceEffect", "slideIndex");
	int32_t paramSequenceIndex = utils->getIntTestValue("deleteSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
	int32_t paramEffectIndex = utils->getIntTestValue("deleteSlideAnimationInteractiveSequenceEffect", "effectIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSlideAnimationInteractiveSequenceEffect", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlideAnimationInteractiveSequenceEffect", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlideAnimationInteractiveSequenceEffect", "storage");
	paramName = utils->getInvalidTestValue("deleteSlideAnimationInteractiveSequenceEffect", "name", paramName);
	utils->initialize("deleteSlideAnimationInteractiveSequenceEffect", "name", paramName);

	bool failed = true;
	try
	{
		api->deleteAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationInteractiveSequenceEffect", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationInteractiveSequenceEffect", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationInteractiveSequenceEffect", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationInteractiveSequenceEffect", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideAnimationInteractiveSequenceEffect", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideAnimationInteractiveSequenceEffectInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("deleteSlideAnimationInteractiveSequenceEffect", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlideAnimationInteractiveSequenceEffect", "slideIndex");
	int32_t paramSequenceIndex = utils->getIntTestValue("deleteSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
	int32_t paramEffectIndex = utils->getIntTestValue("deleteSlideAnimationInteractiveSequenceEffect", "effectIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSlideAnimationInteractiveSequenceEffect", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlideAnimationInteractiveSequenceEffect", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlideAnimationInteractiveSequenceEffect", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("deleteSlideAnimationInteractiveSequenceEffect", "slideIndex", paramSlideIndex).value();
	utils->initialize("deleteSlideAnimationInteractiveSequenceEffect", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->deleteAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationInteractiveSequenceEffect", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationInteractiveSequenceEffect", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationInteractiveSequenceEffect", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationInteractiveSequenceEffect", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideAnimationInteractiveSequenceEffect", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideAnimationInteractiveSequenceEffectInvalidSequenceIndex) {
	utility::string_t paramName = utils->getTestValue("deleteSlideAnimationInteractiveSequenceEffect", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlideAnimationInteractiveSequenceEffect", "slideIndex");
	int32_t paramSequenceIndex = utils->getIntTestValue("deleteSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
	int32_t paramEffectIndex = utils->getIntTestValue("deleteSlideAnimationInteractiveSequenceEffect", "effectIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSlideAnimationInteractiveSequenceEffect", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlideAnimationInteractiveSequenceEffect", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlideAnimationInteractiveSequenceEffect", "storage");
	paramSequenceIndex = utils->getInvalidIntTestValue("deleteSlideAnimationInteractiveSequenceEffect", "sequenceIndex", paramSequenceIndex).value();
	utils->initialize("deleteSlideAnimationInteractiveSequenceEffect", "sequenceIndex", paramSequenceIndex);

	bool failed = true;
	try
	{
		api->deleteAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationInteractiveSequenceEffect", "sequenceIndex", paramSequenceIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationInteractiveSequenceEffect", "sequenceIndex", paramSequenceIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideAnimationInteractiveSequenceEffect", "sequenceIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideAnimationInteractiveSequenceEffectInvalidEffectIndex) {
	utility::string_t paramName = utils->getTestValue("deleteSlideAnimationInteractiveSequenceEffect", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlideAnimationInteractiveSequenceEffect", "slideIndex");
	int32_t paramSequenceIndex = utils->getIntTestValue("deleteSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
	int32_t paramEffectIndex = utils->getIntTestValue("deleteSlideAnimationInteractiveSequenceEffect", "effectIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSlideAnimationInteractiveSequenceEffect", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlideAnimationInteractiveSequenceEffect", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlideAnimationInteractiveSequenceEffect", "storage");
	paramEffectIndex = utils->getInvalidIntTestValue("deleteSlideAnimationInteractiveSequenceEffect", "effectIndex", paramEffectIndex).value();
	utils->initialize("deleteSlideAnimationInteractiveSequenceEffect", "effectIndex", paramEffectIndex);

	bool failed = true;
	try
	{
		api->deleteAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationInteractiveSequenceEffect", "effectIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationInteractiveSequenceEffect", "effectIndex", paramEffectIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationInteractiveSequenceEffect", "effectIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationInteractiveSequenceEffect", "effectIndex", paramEffectIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideAnimationInteractiveSequenceEffect", "effectIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideAnimationInteractiveSequenceEffectInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteSlideAnimationInteractiveSequenceEffect", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlideAnimationInteractiveSequenceEffect", "slideIndex");
	int32_t paramSequenceIndex = utils->getIntTestValue("deleteSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
	int32_t paramEffectIndex = utils->getIntTestValue("deleteSlideAnimationInteractiveSequenceEffect", "effectIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSlideAnimationInteractiveSequenceEffect", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlideAnimationInteractiveSequenceEffect", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlideAnimationInteractiveSequenceEffect", "storage");
	paramPassword = utils->getInvalidTestValue("deleteSlideAnimationInteractiveSequenceEffect", "password", paramPassword);
	utils->initialize("deleteSlideAnimationInteractiveSequenceEffect", "password", paramPassword);

	bool failed = true;
	try
	{
		api->deleteAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationInteractiveSequenceEffect", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationInteractiveSequenceEffect", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationInteractiveSequenceEffect", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationInteractiveSequenceEffect", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideAnimationInteractiveSequenceEffect", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideAnimationInteractiveSequenceEffectInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteSlideAnimationInteractiveSequenceEffect", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlideAnimationInteractiveSequenceEffect", "slideIndex");
	int32_t paramSequenceIndex = utils->getIntTestValue("deleteSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
	int32_t paramEffectIndex = utils->getIntTestValue("deleteSlideAnimationInteractiveSequenceEffect", "effectIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSlideAnimationInteractiveSequenceEffect", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlideAnimationInteractiveSequenceEffect", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlideAnimationInteractiveSequenceEffect", "storage");
	paramFolder = utils->getInvalidTestValue("deleteSlideAnimationInteractiveSequenceEffect", "folder", paramFolder);
	utils->initialize("deleteSlideAnimationInteractiveSequenceEffect", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->deleteAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationInteractiveSequenceEffect", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationInteractiveSequenceEffect", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationInteractiveSequenceEffect", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationInteractiveSequenceEffect", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideAnimationInteractiveSequenceEffect", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideAnimationInteractiveSequenceEffectInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteSlideAnimationInteractiveSequenceEffect", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlideAnimationInteractiveSequenceEffect", "slideIndex");
	int32_t paramSequenceIndex = utils->getIntTestValue("deleteSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
	int32_t paramEffectIndex = utils->getIntTestValue("deleteSlideAnimationInteractiveSequenceEffect", "effectIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSlideAnimationInteractiveSequenceEffect", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlideAnimationInteractiveSequenceEffect", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlideAnimationInteractiveSequenceEffect", "storage");
	paramStorage = utils->getInvalidTestValue("deleteSlideAnimationInteractiveSequenceEffect", "storage", paramStorage);
	utils->initialize("deleteSlideAnimationInteractiveSequenceEffect", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->deleteAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationInteractiveSequenceEffect", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationInteractiveSequenceEffect", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationInteractiveSequenceEffect", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationInteractiveSequenceEffect", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideAnimationInteractiveSequenceEffect", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideAnimationInteractiveSequences) {
	utility::string_t paramName = utils->getTestValue("deleteSlideAnimationInteractiveSequences", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlideAnimationInteractiveSequences", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSlideAnimationInteractiveSequences", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlideAnimationInteractiveSequences", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlideAnimationInteractiveSequences", "storage");
	utils->initialize("deleteSlideAnimationInteractiveSequences", "");
	std::shared_ptr<SlideAnimation> result = api->deleteAnimationInteractiveSequences(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteSlideAnimationInteractiveSequencesInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteSlideAnimationInteractiveSequences", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlideAnimationInteractiveSequences", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSlideAnimationInteractiveSequences", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlideAnimationInteractiveSequences", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlideAnimationInteractiveSequences", "storage");
	paramName = utils->getInvalidTestValue("deleteSlideAnimationInteractiveSequences", "name", paramName);
	utils->initialize("deleteSlideAnimationInteractiveSequences", "name", paramName);

	bool failed = true;
	try
	{
		api->deleteAnimationInteractiveSequences(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationInteractiveSequences", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationInteractiveSequences", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationInteractiveSequences", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationInteractiveSequences", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideAnimationInteractiveSequences", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideAnimationInteractiveSequencesInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("deleteSlideAnimationInteractiveSequences", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlideAnimationInteractiveSequences", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSlideAnimationInteractiveSequences", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlideAnimationInteractiveSequences", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlideAnimationInteractiveSequences", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("deleteSlideAnimationInteractiveSequences", "slideIndex", paramSlideIndex).value();
	utils->initialize("deleteSlideAnimationInteractiveSequences", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->deleteAnimationInteractiveSequences(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationInteractiveSequences", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationInteractiveSequences", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationInteractiveSequences", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationInteractiveSequences", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideAnimationInteractiveSequences", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideAnimationInteractiveSequencesInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteSlideAnimationInteractiveSequences", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlideAnimationInteractiveSequences", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSlideAnimationInteractiveSequences", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlideAnimationInteractiveSequences", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlideAnimationInteractiveSequences", "storage");
	paramPassword = utils->getInvalidTestValue("deleteSlideAnimationInteractiveSequences", "password", paramPassword);
	utils->initialize("deleteSlideAnimationInteractiveSequences", "password", paramPassword);

	bool failed = true;
	try
	{
		api->deleteAnimationInteractiveSequences(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationInteractiveSequences", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationInteractiveSequences", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationInteractiveSequences", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationInteractiveSequences", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideAnimationInteractiveSequences", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideAnimationInteractiveSequencesInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteSlideAnimationInteractiveSequences", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlideAnimationInteractiveSequences", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSlideAnimationInteractiveSequences", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlideAnimationInteractiveSequences", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlideAnimationInteractiveSequences", "storage");
	paramFolder = utils->getInvalidTestValue("deleteSlideAnimationInteractiveSequences", "folder", paramFolder);
	utils->initialize("deleteSlideAnimationInteractiveSequences", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->deleteAnimationInteractiveSequences(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationInteractiveSequences", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationInteractiveSequences", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationInteractiveSequences", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationInteractiveSequences", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideAnimationInteractiveSequences", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideAnimationInteractiveSequencesInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteSlideAnimationInteractiveSequences", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlideAnimationInteractiveSequences", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSlideAnimationInteractiveSequences", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlideAnimationInteractiveSequences", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlideAnimationInteractiveSequences", "storage");
	paramStorage = utils->getInvalidTestValue("deleteSlideAnimationInteractiveSequences", "storage", paramStorage);
	utils->initialize("deleteSlideAnimationInteractiveSequences", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->deleteAnimationInteractiveSequences(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationInteractiveSequences", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationInteractiveSequences", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationInteractiveSequences", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationInteractiveSequences", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideAnimationInteractiveSequences", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideAnimationMainSequence) {
	utility::string_t paramName = utils->getTestValue("deleteSlideAnimationMainSequence", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlideAnimationMainSequence", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSlideAnimationMainSequence", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlideAnimationMainSequence", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlideAnimationMainSequence", "storage");
	utils->initialize("deleteSlideAnimationMainSequence", "");
	std::shared_ptr<SlideAnimation> result = api->deleteAnimationMainSequence(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteSlideAnimationMainSequenceInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteSlideAnimationMainSequence", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlideAnimationMainSequence", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSlideAnimationMainSequence", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlideAnimationMainSequence", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlideAnimationMainSequence", "storage");
	paramName = utils->getInvalidTestValue("deleteSlideAnimationMainSequence", "name", paramName);
	utils->initialize("deleteSlideAnimationMainSequence", "name", paramName);

	bool failed = true;
	try
	{
		api->deleteAnimationMainSequence(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationMainSequence", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationMainSequence", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationMainSequence", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationMainSequence", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideAnimationMainSequence", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideAnimationMainSequenceInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("deleteSlideAnimationMainSequence", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlideAnimationMainSequence", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSlideAnimationMainSequence", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlideAnimationMainSequence", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlideAnimationMainSequence", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("deleteSlideAnimationMainSequence", "slideIndex", paramSlideIndex).value();
	utils->initialize("deleteSlideAnimationMainSequence", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->deleteAnimationMainSequence(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationMainSequence", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationMainSequence", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationMainSequence", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationMainSequence", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideAnimationMainSequence", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideAnimationMainSequenceInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteSlideAnimationMainSequence", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlideAnimationMainSequence", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSlideAnimationMainSequence", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlideAnimationMainSequence", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlideAnimationMainSequence", "storage");
	paramPassword = utils->getInvalidTestValue("deleteSlideAnimationMainSequence", "password", paramPassword);
	utils->initialize("deleteSlideAnimationMainSequence", "password", paramPassword);

	bool failed = true;
	try
	{
		api->deleteAnimationMainSequence(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationMainSequence", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationMainSequence", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationMainSequence", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationMainSequence", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideAnimationMainSequence", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideAnimationMainSequenceInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteSlideAnimationMainSequence", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlideAnimationMainSequence", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSlideAnimationMainSequence", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlideAnimationMainSequence", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlideAnimationMainSequence", "storage");
	paramFolder = utils->getInvalidTestValue("deleteSlideAnimationMainSequence", "folder", paramFolder);
	utils->initialize("deleteSlideAnimationMainSequence", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->deleteAnimationMainSequence(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationMainSequence", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationMainSequence", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationMainSequence", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationMainSequence", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideAnimationMainSequence", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideAnimationMainSequenceInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteSlideAnimationMainSequence", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlideAnimationMainSequence", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSlideAnimationMainSequence", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlideAnimationMainSequence", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlideAnimationMainSequence", "storage");
	paramStorage = utils->getInvalidTestValue("deleteSlideAnimationMainSequence", "storage", paramStorage);
	utils->initialize("deleteSlideAnimationMainSequence", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->deleteAnimationMainSequence(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationMainSequence", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationMainSequence", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationMainSequence", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationMainSequence", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideAnimationMainSequence", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideByIndex) {
	utility::string_t paramName = utils->getTestValue("deleteSlideByIndex", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlideByIndex", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSlideByIndex", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlideByIndex", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlideByIndex", "storage");
	utils->initialize("deleteSlideByIndex", "");
	std::shared_ptr<Slides> result = api->deleteSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteSlideByIndexInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteSlideByIndex", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlideByIndex", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSlideByIndex", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlideByIndex", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlideByIndex", "storage");
	paramName = utils->getInvalidTestValue("deleteSlideByIndex", "name", paramName);
	utils->initialize("deleteSlideByIndex", "name", paramName);

	bool failed = true;
	try
	{
		api->deleteSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideByIndex", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideByIndex", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideByIndex", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideByIndex", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideByIndex", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideByIndexInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("deleteSlideByIndex", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlideByIndex", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSlideByIndex", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlideByIndex", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlideByIndex", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("deleteSlideByIndex", "slideIndex", paramSlideIndex).value();
	utils->initialize("deleteSlideByIndex", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->deleteSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideByIndex", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideByIndex", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideByIndex", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideByIndex", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideByIndex", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideByIndexInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteSlideByIndex", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlideByIndex", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSlideByIndex", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlideByIndex", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlideByIndex", "storage");
	paramPassword = utils->getInvalidTestValue("deleteSlideByIndex", "password", paramPassword);
	utils->initialize("deleteSlideByIndex", "password", paramPassword);

	bool failed = true;
	try
	{
		api->deleteSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideByIndex", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideByIndex", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideByIndex", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideByIndex", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideByIndex", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideByIndexInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteSlideByIndex", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlideByIndex", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSlideByIndex", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlideByIndex", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlideByIndex", "storage");
	paramFolder = utils->getInvalidTestValue("deleteSlideByIndex", "folder", paramFolder);
	utils->initialize("deleteSlideByIndex", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->deleteSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideByIndex", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideByIndex", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideByIndex", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideByIndex", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideByIndex", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideByIndexInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteSlideByIndex", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlideByIndex", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSlideByIndex", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlideByIndex", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlideByIndex", "storage");
	paramStorage = utils->getInvalidTestValue("deleteSlideByIndex", "storage", paramStorage);
	utils->initialize("deleteSlideByIndex", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->deleteSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideByIndex", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideByIndex", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideByIndex", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideByIndex", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideByIndex", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideShape) {
	utility::string_t paramName = utils->getTestValue("deleteSlideShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlideShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSlideShape", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSlideShape", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlideShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlideShape", "storage");
	utils->initialize("deleteSlideShape", "");
	std::shared_ptr<Shapes> result = api->deleteShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteSlideShapeInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteSlideShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlideShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSlideShape", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSlideShape", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlideShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlideShape", "storage");
	paramName = utils->getInvalidTestValue("deleteSlideShape", "name", paramName);
	utils->initialize("deleteSlideShape", "name", paramName);

	bool failed = true;
	try
	{
		api->deleteShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideShape", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideShape", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideShape", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideShape", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideShape", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideShapeInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("deleteSlideShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlideShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSlideShape", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSlideShape", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlideShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlideShape", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("deleteSlideShape", "slideIndex", paramSlideIndex).value();
	utils->initialize("deleteSlideShape", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->deleteShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideShape", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideShape", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideShape", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideShape", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideShape", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideShapeInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("deleteSlideShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlideShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSlideShape", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSlideShape", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlideShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlideShape", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("deleteSlideShape", "shapeIndex", paramShapeIndex).value();
	utils->initialize("deleteSlideShape", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->deleteShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideShape", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideShape", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideShape", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideShape", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideShape", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideShapeInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteSlideShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlideShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSlideShape", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSlideShape", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlideShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlideShape", "storage");
	paramPassword = utils->getInvalidTestValue("deleteSlideShape", "password", paramPassword);
	utils->initialize("deleteSlideShape", "password", paramPassword);

	bool failed = true;
	try
	{
		api->deleteShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideShape", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideShape", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideShape", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideShape", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideShape", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideShapeInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteSlideShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlideShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSlideShape", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSlideShape", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlideShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlideShape", "storage");
	paramFolder = utils->getInvalidTestValue("deleteSlideShape", "folder", paramFolder);
	utils->initialize("deleteSlideShape", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->deleteShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideShape", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideShape", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideShape", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideShape", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideShape", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideShapeInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteSlideShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlideShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSlideShape", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSlideShape", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlideShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlideShape", "storage");
	paramStorage = utils->getInvalidTestValue("deleteSlideShape", "storage", paramStorage);
	utils->initialize("deleteSlideShape", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->deleteShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideShape", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideShape", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideShape", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideShape", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideShape", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideShapes) {
	utility::string_t paramName = utils->getTestValue("deleteSlideShapes", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlideShapes", "slideIndex");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("deleteSlideShapes", "shapes");
	utility::string_t paramPassword = utils->getTestValue("deleteSlideShapes", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlideShapes", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlideShapes", "storage");
	utils->initialize("deleteSlideShapes", "");
	std::shared_ptr<Shapes> result = api->deleteShapes(paramName, paramSlideIndex, paramShapes, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteSlideShapesInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteSlideShapes", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlideShapes", "slideIndex");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("deleteSlideShapes", "shapes");
	utility::string_t paramPassword = utils->getTestValue("deleteSlideShapes", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlideShapes", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlideShapes", "storage");
	paramName = utils->getInvalidTestValue("deleteSlideShapes", "name", paramName);
	utils->initialize("deleteSlideShapes", "name", paramName);

	bool failed = true;
	try
	{
		api->deleteShapes(paramName, paramSlideIndex, paramShapes, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideShapes", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideShapes", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideShapes", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideShapes", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideShapes", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideShapesInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("deleteSlideShapes", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlideShapes", "slideIndex");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("deleteSlideShapes", "shapes");
	utility::string_t paramPassword = utils->getTestValue("deleteSlideShapes", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlideShapes", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlideShapes", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("deleteSlideShapes", "slideIndex", paramSlideIndex).value();
	utils->initialize("deleteSlideShapes", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->deleteShapes(paramName, paramSlideIndex, paramShapes, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideShapes", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideShapes", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideShapes", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideShapes", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideShapes", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideShapesInvalidShapes) {
	utility::string_t paramName = utils->getTestValue("deleteSlideShapes", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlideShapes", "slideIndex");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("deleteSlideShapes", "shapes");
	utility::string_t paramPassword = utils->getTestValue("deleteSlideShapes", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlideShapes", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlideShapes", "storage");
	paramShapes = utils->getInvalidIntVectorTestValue("deleteSlideShapes", "shapes", paramShapes);
	utils->initialize("deleteSlideShapes", "shapes", paramShapes);

	bool failed = true;
	try
	{
		api->deleteShapes(paramName, paramSlideIndex, paramShapes, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideShapes", "shapes");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideShapes", "shapes", paramShapes);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideShapes", "shapes");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideShapes", "shapes", paramShapes);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideShapes", "shapes"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideShapesInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteSlideShapes", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlideShapes", "slideIndex");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("deleteSlideShapes", "shapes");
	utility::string_t paramPassword = utils->getTestValue("deleteSlideShapes", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlideShapes", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlideShapes", "storage");
	paramPassword = utils->getInvalidTestValue("deleteSlideShapes", "password", paramPassword);
	utils->initialize("deleteSlideShapes", "password", paramPassword);

	bool failed = true;
	try
	{
		api->deleteShapes(paramName, paramSlideIndex, paramShapes, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideShapes", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideShapes", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideShapes", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideShapes", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideShapes", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideShapesInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteSlideShapes", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlideShapes", "slideIndex");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("deleteSlideShapes", "shapes");
	utility::string_t paramPassword = utils->getTestValue("deleteSlideShapes", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlideShapes", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlideShapes", "storage");
	paramFolder = utils->getInvalidTestValue("deleteSlideShapes", "folder", paramFolder);
	utils->initialize("deleteSlideShapes", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->deleteShapes(paramName, paramSlideIndex, paramShapes, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideShapes", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideShapes", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideShapes", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideShapes", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideShapes", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideShapesInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteSlideShapes", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlideShapes", "slideIndex");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("deleteSlideShapes", "shapes");
	utility::string_t paramPassword = utils->getTestValue("deleteSlideShapes", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlideShapes", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlideShapes", "storage");
	paramStorage = utils->getInvalidTestValue("deleteSlideShapes", "storage", paramStorage);
	utils->initialize("deleteSlideShapes", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->deleteShapes(paramName, paramSlideIndex, paramShapes, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideShapes", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideShapes", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideShapes", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideShapes", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideShapes", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideSubshape) {
	utility::string_t paramName = utils->getTestValue("deleteSlideSubshape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlideSubshape", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSlideSubshape", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSlideSubshape", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSlideSubshape", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlideSubshape", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlideSubshape", "storage");
	utils->initialize("deleteSlideSubshape", "");
	std::shared_ptr<Shapes> result = api->deleteSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteSlideSubshapeInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteSlideSubshape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlideSubshape", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSlideSubshape", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSlideSubshape", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSlideSubshape", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlideSubshape", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlideSubshape", "storage");
	paramName = utils->getInvalidTestValue("deleteSlideSubshape", "name", paramName);
	utils->initialize("deleteSlideSubshape", "name", paramName);

	bool failed = true;
	try
	{
		api->deleteSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideSubshape", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideSubshape", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideSubshape", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideSubshape", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideSubshape", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideSubshapeInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("deleteSlideSubshape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlideSubshape", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSlideSubshape", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSlideSubshape", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSlideSubshape", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlideSubshape", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlideSubshape", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("deleteSlideSubshape", "slideIndex", paramSlideIndex).value();
	utils->initialize("deleteSlideSubshape", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->deleteSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideSubshape", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideSubshape", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideSubshape", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideSubshape", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideSubshape", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideSubshapeInvalidPath) {
	utility::string_t paramName = utils->getTestValue("deleteSlideSubshape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlideSubshape", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSlideSubshape", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSlideSubshape", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSlideSubshape", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlideSubshape", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlideSubshape", "storage");
	paramPath = utils->getInvalidTestValue("deleteSlideSubshape", "path", paramPath);
	utils->initialize("deleteSlideSubshape", "path", paramPath);

	bool failed = true;
	try
	{
		api->deleteSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideSubshape", "path");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideSubshape", "path", paramPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideSubshape", "path");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideSubshape", "path", paramPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideSubshape", "path"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideSubshapeInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("deleteSlideSubshape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlideSubshape", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSlideSubshape", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSlideSubshape", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSlideSubshape", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlideSubshape", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlideSubshape", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("deleteSlideSubshape", "shapeIndex", paramShapeIndex).value();
	utils->initialize("deleteSlideSubshape", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->deleteSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideSubshape", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideSubshape", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideSubshape", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideSubshape", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideSubshape", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideSubshapeInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteSlideSubshape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlideSubshape", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSlideSubshape", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSlideSubshape", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSlideSubshape", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlideSubshape", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlideSubshape", "storage");
	paramPassword = utils->getInvalidTestValue("deleteSlideSubshape", "password", paramPassword);
	utils->initialize("deleteSlideSubshape", "password", paramPassword);

	bool failed = true;
	try
	{
		api->deleteSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideSubshape", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideSubshape", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideSubshape", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideSubshape", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideSubshape", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideSubshapeInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteSlideSubshape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlideSubshape", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSlideSubshape", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSlideSubshape", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSlideSubshape", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlideSubshape", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlideSubshape", "storage");
	paramFolder = utils->getInvalidTestValue("deleteSlideSubshape", "folder", paramFolder);
	utils->initialize("deleteSlideSubshape", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->deleteSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideSubshape", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideSubshape", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideSubshape", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideSubshape", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideSubshape", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideSubshapeInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteSlideSubshape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlideSubshape", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSlideSubshape", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSlideSubshape", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSlideSubshape", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlideSubshape", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlideSubshape", "storage");
	paramStorage = utils->getInvalidTestValue("deleteSlideSubshape", "storage", paramStorage);
	utils->initialize("deleteSlideSubshape", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->deleteSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideSubshape", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideSubshape", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideSubshape", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideSubshape", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideSubshape", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideSubshapes) {
	utility::string_t paramName = utils->getTestValue("deleteSlideSubshapes", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlideSubshapes", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSlideSubshapes", "path");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("deleteSlideSubshapes", "shapes");
	utility::string_t paramPassword = utils->getTestValue("deleteSlideSubshapes", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlideSubshapes", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlideSubshapes", "storage");
	utils->initialize("deleteSlideSubshapes", "");
	std::shared_ptr<Shapes> result = api->deleteSubshapes(paramName, paramSlideIndex, paramPath, paramShapes, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteSlideSubshapesInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteSlideSubshapes", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlideSubshapes", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSlideSubshapes", "path");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("deleteSlideSubshapes", "shapes");
	utility::string_t paramPassword = utils->getTestValue("deleteSlideSubshapes", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlideSubshapes", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlideSubshapes", "storage");
	paramName = utils->getInvalidTestValue("deleteSlideSubshapes", "name", paramName);
	utils->initialize("deleteSlideSubshapes", "name", paramName);

	bool failed = true;
	try
	{
		api->deleteSubshapes(paramName, paramSlideIndex, paramPath, paramShapes, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideSubshapes", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideSubshapes", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideSubshapes", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideSubshapes", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideSubshapes", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideSubshapesInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("deleteSlideSubshapes", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlideSubshapes", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSlideSubshapes", "path");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("deleteSlideSubshapes", "shapes");
	utility::string_t paramPassword = utils->getTestValue("deleteSlideSubshapes", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlideSubshapes", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlideSubshapes", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("deleteSlideSubshapes", "slideIndex", paramSlideIndex).value();
	utils->initialize("deleteSlideSubshapes", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->deleteSubshapes(paramName, paramSlideIndex, paramPath, paramShapes, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideSubshapes", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideSubshapes", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideSubshapes", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideSubshapes", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideSubshapes", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideSubshapesInvalidPath) {
	utility::string_t paramName = utils->getTestValue("deleteSlideSubshapes", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlideSubshapes", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSlideSubshapes", "path");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("deleteSlideSubshapes", "shapes");
	utility::string_t paramPassword = utils->getTestValue("deleteSlideSubshapes", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlideSubshapes", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlideSubshapes", "storage");
	paramPath = utils->getInvalidTestValue("deleteSlideSubshapes", "path", paramPath);
	utils->initialize("deleteSlideSubshapes", "path", paramPath);

	bool failed = true;
	try
	{
		api->deleteSubshapes(paramName, paramSlideIndex, paramPath, paramShapes, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideSubshapes", "path");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideSubshapes", "path", paramPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideSubshapes", "path");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideSubshapes", "path", paramPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideSubshapes", "path"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideSubshapesInvalidShapes) {
	utility::string_t paramName = utils->getTestValue("deleteSlideSubshapes", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlideSubshapes", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSlideSubshapes", "path");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("deleteSlideSubshapes", "shapes");
	utility::string_t paramPassword = utils->getTestValue("deleteSlideSubshapes", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlideSubshapes", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlideSubshapes", "storage");
	paramShapes = utils->getInvalidIntVectorTestValue("deleteSlideSubshapes", "shapes", paramShapes);
	utils->initialize("deleteSlideSubshapes", "shapes", paramShapes);

	bool failed = true;
	try
	{
		api->deleteSubshapes(paramName, paramSlideIndex, paramPath, paramShapes, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideSubshapes", "shapes");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideSubshapes", "shapes", paramShapes);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideSubshapes", "shapes");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideSubshapes", "shapes", paramShapes);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideSubshapes", "shapes"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideSubshapesInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteSlideSubshapes", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlideSubshapes", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSlideSubshapes", "path");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("deleteSlideSubshapes", "shapes");
	utility::string_t paramPassword = utils->getTestValue("deleteSlideSubshapes", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlideSubshapes", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlideSubshapes", "storage");
	paramPassword = utils->getInvalidTestValue("deleteSlideSubshapes", "password", paramPassword);
	utils->initialize("deleteSlideSubshapes", "password", paramPassword);

	bool failed = true;
	try
	{
		api->deleteSubshapes(paramName, paramSlideIndex, paramPath, paramShapes, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideSubshapes", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideSubshapes", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideSubshapes", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideSubshapes", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideSubshapes", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideSubshapesInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteSlideSubshapes", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlideSubshapes", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSlideSubshapes", "path");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("deleteSlideSubshapes", "shapes");
	utility::string_t paramPassword = utils->getTestValue("deleteSlideSubshapes", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlideSubshapes", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlideSubshapes", "storage");
	paramFolder = utils->getInvalidTestValue("deleteSlideSubshapes", "folder", paramFolder);
	utils->initialize("deleteSlideSubshapes", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->deleteSubshapes(paramName, paramSlideIndex, paramPath, paramShapes, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideSubshapes", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideSubshapes", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideSubshapes", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideSubshapes", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideSubshapes", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideSubshapesInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteSlideSubshapes", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlideSubshapes", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSlideSubshapes", "path");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("deleteSlideSubshapes", "shapes");
	utility::string_t paramPassword = utils->getTestValue("deleteSlideSubshapes", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlideSubshapes", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlideSubshapes", "storage");
	paramStorage = utils->getInvalidTestValue("deleteSlideSubshapes", "storage", paramStorage);
	utils->initialize("deleteSlideSubshapes", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->deleteSubshapes(paramName, paramSlideIndex, paramPath, paramShapes, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideSubshapes", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideSubshapes", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideSubshapes", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideSubshapes", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideSubshapes", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlidesCleanSlidesList) {
	utility::string_t paramName = utils->getTestValue("deleteSlidesCleanSlidesList", "name");
	std::vector<int32_t> paramSlides = utils->getIntVectorTestValue("deleteSlidesCleanSlidesList", "slides");
	utility::string_t paramPassword = utils->getTestValue("deleteSlidesCleanSlidesList", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlidesCleanSlidesList", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlidesCleanSlidesList", "storage");
	utils->initialize("deleteSlidesCleanSlidesList", "");
	std::shared_ptr<Slides> result = api->deleteSlides(paramName, paramSlides, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteSlidesCleanSlidesListInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteSlidesCleanSlidesList", "name");
	std::vector<int32_t> paramSlides = utils->getIntVectorTestValue("deleteSlidesCleanSlidesList", "slides");
	utility::string_t paramPassword = utils->getTestValue("deleteSlidesCleanSlidesList", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlidesCleanSlidesList", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlidesCleanSlidesList", "storage");
	paramName = utils->getInvalidTestValue("deleteSlidesCleanSlidesList", "name", paramName);
	utils->initialize("deleteSlidesCleanSlidesList", "name", paramName);

	bool failed = true;
	try
	{
		api->deleteSlides(paramName, paramSlides, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlidesCleanSlidesList", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlidesCleanSlidesList", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlidesCleanSlidesList", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlidesCleanSlidesList", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlidesCleanSlidesList", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlidesCleanSlidesListInvalidSlides) {
	utility::string_t paramName = utils->getTestValue("deleteSlidesCleanSlidesList", "name");
	std::vector<int32_t> paramSlides = utils->getIntVectorTestValue("deleteSlidesCleanSlidesList", "slides");
	utility::string_t paramPassword = utils->getTestValue("deleteSlidesCleanSlidesList", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlidesCleanSlidesList", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlidesCleanSlidesList", "storage");
	paramSlides = utils->getInvalidIntVectorTestValue("deleteSlidesCleanSlidesList", "slides", paramSlides);
	utils->initialize("deleteSlidesCleanSlidesList", "slides", paramSlides);

	bool failed = true;
	try
	{
		api->deleteSlides(paramName, paramSlides, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlidesCleanSlidesList", "slides");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlidesCleanSlidesList", "slides", paramSlides);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlidesCleanSlidesList", "slides");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlidesCleanSlidesList", "slides", paramSlides);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlidesCleanSlidesList", "slides"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlidesCleanSlidesListInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteSlidesCleanSlidesList", "name");
	std::vector<int32_t> paramSlides = utils->getIntVectorTestValue("deleteSlidesCleanSlidesList", "slides");
	utility::string_t paramPassword = utils->getTestValue("deleteSlidesCleanSlidesList", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlidesCleanSlidesList", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlidesCleanSlidesList", "storage");
	paramPassword = utils->getInvalidTestValue("deleteSlidesCleanSlidesList", "password", paramPassword);
	utils->initialize("deleteSlidesCleanSlidesList", "password", paramPassword);

	bool failed = true;
	try
	{
		api->deleteSlides(paramName, paramSlides, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlidesCleanSlidesList", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlidesCleanSlidesList", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlidesCleanSlidesList", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlidesCleanSlidesList", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlidesCleanSlidesList", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlidesCleanSlidesListInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteSlidesCleanSlidesList", "name");
	std::vector<int32_t> paramSlides = utils->getIntVectorTestValue("deleteSlidesCleanSlidesList", "slides");
	utility::string_t paramPassword = utils->getTestValue("deleteSlidesCleanSlidesList", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlidesCleanSlidesList", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlidesCleanSlidesList", "storage");
	paramFolder = utils->getInvalidTestValue("deleteSlidesCleanSlidesList", "folder", paramFolder);
	utils->initialize("deleteSlidesCleanSlidesList", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->deleteSlides(paramName, paramSlides, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlidesCleanSlidesList", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlidesCleanSlidesList", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlidesCleanSlidesList", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlidesCleanSlidesList", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlidesCleanSlidesList", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlidesCleanSlidesListInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteSlidesCleanSlidesList", "name");
	std::vector<int32_t> paramSlides = utils->getIntVectorTestValue("deleteSlidesCleanSlidesList", "slides");
	utility::string_t paramPassword = utils->getTestValue("deleteSlidesCleanSlidesList", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlidesCleanSlidesList", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlidesCleanSlidesList", "storage");
	paramStorage = utils->getInvalidTestValue("deleteSlidesCleanSlidesList", "storage", paramStorage);
	utils->initialize("deleteSlidesCleanSlidesList", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->deleteSlides(paramName, paramSlides, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlidesCleanSlidesList", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlidesCleanSlidesList", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlidesCleanSlidesList", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlidesCleanSlidesList", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlidesCleanSlidesList", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlidesDocumentProperties) {
	utility::string_t paramName = utils->getTestValue("deleteSlidesDocumentProperties", "name");
	utility::string_t paramPassword = utils->getTestValue("deleteSlidesDocumentProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlidesDocumentProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlidesDocumentProperties", "storage");
	utils->initialize("deleteSlidesDocumentProperties", "");
	std::shared_ptr<DocumentProperties> result = api->deleteDocumentProperties(paramName, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteSlidesDocumentPropertiesInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteSlidesDocumentProperties", "name");
	utility::string_t paramPassword = utils->getTestValue("deleteSlidesDocumentProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlidesDocumentProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlidesDocumentProperties", "storage");
	paramName = utils->getInvalidTestValue("deleteSlidesDocumentProperties", "name", paramName);
	utils->initialize("deleteSlidesDocumentProperties", "name", paramName);

	bool failed = true;
	try
	{
		api->deleteDocumentProperties(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlidesDocumentProperties", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlidesDocumentProperties", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlidesDocumentProperties", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlidesDocumentProperties", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlidesDocumentProperties", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlidesDocumentPropertiesInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteSlidesDocumentProperties", "name");
	utility::string_t paramPassword = utils->getTestValue("deleteSlidesDocumentProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlidesDocumentProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlidesDocumentProperties", "storage");
	paramPassword = utils->getInvalidTestValue("deleteSlidesDocumentProperties", "password", paramPassword);
	utils->initialize("deleteSlidesDocumentProperties", "password", paramPassword);

	bool failed = true;
	try
	{
		api->deleteDocumentProperties(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlidesDocumentProperties", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlidesDocumentProperties", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlidesDocumentProperties", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlidesDocumentProperties", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlidesDocumentProperties", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlidesDocumentPropertiesInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteSlidesDocumentProperties", "name");
	utility::string_t paramPassword = utils->getTestValue("deleteSlidesDocumentProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlidesDocumentProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlidesDocumentProperties", "storage");
	paramFolder = utils->getInvalidTestValue("deleteSlidesDocumentProperties", "folder", paramFolder);
	utils->initialize("deleteSlidesDocumentProperties", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->deleteDocumentProperties(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlidesDocumentProperties", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlidesDocumentProperties", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlidesDocumentProperties", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlidesDocumentProperties", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlidesDocumentProperties", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlidesDocumentPropertiesInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteSlidesDocumentProperties", "name");
	utility::string_t paramPassword = utils->getTestValue("deleteSlidesDocumentProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlidesDocumentProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlidesDocumentProperties", "storage");
	paramStorage = utils->getInvalidTestValue("deleteSlidesDocumentProperties", "storage", paramStorage);
	utils->initialize("deleteSlidesDocumentProperties", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->deleteDocumentProperties(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlidesDocumentProperties", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlidesDocumentProperties", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlidesDocumentProperties", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlidesDocumentProperties", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlidesDocumentProperties", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlidesDocumentProperty) {
	utility::string_t paramName = utils->getTestValue("deleteSlidesDocumentProperty", "name");
	utility::string_t paramPropertyName = utils->getTestValue("deleteSlidesDocumentProperty", "propertyName");
	utility::string_t paramPassword = utils->getTestValue("deleteSlidesDocumentProperty", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlidesDocumentProperty", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlidesDocumentProperty", "storage");
	utils->initialize("deleteSlidesDocumentProperty", "");
	std::shared_ptr<DocumentProperties> result = api->deleteDocumentProperty(paramName, paramPropertyName, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteSlidesDocumentPropertyInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteSlidesDocumentProperty", "name");
	utility::string_t paramPropertyName = utils->getTestValue("deleteSlidesDocumentProperty", "propertyName");
	utility::string_t paramPassword = utils->getTestValue("deleteSlidesDocumentProperty", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlidesDocumentProperty", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlidesDocumentProperty", "storage");
	paramName = utils->getInvalidTestValue("deleteSlidesDocumentProperty", "name", paramName);
	utils->initialize("deleteSlidesDocumentProperty", "name", paramName);

	bool failed = true;
	try
	{
		api->deleteDocumentProperty(paramName, paramPropertyName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlidesDocumentProperty", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlidesDocumentProperty", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlidesDocumentProperty", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlidesDocumentProperty", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlidesDocumentProperty", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlidesDocumentPropertyInvalidPropertyName) {
	utility::string_t paramName = utils->getTestValue("deleteSlidesDocumentProperty", "name");
	utility::string_t paramPropertyName = utils->getTestValue("deleteSlidesDocumentProperty", "propertyName");
	utility::string_t paramPassword = utils->getTestValue("deleteSlidesDocumentProperty", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlidesDocumentProperty", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlidesDocumentProperty", "storage");
	paramPropertyName = utils->getInvalidTestValue("deleteSlidesDocumentProperty", "propertyName", paramPropertyName);
	utils->initialize("deleteSlidesDocumentProperty", "propertyName", paramPropertyName);

	bool failed = true;
	try
	{
		api->deleteDocumentProperty(paramName, paramPropertyName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlidesDocumentProperty", "propertyName");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlidesDocumentProperty", "propertyName", paramPropertyName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlidesDocumentProperty", "propertyName");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlidesDocumentProperty", "propertyName", paramPropertyName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlidesDocumentProperty", "propertyName"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlidesDocumentPropertyInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteSlidesDocumentProperty", "name");
	utility::string_t paramPropertyName = utils->getTestValue("deleteSlidesDocumentProperty", "propertyName");
	utility::string_t paramPassword = utils->getTestValue("deleteSlidesDocumentProperty", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlidesDocumentProperty", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlidesDocumentProperty", "storage");
	paramPassword = utils->getInvalidTestValue("deleteSlidesDocumentProperty", "password", paramPassword);
	utils->initialize("deleteSlidesDocumentProperty", "password", paramPassword);

	bool failed = true;
	try
	{
		api->deleteDocumentProperty(paramName, paramPropertyName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlidesDocumentProperty", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlidesDocumentProperty", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlidesDocumentProperty", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlidesDocumentProperty", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlidesDocumentProperty", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlidesDocumentPropertyInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteSlidesDocumentProperty", "name");
	utility::string_t paramPropertyName = utils->getTestValue("deleteSlidesDocumentProperty", "propertyName");
	utility::string_t paramPassword = utils->getTestValue("deleteSlidesDocumentProperty", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlidesDocumentProperty", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlidesDocumentProperty", "storage");
	paramFolder = utils->getInvalidTestValue("deleteSlidesDocumentProperty", "folder", paramFolder);
	utils->initialize("deleteSlidesDocumentProperty", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->deleteDocumentProperty(paramName, paramPropertyName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlidesDocumentProperty", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlidesDocumentProperty", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlidesDocumentProperty", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlidesDocumentProperty", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlidesDocumentProperty", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlidesDocumentPropertyInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteSlidesDocumentProperty", "name");
	utility::string_t paramPropertyName = utils->getTestValue("deleteSlidesDocumentProperty", "propertyName");
	utility::string_t paramPassword = utils->getTestValue("deleteSlidesDocumentProperty", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlidesDocumentProperty", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlidesDocumentProperty", "storage");
	paramStorage = utils->getInvalidTestValue("deleteSlidesDocumentProperty", "storage", paramStorage);
	utils->initialize("deleteSlidesDocumentProperty", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->deleteDocumentProperty(paramName, paramPropertyName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlidesDocumentProperty", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlidesDocumentProperty", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlidesDocumentProperty", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlidesDocumentProperty", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlidesDocumentProperty", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlidesSlideBackground) {
	utility::string_t paramName = utils->getTestValue("deleteSlidesSlideBackground", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlidesSlideBackground", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSlidesSlideBackground", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlidesSlideBackground", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlidesSlideBackground", "storage");
	utils->initialize("deleteSlidesSlideBackground", "");
	std::shared_ptr<SlideBackground> result = api->deleteBackground(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteSlidesSlideBackgroundInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteSlidesSlideBackground", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlidesSlideBackground", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSlidesSlideBackground", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlidesSlideBackground", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlidesSlideBackground", "storage");
	paramName = utils->getInvalidTestValue("deleteSlidesSlideBackground", "name", paramName);
	utils->initialize("deleteSlidesSlideBackground", "name", paramName);

	bool failed = true;
	try
	{
		api->deleteBackground(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlidesSlideBackground", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlidesSlideBackground", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlidesSlideBackground", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlidesSlideBackground", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlidesSlideBackground", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlidesSlideBackgroundInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("deleteSlidesSlideBackground", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlidesSlideBackground", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSlidesSlideBackground", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlidesSlideBackground", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlidesSlideBackground", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("deleteSlidesSlideBackground", "slideIndex", paramSlideIndex).value();
	utils->initialize("deleteSlidesSlideBackground", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->deleteBackground(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlidesSlideBackground", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlidesSlideBackground", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlidesSlideBackground", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlidesSlideBackground", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlidesSlideBackground", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlidesSlideBackgroundInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteSlidesSlideBackground", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlidesSlideBackground", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSlidesSlideBackground", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlidesSlideBackground", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlidesSlideBackground", "storage");
	paramPassword = utils->getInvalidTestValue("deleteSlidesSlideBackground", "password", paramPassword);
	utils->initialize("deleteSlidesSlideBackground", "password", paramPassword);

	bool failed = true;
	try
	{
		api->deleteBackground(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlidesSlideBackground", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlidesSlideBackground", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlidesSlideBackground", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlidesSlideBackground", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlidesSlideBackground", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlidesSlideBackgroundInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteSlidesSlideBackground", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlidesSlideBackground", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSlidesSlideBackground", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlidesSlideBackground", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlidesSlideBackground", "storage");
	paramFolder = utils->getInvalidTestValue("deleteSlidesSlideBackground", "folder", paramFolder);
	utils->initialize("deleteSlidesSlideBackground", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->deleteBackground(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlidesSlideBackground", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlidesSlideBackground", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlidesSlideBackground", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlidesSlideBackground", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlidesSlideBackground", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlidesSlideBackgroundInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteSlidesSlideBackground", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlidesSlideBackground", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSlidesSlideBackground", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlidesSlideBackground", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlidesSlideBackground", "storage");
	paramStorage = utils->getInvalidTestValue("deleteSlidesSlideBackground", "storage", paramStorage);
	utils->initialize("deleteSlidesSlideBackground", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->deleteBackground(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlidesSlideBackground", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlidesSlideBackground", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlidesSlideBackground", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlidesSlideBackground", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlidesSlideBackground", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapeParagraph) {
	utility::string_t paramName = utils->getTestValue("deleteSubshapeParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSubshapeParagraph", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSubshapeParagraph", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSubshapeParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteSubshapeParagraph", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSubshapeParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSubshapeParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSubshapeParagraph", "storage");
	utils->initialize("deleteSubshapeParagraph", "");
	std::shared_ptr<Paragraphs> result = api->deleteSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteSubshapeParagraphInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteSubshapeParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSubshapeParagraph", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSubshapeParagraph", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSubshapeParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteSubshapeParagraph", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSubshapeParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSubshapeParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSubshapeParagraph", "storage");
	paramName = utils->getInvalidTestValue("deleteSubshapeParagraph", "name", paramName);
	utils->initialize("deleteSubshapeParagraph", "name", paramName);

	bool failed = true;
	try
	{
		api->deleteSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapeParagraph", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapeParagraph", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapeParagraph", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapeParagraph", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapeParagraph", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapeParagraphInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("deleteSubshapeParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSubshapeParagraph", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSubshapeParagraph", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSubshapeParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteSubshapeParagraph", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSubshapeParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSubshapeParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSubshapeParagraph", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("deleteSubshapeParagraph", "slideIndex", paramSlideIndex).value();
	utils->initialize("deleteSubshapeParagraph", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->deleteSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapeParagraph", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapeParagraph", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapeParagraph", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapeParagraph", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapeParagraph", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapeParagraphInvalidPath) {
	utility::string_t paramName = utils->getTestValue("deleteSubshapeParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSubshapeParagraph", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSubshapeParagraph", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSubshapeParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteSubshapeParagraph", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSubshapeParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSubshapeParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSubshapeParagraph", "storage");
	paramPath = utils->getInvalidTestValue("deleteSubshapeParagraph", "path", paramPath);
	utils->initialize("deleteSubshapeParagraph", "path", paramPath);

	bool failed = true;
	try
	{
		api->deleteSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapeParagraph", "path");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapeParagraph", "path", paramPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapeParagraph", "path");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapeParagraph", "path", paramPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapeParagraph", "path"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapeParagraphInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("deleteSubshapeParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSubshapeParagraph", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSubshapeParagraph", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSubshapeParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteSubshapeParagraph", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSubshapeParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSubshapeParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSubshapeParagraph", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("deleteSubshapeParagraph", "shapeIndex", paramShapeIndex).value();
	utils->initialize("deleteSubshapeParagraph", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->deleteSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapeParagraph", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapeParagraph", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapeParagraph", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapeParagraph", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapeParagraph", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapeParagraphInvalidParagraphIndex) {
	utility::string_t paramName = utils->getTestValue("deleteSubshapeParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSubshapeParagraph", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSubshapeParagraph", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSubshapeParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteSubshapeParagraph", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSubshapeParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSubshapeParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSubshapeParagraph", "storage");
	paramParagraphIndex = utils->getInvalidIntTestValue("deleteSubshapeParagraph", "paragraphIndex", paramParagraphIndex).value();
	utils->initialize("deleteSubshapeParagraph", "paragraphIndex", paramParagraphIndex);

	bool failed = true;
	try
	{
		api->deleteSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapeParagraph", "paragraphIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapeParagraph", "paragraphIndex", paramParagraphIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapeParagraph", "paragraphIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapeParagraph", "paragraphIndex", paramParagraphIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapeParagraph", "paragraphIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapeParagraphInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteSubshapeParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSubshapeParagraph", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSubshapeParagraph", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSubshapeParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteSubshapeParagraph", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSubshapeParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSubshapeParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSubshapeParagraph", "storage");
	paramPassword = utils->getInvalidTestValue("deleteSubshapeParagraph", "password", paramPassword);
	utils->initialize("deleteSubshapeParagraph", "password", paramPassword);

	bool failed = true;
	try
	{
		api->deleteSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapeParagraph", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapeParagraph", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapeParagraph", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapeParagraph", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapeParagraph", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapeParagraphInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteSubshapeParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSubshapeParagraph", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSubshapeParagraph", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSubshapeParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteSubshapeParagraph", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSubshapeParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSubshapeParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSubshapeParagraph", "storage");
	paramFolder = utils->getInvalidTestValue("deleteSubshapeParagraph", "folder", paramFolder);
	utils->initialize("deleteSubshapeParagraph", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->deleteSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapeParagraph", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapeParagraph", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapeParagraph", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapeParagraph", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapeParagraph", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapeParagraphInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteSubshapeParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSubshapeParagraph", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSubshapeParagraph", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSubshapeParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteSubshapeParagraph", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSubshapeParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSubshapeParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSubshapeParagraph", "storage");
	paramStorage = utils->getInvalidTestValue("deleteSubshapeParagraph", "storage", paramStorage);
	utils->initialize("deleteSubshapeParagraph", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->deleteSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapeParagraph", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapeParagraph", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapeParagraph", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapeParagraph", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapeParagraph", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapeParagraphs) {
	utility::string_t paramName = utils->getTestValue("deleteSubshapeParagraphs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSubshapeParagraphs", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSubshapeParagraphs", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSubshapeParagraphs", "shapeIndex");
	std::vector<int32_t> paramParagraphs = utils->getIntVectorTestValue("deleteSubshapeParagraphs", "paragraphs");
	utility::string_t paramPassword = utils->getTestValue("deleteSubshapeParagraphs", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSubshapeParagraphs", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSubshapeParagraphs", "storage");
	utils->initialize("deleteSubshapeParagraphs", "");
	std::shared_ptr<Paragraphs> result = api->deleteSubshapeParagraphs(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteSubshapeParagraphsInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteSubshapeParagraphs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSubshapeParagraphs", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSubshapeParagraphs", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSubshapeParagraphs", "shapeIndex");
	std::vector<int32_t> paramParagraphs = utils->getIntVectorTestValue("deleteSubshapeParagraphs", "paragraphs");
	utility::string_t paramPassword = utils->getTestValue("deleteSubshapeParagraphs", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSubshapeParagraphs", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSubshapeParagraphs", "storage");
	paramName = utils->getInvalidTestValue("deleteSubshapeParagraphs", "name", paramName);
	utils->initialize("deleteSubshapeParagraphs", "name", paramName);

	bool failed = true;
	try
	{
		api->deleteSubshapeParagraphs(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapeParagraphs", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapeParagraphs", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapeParagraphs", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapeParagraphs", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapeParagraphs", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapeParagraphsInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("deleteSubshapeParagraphs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSubshapeParagraphs", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSubshapeParagraphs", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSubshapeParagraphs", "shapeIndex");
	std::vector<int32_t> paramParagraphs = utils->getIntVectorTestValue("deleteSubshapeParagraphs", "paragraphs");
	utility::string_t paramPassword = utils->getTestValue("deleteSubshapeParagraphs", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSubshapeParagraphs", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSubshapeParagraphs", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("deleteSubshapeParagraphs", "slideIndex", paramSlideIndex).value();
	utils->initialize("deleteSubshapeParagraphs", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->deleteSubshapeParagraphs(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapeParagraphs", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapeParagraphs", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapeParagraphs", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapeParagraphs", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapeParagraphs", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapeParagraphsInvalidPath) {
	utility::string_t paramName = utils->getTestValue("deleteSubshapeParagraphs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSubshapeParagraphs", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSubshapeParagraphs", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSubshapeParagraphs", "shapeIndex");
	std::vector<int32_t> paramParagraphs = utils->getIntVectorTestValue("deleteSubshapeParagraphs", "paragraphs");
	utility::string_t paramPassword = utils->getTestValue("deleteSubshapeParagraphs", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSubshapeParagraphs", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSubshapeParagraphs", "storage");
	paramPath = utils->getInvalidTestValue("deleteSubshapeParagraphs", "path", paramPath);
	utils->initialize("deleteSubshapeParagraphs", "path", paramPath);

	bool failed = true;
	try
	{
		api->deleteSubshapeParagraphs(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapeParagraphs", "path");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapeParagraphs", "path", paramPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapeParagraphs", "path");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapeParagraphs", "path", paramPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapeParagraphs", "path"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapeParagraphsInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("deleteSubshapeParagraphs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSubshapeParagraphs", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSubshapeParagraphs", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSubshapeParagraphs", "shapeIndex");
	std::vector<int32_t> paramParagraphs = utils->getIntVectorTestValue("deleteSubshapeParagraphs", "paragraphs");
	utility::string_t paramPassword = utils->getTestValue("deleteSubshapeParagraphs", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSubshapeParagraphs", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSubshapeParagraphs", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("deleteSubshapeParagraphs", "shapeIndex", paramShapeIndex).value();
	utils->initialize("deleteSubshapeParagraphs", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->deleteSubshapeParagraphs(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapeParagraphs", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapeParagraphs", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapeParagraphs", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapeParagraphs", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapeParagraphs", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapeParagraphsInvalidParagraphs) {
	utility::string_t paramName = utils->getTestValue("deleteSubshapeParagraphs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSubshapeParagraphs", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSubshapeParagraphs", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSubshapeParagraphs", "shapeIndex");
	std::vector<int32_t> paramParagraphs = utils->getIntVectorTestValue("deleteSubshapeParagraphs", "paragraphs");
	utility::string_t paramPassword = utils->getTestValue("deleteSubshapeParagraphs", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSubshapeParagraphs", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSubshapeParagraphs", "storage");
	paramParagraphs = utils->getInvalidIntVectorTestValue("deleteSubshapeParagraphs", "paragraphs", paramParagraphs);
	utils->initialize("deleteSubshapeParagraphs", "paragraphs", paramParagraphs);

	bool failed = true;
	try
	{
		api->deleteSubshapeParagraphs(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapeParagraphs", "paragraphs");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapeParagraphs", "paragraphs", paramParagraphs);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapeParagraphs", "paragraphs");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapeParagraphs", "paragraphs", paramParagraphs);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapeParagraphs", "paragraphs"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapeParagraphsInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteSubshapeParagraphs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSubshapeParagraphs", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSubshapeParagraphs", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSubshapeParagraphs", "shapeIndex");
	std::vector<int32_t> paramParagraphs = utils->getIntVectorTestValue("deleteSubshapeParagraphs", "paragraphs");
	utility::string_t paramPassword = utils->getTestValue("deleteSubshapeParagraphs", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSubshapeParagraphs", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSubshapeParagraphs", "storage");
	paramPassword = utils->getInvalidTestValue("deleteSubshapeParagraphs", "password", paramPassword);
	utils->initialize("deleteSubshapeParagraphs", "password", paramPassword);

	bool failed = true;
	try
	{
		api->deleteSubshapeParagraphs(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapeParagraphs", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapeParagraphs", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapeParagraphs", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapeParagraphs", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapeParagraphs", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapeParagraphsInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteSubshapeParagraphs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSubshapeParagraphs", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSubshapeParagraphs", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSubshapeParagraphs", "shapeIndex");
	std::vector<int32_t> paramParagraphs = utils->getIntVectorTestValue("deleteSubshapeParagraphs", "paragraphs");
	utility::string_t paramPassword = utils->getTestValue("deleteSubshapeParagraphs", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSubshapeParagraphs", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSubshapeParagraphs", "storage");
	paramFolder = utils->getInvalidTestValue("deleteSubshapeParagraphs", "folder", paramFolder);
	utils->initialize("deleteSubshapeParagraphs", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->deleteSubshapeParagraphs(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapeParagraphs", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapeParagraphs", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapeParagraphs", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapeParagraphs", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapeParagraphs", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapeParagraphsInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteSubshapeParagraphs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSubshapeParagraphs", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSubshapeParagraphs", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSubshapeParagraphs", "shapeIndex");
	std::vector<int32_t> paramParagraphs = utils->getIntVectorTestValue("deleteSubshapeParagraphs", "paragraphs");
	utility::string_t paramPassword = utils->getTestValue("deleteSubshapeParagraphs", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSubshapeParagraphs", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSubshapeParagraphs", "storage");
	paramStorage = utils->getInvalidTestValue("deleteSubshapeParagraphs", "storage", paramStorage);
	utils->initialize("deleteSubshapeParagraphs", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->deleteSubshapeParagraphs(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapeParagraphs", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapeParagraphs", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapeParagraphs", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapeParagraphs", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapeParagraphs", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapePortion) {
	utility::string_t paramName = utils->getTestValue("deleteSubshapePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSubshapePortion", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSubshapePortion", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSubshapePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteSubshapePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("deleteSubshapePortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSubshapePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSubshapePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSubshapePortion", "storage");
	utils->initialize("deleteSubshapePortion", "");
	std::shared_ptr<Portions> result = api->deleteSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteSubshapePortionInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteSubshapePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSubshapePortion", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSubshapePortion", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSubshapePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteSubshapePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("deleteSubshapePortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSubshapePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSubshapePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSubshapePortion", "storage");
	paramName = utils->getInvalidTestValue("deleteSubshapePortion", "name", paramName);
	utils->initialize("deleteSubshapePortion", "name", paramName);

	bool failed = true;
	try
	{
		api->deleteSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortion", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortion", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortion", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortion", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapePortion", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapePortionInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("deleteSubshapePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSubshapePortion", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSubshapePortion", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSubshapePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteSubshapePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("deleteSubshapePortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSubshapePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSubshapePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSubshapePortion", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("deleteSubshapePortion", "slideIndex", paramSlideIndex).value();
	utils->initialize("deleteSubshapePortion", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->deleteSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortion", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortion", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortion", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortion", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapePortion", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapePortionInvalidPath) {
	utility::string_t paramName = utils->getTestValue("deleteSubshapePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSubshapePortion", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSubshapePortion", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSubshapePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteSubshapePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("deleteSubshapePortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSubshapePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSubshapePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSubshapePortion", "storage");
	paramPath = utils->getInvalidTestValue("deleteSubshapePortion", "path", paramPath);
	utils->initialize("deleteSubshapePortion", "path", paramPath);

	bool failed = true;
	try
	{
		api->deleteSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortion", "path");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortion", "path", paramPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortion", "path");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortion", "path", paramPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapePortion", "path"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapePortionInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("deleteSubshapePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSubshapePortion", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSubshapePortion", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSubshapePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteSubshapePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("deleteSubshapePortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSubshapePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSubshapePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSubshapePortion", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("deleteSubshapePortion", "shapeIndex", paramShapeIndex).value();
	utils->initialize("deleteSubshapePortion", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->deleteSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortion", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortion", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortion", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortion", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapePortion", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapePortionInvalidParagraphIndex) {
	utility::string_t paramName = utils->getTestValue("deleteSubshapePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSubshapePortion", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSubshapePortion", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSubshapePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteSubshapePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("deleteSubshapePortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSubshapePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSubshapePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSubshapePortion", "storage");
	paramParagraphIndex = utils->getInvalidIntTestValue("deleteSubshapePortion", "paragraphIndex", paramParagraphIndex).value();
	utils->initialize("deleteSubshapePortion", "paragraphIndex", paramParagraphIndex);

	bool failed = true;
	try
	{
		api->deleteSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortion", "paragraphIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortion", "paragraphIndex", paramParagraphIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortion", "paragraphIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortion", "paragraphIndex", paramParagraphIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapePortion", "paragraphIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapePortionInvalidPortionIndex) {
	utility::string_t paramName = utils->getTestValue("deleteSubshapePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSubshapePortion", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSubshapePortion", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSubshapePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteSubshapePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("deleteSubshapePortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSubshapePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSubshapePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSubshapePortion", "storage");
	paramPortionIndex = utils->getInvalidIntTestValue("deleteSubshapePortion", "portionIndex", paramPortionIndex).value();
	utils->initialize("deleteSubshapePortion", "portionIndex", paramPortionIndex);

	bool failed = true;
	try
	{
		api->deleteSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortion", "portionIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortion", "portionIndex", paramPortionIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortion", "portionIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortion", "portionIndex", paramPortionIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapePortion", "portionIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapePortionInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteSubshapePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSubshapePortion", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSubshapePortion", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSubshapePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteSubshapePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("deleteSubshapePortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSubshapePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSubshapePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSubshapePortion", "storage");
	paramPassword = utils->getInvalidTestValue("deleteSubshapePortion", "password", paramPassword);
	utils->initialize("deleteSubshapePortion", "password", paramPassword);

	bool failed = true;
	try
	{
		api->deleteSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortion", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortion", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortion", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortion", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapePortion", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapePortionInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteSubshapePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSubshapePortion", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSubshapePortion", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSubshapePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteSubshapePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("deleteSubshapePortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSubshapePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSubshapePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSubshapePortion", "storage");
	paramFolder = utils->getInvalidTestValue("deleteSubshapePortion", "folder", paramFolder);
	utils->initialize("deleteSubshapePortion", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->deleteSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortion", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortion", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortion", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortion", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapePortion", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapePortionInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteSubshapePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSubshapePortion", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSubshapePortion", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSubshapePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteSubshapePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("deleteSubshapePortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSubshapePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSubshapePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSubshapePortion", "storage");
	paramStorage = utils->getInvalidTestValue("deleteSubshapePortion", "storage", paramStorage);
	utils->initialize("deleteSubshapePortion", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->deleteSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortion", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortion", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortion", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortion", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapePortion", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapePortions) {
	utility::string_t paramName = utils->getTestValue("deleteSubshapePortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSubshapePortions", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSubshapePortions", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSubshapePortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteSubshapePortions", "paragraphIndex");
	std::vector<int32_t> paramPortions = utils->getIntVectorTestValue("deleteSubshapePortions", "portions");
	utility::string_t paramPassword = utils->getTestValue("deleteSubshapePortions", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSubshapePortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSubshapePortions", "storage");
	utils->initialize("deleteSubshapePortions", "");
	std::shared_ptr<Portions> result = api->deleteSubshapePortions(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteSubshapePortionsInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteSubshapePortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSubshapePortions", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSubshapePortions", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSubshapePortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteSubshapePortions", "paragraphIndex");
	std::vector<int32_t> paramPortions = utils->getIntVectorTestValue("deleteSubshapePortions", "portions");
	utility::string_t paramPassword = utils->getTestValue("deleteSubshapePortions", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSubshapePortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSubshapePortions", "storage");
	paramName = utils->getInvalidTestValue("deleteSubshapePortions", "name", paramName);
	utils->initialize("deleteSubshapePortions", "name", paramName);

	bool failed = true;
	try
	{
		api->deleteSubshapePortions(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortions", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortions", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortions", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortions", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapePortions", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapePortionsInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("deleteSubshapePortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSubshapePortions", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSubshapePortions", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSubshapePortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteSubshapePortions", "paragraphIndex");
	std::vector<int32_t> paramPortions = utils->getIntVectorTestValue("deleteSubshapePortions", "portions");
	utility::string_t paramPassword = utils->getTestValue("deleteSubshapePortions", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSubshapePortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSubshapePortions", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("deleteSubshapePortions", "slideIndex", paramSlideIndex).value();
	utils->initialize("deleteSubshapePortions", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->deleteSubshapePortions(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortions", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortions", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortions", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortions", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapePortions", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapePortionsInvalidPath) {
	utility::string_t paramName = utils->getTestValue("deleteSubshapePortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSubshapePortions", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSubshapePortions", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSubshapePortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteSubshapePortions", "paragraphIndex");
	std::vector<int32_t> paramPortions = utils->getIntVectorTestValue("deleteSubshapePortions", "portions");
	utility::string_t paramPassword = utils->getTestValue("deleteSubshapePortions", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSubshapePortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSubshapePortions", "storage");
	paramPath = utils->getInvalidTestValue("deleteSubshapePortions", "path", paramPath);
	utils->initialize("deleteSubshapePortions", "path", paramPath);

	bool failed = true;
	try
	{
		api->deleteSubshapePortions(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortions", "path");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortions", "path", paramPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortions", "path");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortions", "path", paramPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapePortions", "path"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapePortionsInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("deleteSubshapePortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSubshapePortions", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSubshapePortions", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSubshapePortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteSubshapePortions", "paragraphIndex");
	std::vector<int32_t> paramPortions = utils->getIntVectorTestValue("deleteSubshapePortions", "portions");
	utility::string_t paramPassword = utils->getTestValue("deleteSubshapePortions", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSubshapePortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSubshapePortions", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("deleteSubshapePortions", "shapeIndex", paramShapeIndex).value();
	utils->initialize("deleteSubshapePortions", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->deleteSubshapePortions(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortions", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortions", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortions", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortions", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapePortions", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapePortionsInvalidParagraphIndex) {
	utility::string_t paramName = utils->getTestValue("deleteSubshapePortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSubshapePortions", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSubshapePortions", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSubshapePortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteSubshapePortions", "paragraphIndex");
	std::vector<int32_t> paramPortions = utils->getIntVectorTestValue("deleteSubshapePortions", "portions");
	utility::string_t paramPassword = utils->getTestValue("deleteSubshapePortions", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSubshapePortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSubshapePortions", "storage");
	paramParagraphIndex = utils->getInvalidIntTestValue("deleteSubshapePortions", "paragraphIndex", paramParagraphIndex).value();
	utils->initialize("deleteSubshapePortions", "paragraphIndex", paramParagraphIndex);

	bool failed = true;
	try
	{
		api->deleteSubshapePortions(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortions", "paragraphIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortions", "paragraphIndex", paramParagraphIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortions", "paragraphIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortions", "paragraphIndex", paramParagraphIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapePortions", "paragraphIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapePortionsInvalidPortions) {
	utility::string_t paramName = utils->getTestValue("deleteSubshapePortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSubshapePortions", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSubshapePortions", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSubshapePortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteSubshapePortions", "paragraphIndex");
	std::vector<int32_t> paramPortions = utils->getIntVectorTestValue("deleteSubshapePortions", "portions");
	utility::string_t paramPassword = utils->getTestValue("deleteSubshapePortions", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSubshapePortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSubshapePortions", "storage");
	paramPortions = utils->getInvalidIntVectorTestValue("deleteSubshapePortions", "portions", paramPortions);
	utils->initialize("deleteSubshapePortions", "portions", paramPortions);

	bool failed = true;
	try
	{
		api->deleteSubshapePortions(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortions", "portions");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortions", "portions", paramPortions);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortions", "portions");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortions", "portions", paramPortions);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapePortions", "portions"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapePortionsInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteSubshapePortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSubshapePortions", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSubshapePortions", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSubshapePortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteSubshapePortions", "paragraphIndex");
	std::vector<int32_t> paramPortions = utils->getIntVectorTestValue("deleteSubshapePortions", "portions");
	utility::string_t paramPassword = utils->getTestValue("deleteSubshapePortions", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSubshapePortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSubshapePortions", "storage");
	paramPassword = utils->getInvalidTestValue("deleteSubshapePortions", "password", paramPassword);
	utils->initialize("deleteSubshapePortions", "password", paramPassword);

	bool failed = true;
	try
	{
		api->deleteSubshapePortions(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortions", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortions", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortions", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortions", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapePortions", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapePortionsInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteSubshapePortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSubshapePortions", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSubshapePortions", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSubshapePortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteSubshapePortions", "paragraphIndex");
	std::vector<int32_t> paramPortions = utils->getIntVectorTestValue("deleteSubshapePortions", "portions");
	utility::string_t paramPassword = utils->getTestValue("deleteSubshapePortions", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSubshapePortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSubshapePortions", "storage");
	paramFolder = utils->getInvalidTestValue("deleteSubshapePortions", "folder", paramFolder);
	utils->initialize("deleteSubshapePortions", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->deleteSubshapePortions(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortions", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortions", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortions", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortions", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapePortions", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapePortionsInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteSubshapePortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSubshapePortions", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSubshapePortions", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSubshapePortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteSubshapePortions", "paragraphIndex");
	std::vector<int32_t> paramPortions = utils->getIntVectorTestValue("deleteSubshapePortions", "portions");
	utility::string_t paramPassword = utils->getTestValue("deleteSubshapePortions", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSubshapePortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSubshapePortions", "storage");
	paramStorage = utils->getInvalidTestValue("deleteSubshapePortions", "storage", paramStorage);
	utils->initialize("deleteSubshapePortions", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->deleteSubshapePortions(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortions", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortions", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortions", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortions", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapePortions", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadFile) {
	utility::string_t paramPath = utils->getTestValue("downloadFile", "path");
	utility::string_t paramStorageName = utils->getTestValue("downloadFile", "storageName");
	utility::string_t paramVersionId = utils->getTestValue("downloadFile", "versionId");
	utils->initialize("downloadFile", "");
	HttpContent result = api->downloadFile(paramPath, paramStorageName, paramVersionId).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, downloadFileInvalidPath) {
	utility::string_t paramPath = utils->getTestValue("downloadFile", "path");
	utility::string_t paramStorageName = utils->getTestValue("downloadFile", "storageName");
	utility::string_t paramVersionId = utils->getTestValue("downloadFile", "versionId");
	paramPath = utils->getInvalidTestValue("downloadFile", "path", paramPath);
	utils->initialize("downloadFile", "path", paramPath);

	bool failed = true;
	try
	{
		api->downloadFile(paramPath, paramStorageName, paramVersionId).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadFile", "path");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadFile", "path", paramPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadFile", "path");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadFile", "path", paramPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadFile", "path"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadFileInvalidStorageName) {
	utility::string_t paramPath = utils->getTestValue("downloadFile", "path");
	utility::string_t paramStorageName = utils->getTestValue("downloadFile", "storageName");
	utility::string_t paramVersionId = utils->getTestValue("downloadFile", "versionId");
	paramStorageName = utils->getInvalidTestValue("downloadFile", "storageName", paramStorageName);
	utils->initialize("downloadFile", "storageName", paramStorageName);

	bool failed = true;
	try
	{
		api->downloadFile(paramPath, paramStorageName, paramVersionId).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadFile", "storageName");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadFile", "storageName", paramStorageName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadFile", "storageName");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadFile", "storageName", paramStorageName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadFile", "storageName"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadFileInvalidVersionId) {
	utility::string_t paramPath = utils->getTestValue("downloadFile", "path");
	utility::string_t paramStorageName = utils->getTestValue("downloadFile", "storageName");
	utility::string_t paramVersionId = utils->getTestValue("downloadFile", "versionId");
	paramVersionId = utils->getInvalidTestValue("downloadFile", "versionId", paramVersionId);
	utils->initialize("downloadFile", "versionId", paramVersionId);

	bool failed = true;
	try
	{
		api->downloadFile(paramPath, paramStorageName, paramVersionId).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadFile", "versionId");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadFile", "versionId", paramVersionId);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadFile", "versionId");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadFile", "versionId", paramVersionId);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadFile", "versionId"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getDiscUsage) {
	utility::string_t paramStorageName = utils->getTestValue("getDiscUsage", "storageName");
	utils->initialize("getDiscUsage", "");
	std::shared_ptr<DiscUsage> result = api->getDiscUsage(paramStorageName).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getDiscUsageInvalidStorageName) {
	utility::string_t paramStorageName = utils->getTestValue("getDiscUsage", "storageName");
	paramStorageName = utils->getInvalidTestValue("getDiscUsage", "storageName", paramStorageName);
	utils->initialize("getDiscUsage", "storageName", paramStorageName);

	bool failed = true;
	try
	{
		api->getDiscUsage(paramStorageName).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getDiscUsage", "storageName");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getDiscUsage", "storageName", paramStorageName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getDiscUsage", "storageName");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getDiscUsage", "storageName", paramStorageName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getDiscUsage", "storageName"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getFileVersions) {
	utility::string_t paramPath = utils->getTestValue("getFileVersions", "path");
	utility::string_t paramStorageName = utils->getTestValue("getFileVersions", "storageName");
	utils->initialize("getFileVersions", "");
	std::shared_ptr<FileVersions> result = api->getFileVersions(paramPath, paramStorageName).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getFileVersionsInvalidPath) {
	utility::string_t paramPath = utils->getTestValue("getFileVersions", "path");
	utility::string_t paramStorageName = utils->getTestValue("getFileVersions", "storageName");
	paramPath = utils->getInvalidTestValue("getFileVersions", "path", paramPath);
	utils->initialize("getFileVersions", "path", paramPath);

	bool failed = true;
	try
	{
		api->getFileVersions(paramPath, paramStorageName).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getFileVersions", "path");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getFileVersions", "path", paramPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getFileVersions", "path");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getFileVersions", "path", paramPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getFileVersions", "path"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getFileVersionsInvalidStorageName) {
	utility::string_t paramPath = utils->getTestValue("getFileVersions", "path");
	utility::string_t paramStorageName = utils->getTestValue("getFileVersions", "storageName");
	paramStorageName = utils->getInvalidTestValue("getFileVersions", "storageName", paramStorageName);
	utils->initialize("getFileVersions", "storageName", paramStorageName);

	bool failed = true;
	try
	{
		api->getFileVersions(paramPath, paramStorageName).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getFileVersions", "storageName");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getFileVersions", "storageName", paramStorageName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getFileVersions", "storageName");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getFileVersions", "storageName", paramStorageName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getFileVersions", "storageName"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getFilesList) {
	utility::string_t paramPath = utils->getTestValue("getFilesList", "path");
	utility::string_t paramStorageName = utils->getTestValue("getFilesList", "storageName");
	utils->initialize("getFilesList", "");
	std::shared_ptr<FilesList> result = api->getFilesList(paramPath, paramStorageName).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getFilesListInvalidPath) {
	utility::string_t paramPath = utils->getTestValue("getFilesList", "path");
	utility::string_t paramStorageName = utils->getTestValue("getFilesList", "storageName");
	paramPath = utils->getInvalidTestValue("getFilesList", "path", paramPath);
	utils->initialize("getFilesList", "path", paramPath);

	bool failed = true;
	try
	{
		api->getFilesList(paramPath, paramStorageName).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getFilesList", "path");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getFilesList", "path", paramPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getFilesList", "path");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getFilesList", "path", paramPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getFilesList", "path"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getFilesListInvalidStorageName) {
	utility::string_t paramPath = utils->getTestValue("getFilesList", "path");
	utility::string_t paramStorageName = utils->getTestValue("getFilesList", "storageName");
	paramStorageName = utils->getInvalidTestValue("getFilesList", "storageName", paramStorageName);
	utils->initialize("getFilesList", "storageName", paramStorageName);

	bool failed = true;
	try
	{
		api->getFilesList(paramPath, paramStorageName).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getFilesList", "storageName");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getFilesList", "storageName", paramStorageName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getFilesList", "storageName");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getFilesList", "storageName", paramStorageName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getFilesList", "storageName"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getLayoutSlide) {
	utility::string_t paramName = utils->getTestValue("getLayoutSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getLayoutSlide", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getLayoutSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("getLayoutSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("getLayoutSlide", "storage");
	utils->initialize("getLayoutSlide", "");
	std::shared_ptr<LayoutSlide> result = api->getLayoutSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getLayoutSlideInvalidName) {
	utility::string_t paramName = utils->getTestValue("getLayoutSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getLayoutSlide", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getLayoutSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("getLayoutSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("getLayoutSlide", "storage");
	paramName = utils->getInvalidTestValue("getLayoutSlide", "name", paramName);
	utils->initialize("getLayoutSlide", "name", paramName);

	bool failed = true;
	try
	{
		api->getLayoutSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getLayoutSlide", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getLayoutSlide", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getLayoutSlide", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getLayoutSlide", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getLayoutSlide", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getLayoutSlideInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getLayoutSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getLayoutSlide", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getLayoutSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("getLayoutSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("getLayoutSlide", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("getLayoutSlide", "slideIndex", paramSlideIndex).value();
	utils->initialize("getLayoutSlide", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->getLayoutSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getLayoutSlide", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getLayoutSlide", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getLayoutSlide", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getLayoutSlide", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getLayoutSlide", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getLayoutSlideInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getLayoutSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getLayoutSlide", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getLayoutSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("getLayoutSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("getLayoutSlide", "storage");
	paramPassword = utils->getInvalidTestValue("getLayoutSlide", "password", paramPassword);
	utils->initialize("getLayoutSlide", "password", paramPassword);

	bool failed = true;
	try
	{
		api->getLayoutSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getLayoutSlide", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getLayoutSlide", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getLayoutSlide", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getLayoutSlide", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getLayoutSlide", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getLayoutSlideInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getLayoutSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getLayoutSlide", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getLayoutSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("getLayoutSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("getLayoutSlide", "storage");
	paramFolder = utils->getInvalidTestValue("getLayoutSlide", "folder", paramFolder);
	utils->initialize("getLayoutSlide", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->getLayoutSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getLayoutSlide", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getLayoutSlide", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getLayoutSlide", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getLayoutSlide", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getLayoutSlide", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getLayoutSlideInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getLayoutSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getLayoutSlide", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getLayoutSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("getLayoutSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("getLayoutSlide", "storage");
	paramStorage = utils->getInvalidTestValue("getLayoutSlide", "storage", paramStorage);
	utils->initialize("getLayoutSlide", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->getLayoutSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getLayoutSlide", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getLayoutSlide", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getLayoutSlide", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getLayoutSlide", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getLayoutSlide", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getLayoutSlidesList) {
	utility::string_t paramName = utils->getTestValue("getLayoutSlidesList", "name");
	utility::string_t paramPassword = utils->getTestValue("getLayoutSlidesList", "password");
	utility::string_t paramFolder = utils->getTestValue("getLayoutSlidesList", "folder");
	utility::string_t paramStorage = utils->getTestValue("getLayoutSlidesList", "storage");
	utils->initialize("getLayoutSlidesList", "");
	std::shared_ptr<LayoutSlides> result = api->getLayoutSlides(paramName, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getLayoutSlidesListInvalidName) {
	utility::string_t paramName = utils->getTestValue("getLayoutSlidesList", "name");
	utility::string_t paramPassword = utils->getTestValue("getLayoutSlidesList", "password");
	utility::string_t paramFolder = utils->getTestValue("getLayoutSlidesList", "folder");
	utility::string_t paramStorage = utils->getTestValue("getLayoutSlidesList", "storage");
	paramName = utils->getInvalidTestValue("getLayoutSlidesList", "name", paramName);
	utils->initialize("getLayoutSlidesList", "name", paramName);

	bool failed = true;
	try
	{
		api->getLayoutSlides(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getLayoutSlidesList", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getLayoutSlidesList", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getLayoutSlidesList", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getLayoutSlidesList", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getLayoutSlidesList", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getLayoutSlidesListInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getLayoutSlidesList", "name");
	utility::string_t paramPassword = utils->getTestValue("getLayoutSlidesList", "password");
	utility::string_t paramFolder = utils->getTestValue("getLayoutSlidesList", "folder");
	utility::string_t paramStorage = utils->getTestValue("getLayoutSlidesList", "storage");
	paramPassword = utils->getInvalidTestValue("getLayoutSlidesList", "password", paramPassword);
	utils->initialize("getLayoutSlidesList", "password", paramPassword);

	bool failed = true;
	try
	{
		api->getLayoutSlides(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getLayoutSlidesList", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getLayoutSlidesList", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getLayoutSlidesList", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getLayoutSlidesList", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getLayoutSlidesList", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getLayoutSlidesListInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getLayoutSlidesList", "name");
	utility::string_t paramPassword = utils->getTestValue("getLayoutSlidesList", "password");
	utility::string_t paramFolder = utils->getTestValue("getLayoutSlidesList", "folder");
	utility::string_t paramStorage = utils->getTestValue("getLayoutSlidesList", "storage");
	paramFolder = utils->getInvalidTestValue("getLayoutSlidesList", "folder", paramFolder);
	utils->initialize("getLayoutSlidesList", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->getLayoutSlides(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getLayoutSlidesList", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getLayoutSlidesList", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getLayoutSlidesList", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getLayoutSlidesList", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getLayoutSlidesList", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getLayoutSlidesListInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getLayoutSlidesList", "name");
	utility::string_t paramPassword = utils->getTestValue("getLayoutSlidesList", "password");
	utility::string_t paramFolder = utils->getTestValue("getLayoutSlidesList", "folder");
	utility::string_t paramStorage = utils->getTestValue("getLayoutSlidesList", "storage");
	paramStorage = utils->getInvalidTestValue("getLayoutSlidesList", "storage", paramStorage);
	utils->initialize("getLayoutSlidesList", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->getLayoutSlides(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getLayoutSlidesList", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getLayoutSlidesList", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getLayoutSlidesList", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getLayoutSlidesList", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getLayoutSlidesList", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getMasterSlide) {
	utility::string_t paramName = utils->getTestValue("getMasterSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getMasterSlide", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getMasterSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("getMasterSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("getMasterSlide", "storage");
	utils->initialize("getMasterSlide", "");
	std::shared_ptr<MasterSlide> result = api->getMasterSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getMasterSlideInvalidName) {
	utility::string_t paramName = utils->getTestValue("getMasterSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getMasterSlide", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getMasterSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("getMasterSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("getMasterSlide", "storage");
	paramName = utils->getInvalidTestValue("getMasterSlide", "name", paramName);
	utils->initialize("getMasterSlide", "name", paramName);

	bool failed = true;
	try
	{
		api->getMasterSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getMasterSlide", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getMasterSlide", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getMasterSlide", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getMasterSlide", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getMasterSlide", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getMasterSlideInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getMasterSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getMasterSlide", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getMasterSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("getMasterSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("getMasterSlide", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("getMasterSlide", "slideIndex", paramSlideIndex).value();
	utils->initialize("getMasterSlide", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->getMasterSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getMasterSlide", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getMasterSlide", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getMasterSlide", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getMasterSlide", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getMasterSlide", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getMasterSlideInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getMasterSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getMasterSlide", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getMasterSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("getMasterSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("getMasterSlide", "storage");
	paramPassword = utils->getInvalidTestValue("getMasterSlide", "password", paramPassword);
	utils->initialize("getMasterSlide", "password", paramPassword);

	bool failed = true;
	try
	{
		api->getMasterSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getMasterSlide", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getMasterSlide", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getMasterSlide", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getMasterSlide", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getMasterSlide", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getMasterSlideInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getMasterSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getMasterSlide", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getMasterSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("getMasterSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("getMasterSlide", "storage");
	paramFolder = utils->getInvalidTestValue("getMasterSlide", "folder", paramFolder);
	utils->initialize("getMasterSlide", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->getMasterSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getMasterSlide", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getMasterSlide", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getMasterSlide", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getMasterSlide", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getMasterSlide", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getMasterSlideInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getMasterSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getMasterSlide", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getMasterSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("getMasterSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("getMasterSlide", "storage");
	paramStorage = utils->getInvalidTestValue("getMasterSlide", "storage", paramStorage);
	utils->initialize("getMasterSlide", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->getMasterSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getMasterSlide", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getMasterSlide", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getMasterSlide", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getMasterSlide", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getMasterSlide", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getMasterSlidesList) {
	utility::string_t paramName = utils->getTestValue("getMasterSlidesList", "name");
	utility::string_t paramPassword = utils->getTestValue("getMasterSlidesList", "password");
	utility::string_t paramFolder = utils->getTestValue("getMasterSlidesList", "folder");
	utility::string_t paramStorage = utils->getTestValue("getMasterSlidesList", "storage");
	utils->initialize("getMasterSlidesList", "");
	std::shared_ptr<MasterSlides> result = api->getMasterSlides(paramName, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getMasterSlidesListInvalidName) {
	utility::string_t paramName = utils->getTestValue("getMasterSlidesList", "name");
	utility::string_t paramPassword = utils->getTestValue("getMasterSlidesList", "password");
	utility::string_t paramFolder = utils->getTestValue("getMasterSlidesList", "folder");
	utility::string_t paramStorage = utils->getTestValue("getMasterSlidesList", "storage");
	paramName = utils->getInvalidTestValue("getMasterSlidesList", "name", paramName);
	utils->initialize("getMasterSlidesList", "name", paramName);

	bool failed = true;
	try
	{
		api->getMasterSlides(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getMasterSlidesList", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getMasterSlidesList", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getMasterSlidesList", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getMasterSlidesList", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getMasterSlidesList", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getMasterSlidesListInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getMasterSlidesList", "name");
	utility::string_t paramPassword = utils->getTestValue("getMasterSlidesList", "password");
	utility::string_t paramFolder = utils->getTestValue("getMasterSlidesList", "folder");
	utility::string_t paramStorage = utils->getTestValue("getMasterSlidesList", "storage");
	paramPassword = utils->getInvalidTestValue("getMasterSlidesList", "password", paramPassword);
	utils->initialize("getMasterSlidesList", "password", paramPassword);

	bool failed = true;
	try
	{
		api->getMasterSlides(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getMasterSlidesList", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getMasterSlidesList", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getMasterSlidesList", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getMasterSlidesList", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getMasterSlidesList", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getMasterSlidesListInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getMasterSlidesList", "name");
	utility::string_t paramPassword = utils->getTestValue("getMasterSlidesList", "password");
	utility::string_t paramFolder = utils->getTestValue("getMasterSlidesList", "folder");
	utility::string_t paramStorage = utils->getTestValue("getMasterSlidesList", "storage");
	paramFolder = utils->getInvalidTestValue("getMasterSlidesList", "folder", paramFolder);
	utils->initialize("getMasterSlidesList", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->getMasterSlides(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getMasterSlidesList", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getMasterSlidesList", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getMasterSlidesList", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getMasterSlidesList", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getMasterSlidesList", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getMasterSlidesListInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getMasterSlidesList", "name");
	utility::string_t paramPassword = utils->getTestValue("getMasterSlidesList", "password");
	utility::string_t paramFolder = utils->getTestValue("getMasterSlidesList", "folder");
	utility::string_t paramStorage = utils->getTestValue("getMasterSlidesList", "storage");
	paramStorage = utils->getInvalidTestValue("getMasterSlidesList", "storage", paramStorage);
	utils->initialize("getMasterSlidesList", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->getMasterSlides(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getMasterSlidesList", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getMasterSlidesList", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getMasterSlidesList", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getMasterSlidesList", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getMasterSlidesList", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlide) {
	utility::string_t paramName = utils->getTestValue("getNotesSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlide", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlide", "storage");
	utils->initialize("getNotesSlide", "");
	std::shared_ptr<NotesSlide> result = api->getNotesSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getNotesSlideInvalidName) {
	utility::string_t paramName = utils->getTestValue("getNotesSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlide", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlide", "storage");
	paramName = utils->getInvalidTestValue("getNotesSlide", "name", paramName);
	utils->initialize("getNotesSlide", "name", paramName);

	bool failed = true;
	try
	{
		api->getNotesSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlide", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlide", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlide", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlide", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlide", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getNotesSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlide", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlide", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("getNotesSlide", "slideIndex", paramSlideIndex).value();
	utils->initialize("getNotesSlide", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->getNotesSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlide", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlide", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlide", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlide", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlide", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getNotesSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlide", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlide", "storage");
	paramPassword = utils->getInvalidTestValue("getNotesSlide", "password", paramPassword);
	utils->initialize("getNotesSlide", "password", paramPassword);

	bool failed = true;
	try
	{
		api->getNotesSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlide", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlide", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlide", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlide", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlide", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getNotesSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlide", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlide", "storage");
	paramFolder = utils->getInvalidTestValue("getNotesSlide", "folder", paramFolder);
	utils->initialize("getNotesSlide", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->getNotesSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlide", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlide", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlide", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlide", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlide", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getNotesSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlide", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlide", "storage");
	paramStorage = utils->getInvalidTestValue("getNotesSlide", "storage", paramStorage);
	utils->initialize("getNotesSlide", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->getNotesSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlide", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlide", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlide", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlide", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlide", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideExists) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideExists", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideExists", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideExists", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideExists", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideExists", "storage");
	utils->initialize("getNotesSlideExists", "");
	std::shared_ptr<EntityExists> result = api->notesSlideExists(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getNotesSlideExistsInvalidName) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideExists", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideExists", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideExists", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideExists", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideExists", "storage");
	paramName = utils->getInvalidTestValue("getNotesSlideExists", "name", paramName);
	utils->initialize("getNotesSlideExists", "name", paramName);

	bool failed = true;
	try
	{
		api->notesSlideExists(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideExists", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideExists", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideExists", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideExists", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideExists", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideExistsInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideExists", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideExists", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideExists", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideExists", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideExists", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("getNotesSlideExists", "slideIndex", paramSlideIndex).value();
	utils->initialize("getNotesSlideExists", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->notesSlideExists(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideExists", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideExists", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideExists", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideExists", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideExists", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideExistsInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideExists", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideExists", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideExists", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideExists", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideExists", "storage");
	paramPassword = utils->getInvalidTestValue("getNotesSlideExists", "password", paramPassword);
	utils->initialize("getNotesSlideExists", "password", paramPassword);

	bool failed = true;
	try
	{
		api->notesSlideExists(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideExists", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideExists", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideExists", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideExists", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideExists", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideExistsInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideExists", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideExists", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideExists", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideExists", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideExists", "storage");
	paramFolder = utils->getInvalidTestValue("getNotesSlideExists", "folder", paramFolder);
	utils->initialize("getNotesSlideExists", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->notesSlideExists(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideExists", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideExists", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideExists", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideExists", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideExists", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideExistsInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideExists", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideExists", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideExists", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideExists", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideExists", "storage");
	paramStorage = utils->getInvalidTestValue("getNotesSlideExists", "storage", paramStorage);
	utils->initialize("getNotesSlideExists", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->notesSlideExists(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideExists", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideExists", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideExists", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideExists", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideExists", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideHeaderFooter) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideHeaderFooter", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideHeaderFooter", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideHeaderFooter", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideHeaderFooter", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideHeaderFooter", "storage");
	utils->initialize("getNotesSlideHeaderFooter", "");
	std::shared_ptr<NotesSlideHeaderFooter> result = api->getNotesSlideHeaderFooter(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getNotesSlideHeaderFooterInvalidName) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideHeaderFooter", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideHeaderFooter", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideHeaderFooter", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideHeaderFooter", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideHeaderFooter", "storage");
	paramName = utils->getInvalidTestValue("getNotesSlideHeaderFooter", "name", paramName);
	utils->initialize("getNotesSlideHeaderFooter", "name", paramName);

	bool failed = true;
	try
	{
		api->getNotesSlideHeaderFooter(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideHeaderFooter", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideHeaderFooter", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideHeaderFooter", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideHeaderFooter", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideHeaderFooter", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideHeaderFooterInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideHeaderFooter", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideHeaderFooter", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideHeaderFooter", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideHeaderFooter", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideHeaderFooter", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("getNotesSlideHeaderFooter", "slideIndex", paramSlideIndex).value();
	utils->initialize("getNotesSlideHeaderFooter", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->getNotesSlideHeaderFooter(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideHeaderFooter", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideHeaderFooter", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideHeaderFooter", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideHeaderFooter", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideHeaderFooter", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideHeaderFooterInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideHeaderFooter", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideHeaderFooter", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideHeaderFooter", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideHeaderFooter", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideHeaderFooter", "storage");
	paramPassword = utils->getInvalidTestValue("getNotesSlideHeaderFooter", "password", paramPassword);
	utils->initialize("getNotesSlideHeaderFooter", "password", paramPassword);

	bool failed = true;
	try
	{
		api->getNotesSlideHeaderFooter(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideHeaderFooter", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideHeaderFooter", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideHeaderFooter", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideHeaderFooter", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideHeaderFooter", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideHeaderFooterInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideHeaderFooter", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideHeaderFooter", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideHeaderFooter", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideHeaderFooter", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideHeaderFooter", "storage");
	paramFolder = utils->getInvalidTestValue("getNotesSlideHeaderFooter", "folder", paramFolder);
	utils->initialize("getNotesSlideHeaderFooter", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->getNotesSlideHeaderFooter(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideHeaderFooter", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideHeaderFooter", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideHeaderFooter", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideHeaderFooter", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideHeaderFooter", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideHeaderFooterInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideHeaderFooter", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideHeaderFooter", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideHeaderFooter", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideHeaderFooter", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideHeaderFooter", "storage");
	paramStorage = utils->getInvalidTestValue("getNotesSlideHeaderFooter", "storage", paramStorage);
	utils->initialize("getNotesSlideHeaderFooter", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->getNotesSlideHeaderFooter(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideHeaderFooter", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideHeaderFooter", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideHeaderFooter", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideHeaderFooter", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideHeaderFooter", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideShape) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getNotesSlideShape", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideShape", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideShape", "storage");
	utils->initialize("getNotesSlideShape", "");
	std::shared_ptr<ShapeBase> result = api->getNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getNotesSlideShapeInvalidName) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getNotesSlideShape", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideShape", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideShape", "storage");
	paramName = utils->getInvalidTestValue("getNotesSlideShape", "name", paramName);
	utils->initialize("getNotesSlideShape", "name", paramName);

	bool failed = true;
	try
	{
		api->getNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShape", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShape", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShape", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShape", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideShape", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideShapeInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getNotesSlideShape", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideShape", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideShape", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("getNotesSlideShape", "slideIndex", paramSlideIndex).value();
	utils->initialize("getNotesSlideShape", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->getNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShape", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShape", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShape", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShape", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideShape", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideShapeInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getNotesSlideShape", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideShape", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideShape", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("getNotesSlideShape", "shapeIndex", paramShapeIndex).value();
	utils->initialize("getNotesSlideShape", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->getNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShape", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShape", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShape", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShape", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideShape", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideShapeInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getNotesSlideShape", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideShape", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideShape", "storage");
	paramPassword = utils->getInvalidTestValue("getNotesSlideShape", "password", paramPassword);
	utils->initialize("getNotesSlideShape", "password", paramPassword);

	bool failed = true;
	try
	{
		api->getNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShape", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShape", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShape", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShape", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideShape", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideShapeInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getNotesSlideShape", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideShape", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideShape", "storage");
	paramFolder = utils->getInvalidTestValue("getNotesSlideShape", "folder", paramFolder);
	utils->initialize("getNotesSlideShape", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->getNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShape", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShape", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShape", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShape", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideShape", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideShapeInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getNotesSlideShape", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideShape", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideShape", "storage");
	paramStorage = utils->getInvalidTestValue("getNotesSlideShape", "storage", paramStorage);
	utils->initialize("getNotesSlideShape", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->getNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShape", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShape", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShape", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShape", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideShape", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideShapeParagraph) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideShapeParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideShapeParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getNotesSlideShapeParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getNotesSlideShapeParagraph", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideShapeParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideShapeParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideShapeParagraph", "storage");
	utils->initialize("getNotesSlideShapeParagraph", "");
	std::shared_ptr<Paragraph> result = api->getNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getNotesSlideShapeParagraphInvalidName) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideShapeParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideShapeParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getNotesSlideShapeParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getNotesSlideShapeParagraph", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideShapeParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideShapeParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideShapeParagraph", "storage");
	paramName = utils->getInvalidTestValue("getNotesSlideShapeParagraph", "name", paramName);
	utils->initialize("getNotesSlideShapeParagraph", "name", paramName);

	bool failed = true;
	try
	{
		api->getNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapeParagraph", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapeParagraph", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapeParagraph", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapeParagraph", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideShapeParagraph", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideShapeParagraphInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideShapeParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideShapeParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getNotesSlideShapeParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getNotesSlideShapeParagraph", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideShapeParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideShapeParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideShapeParagraph", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("getNotesSlideShapeParagraph", "slideIndex", paramSlideIndex).value();
	utils->initialize("getNotesSlideShapeParagraph", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->getNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapeParagraph", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapeParagraph", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapeParagraph", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapeParagraph", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideShapeParagraph", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideShapeParagraphInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideShapeParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideShapeParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getNotesSlideShapeParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getNotesSlideShapeParagraph", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideShapeParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideShapeParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideShapeParagraph", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("getNotesSlideShapeParagraph", "shapeIndex", paramShapeIndex).value();
	utils->initialize("getNotesSlideShapeParagraph", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->getNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapeParagraph", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapeParagraph", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapeParagraph", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapeParagraph", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideShapeParagraph", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideShapeParagraphInvalidParagraphIndex) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideShapeParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideShapeParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getNotesSlideShapeParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getNotesSlideShapeParagraph", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideShapeParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideShapeParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideShapeParagraph", "storage");
	paramParagraphIndex = utils->getInvalidIntTestValue("getNotesSlideShapeParagraph", "paragraphIndex", paramParagraphIndex).value();
	utils->initialize("getNotesSlideShapeParagraph", "paragraphIndex", paramParagraphIndex);

	bool failed = true;
	try
	{
		api->getNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapeParagraph", "paragraphIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapeParagraph", "paragraphIndex", paramParagraphIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapeParagraph", "paragraphIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapeParagraph", "paragraphIndex", paramParagraphIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideShapeParagraph", "paragraphIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideShapeParagraphInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideShapeParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideShapeParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getNotesSlideShapeParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getNotesSlideShapeParagraph", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideShapeParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideShapeParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideShapeParagraph", "storage");
	paramPassword = utils->getInvalidTestValue("getNotesSlideShapeParagraph", "password", paramPassword);
	utils->initialize("getNotesSlideShapeParagraph", "password", paramPassword);

	bool failed = true;
	try
	{
		api->getNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapeParagraph", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapeParagraph", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapeParagraph", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapeParagraph", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideShapeParagraph", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideShapeParagraphInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideShapeParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideShapeParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getNotesSlideShapeParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getNotesSlideShapeParagraph", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideShapeParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideShapeParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideShapeParagraph", "storage");
	paramFolder = utils->getInvalidTestValue("getNotesSlideShapeParagraph", "folder", paramFolder);
	utils->initialize("getNotesSlideShapeParagraph", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->getNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapeParagraph", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapeParagraph", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapeParagraph", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapeParagraph", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideShapeParagraph", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideShapeParagraphInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideShapeParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideShapeParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getNotesSlideShapeParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getNotesSlideShapeParagraph", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideShapeParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideShapeParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideShapeParagraph", "storage");
	paramStorage = utils->getInvalidTestValue("getNotesSlideShapeParagraph", "storage", paramStorage);
	utils->initialize("getNotesSlideShapeParagraph", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->getNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapeParagraph", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapeParagraph", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapeParagraph", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapeParagraph", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideShapeParagraph", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideShapeParagraphs) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideShapeParagraphs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideShapeParagraphs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getNotesSlideShapeParagraphs", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideShapeParagraphs", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideShapeParagraphs", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideShapeParagraphs", "storage");
	utils->initialize("getNotesSlideShapeParagraphs", "");
	std::shared_ptr<Paragraphs> result = api->getNotesSlideParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getNotesSlideShapeParagraphsInvalidName) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideShapeParagraphs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideShapeParagraphs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getNotesSlideShapeParagraphs", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideShapeParagraphs", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideShapeParagraphs", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideShapeParagraphs", "storage");
	paramName = utils->getInvalidTestValue("getNotesSlideShapeParagraphs", "name", paramName);
	utils->initialize("getNotesSlideShapeParagraphs", "name", paramName);

	bool failed = true;
	try
	{
		api->getNotesSlideParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapeParagraphs", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapeParagraphs", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapeParagraphs", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapeParagraphs", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideShapeParagraphs", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideShapeParagraphsInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideShapeParagraphs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideShapeParagraphs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getNotesSlideShapeParagraphs", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideShapeParagraphs", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideShapeParagraphs", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideShapeParagraphs", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("getNotesSlideShapeParagraphs", "slideIndex", paramSlideIndex).value();
	utils->initialize("getNotesSlideShapeParagraphs", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->getNotesSlideParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapeParagraphs", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapeParagraphs", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapeParagraphs", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapeParagraphs", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideShapeParagraphs", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideShapeParagraphsInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideShapeParagraphs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideShapeParagraphs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getNotesSlideShapeParagraphs", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideShapeParagraphs", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideShapeParagraphs", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideShapeParagraphs", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("getNotesSlideShapeParagraphs", "shapeIndex", paramShapeIndex).value();
	utils->initialize("getNotesSlideShapeParagraphs", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->getNotesSlideParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapeParagraphs", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapeParagraphs", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapeParagraphs", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapeParagraphs", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideShapeParagraphs", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideShapeParagraphsInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideShapeParagraphs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideShapeParagraphs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getNotesSlideShapeParagraphs", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideShapeParagraphs", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideShapeParagraphs", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideShapeParagraphs", "storage");
	paramPassword = utils->getInvalidTestValue("getNotesSlideShapeParagraphs", "password", paramPassword);
	utils->initialize("getNotesSlideShapeParagraphs", "password", paramPassword);

	bool failed = true;
	try
	{
		api->getNotesSlideParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapeParagraphs", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapeParagraphs", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapeParagraphs", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapeParagraphs", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideShapeParagraphs", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideShapeParagraphsInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideShapeParagraphs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideShapeParagraphs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getNotesSlideShapeParagraphs", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideShapeParagraphs", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideShapeParagraphs", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideShapeParagraphs", "storage");
	paramFolder = utils->getInvalidTestValue("getNotesSlideShapeParagraphs", "folder", paramFolder);
	utils->initialize("getNotesSlideShapeParagraphs", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->getNotesSlideParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapeParagraphs", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapeParagraphs", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapeParagraphs", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapeParagraphs", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideShapeParagraphs", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideShapeParagraphsInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideShapeParagraphs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideShapeParagraphs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getNotesSlideShapeParagraphs", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideShapeParagraphs", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideShapeParagraphs", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideShapeParagraphs", "storage");
	paramStorage = utils->getInvalidTestValue("getNotesSlideShapeParagraphs", "storage", paramStorage);
	utils->initialize("getNotesSlideShapeParagraphs", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->getNotesSlideParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapeParagraphs", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapeParagraphs", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapeParagraphs", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapeParagraphs", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideShapeParagraphs", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideShapePortion) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideShapePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideShapePortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getNotesSlideShapePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getNotesSlideShapePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("getNotesSlideShapePortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideShapePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideShapePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideShapePortion", "storage");
	utils->initialize("getNotesSlideShapePortion", "");
	std::shared_ptr<Portion> result = api->getNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getNotesSlideShapePortionInvalidName) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideShapePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideShapePortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getNotesSlideShapePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getNotesSlideShapePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("getNotesSlideShapePortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideShapePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideShapePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideShapePortion", "storage");
	paramName = utils->getInvalidTestValue("getNotesSlideShapePortion", "name", paramName);
	utils->initialize("getNotesSlideShapePortion", "name", paramName);

	bool failed = true;
	try
	{
		api->getNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapePortion", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapePortion", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapePortion", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapePortion", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideShapePortion", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideShapePortionInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideShapePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideShapePortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getNotesSlideShapePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getNotesSlideShapePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("getNotesSlideShapePortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideShapePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideShapePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideShapePortion", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("getNotesSlideShapePortion", "slideIndex", paramSlideIndex).value();
	utils->initialize("getNotesSlideShapePortion", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->getNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapePortion", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapePortion", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapePortion", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapePortion", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideShapePortion", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideShapePortionInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideShapePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideShapePortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getNotesSlideShapePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getNotesSlideShapePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("getNotesSlideShapePortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideShapePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideShapePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideShapePortion", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("getNotesSlideShapePortion", "shapeIndex", paramShapeIndex).value();
	utils->initialize("getNotesSlideShapePortion", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->getNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapePortion", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapePortion", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapePortion", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapePortion", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideShapePortion", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideShapePortionInvalidParagraphIndex) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideShapePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideShapePortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getNotesSlideShapePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getNotesSlideShapePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("getNotesSlideShapePortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideShapePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideShapePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideShapePortion", "storage");
	paramParagraphIndex = utils->getInvalidIntTestValue("getNotesSlideShapePortion", "paragraphIndex", paramParagraphIndex).value();
	utils->initialize("getNotesSlideShapePortion", "paragraphIndex", paramParagraphIndex);

	bool failed = true;
	try
	{
		api->getNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapePortion", "paragraphIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapePortion", "paragraphIndex", paramParagraphIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapePortion", "paragraphIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapePortion", "paragraphIndex", paramParagraphIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideShapePortion", "paragraphIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideShapePortionInvalidPortionIndex) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideShapePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideShapePortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getNotesSlideShapePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getNotesSlideShapePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("getNotesSlideShapePortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideShapePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideShapePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideShapePortion", "storage");
	paramPortionIndex = utils->getInvalidIntTestValue("getNotesSlideShapePortion", "portionIndex", paramPortionIndex).value();
	utils->initialize("getNotesSlideShapePortion", "portionIndex", paramPortionIndex);

	bool failed = true;
	try
	{
		api->getNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapePortion", "portionIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapePortion", "portionIndex", paramPortionIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapePortion", "portionIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapePortion", "portionIndex", paramPortionIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideShapePortion", "portionIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideShapePortionInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideShapePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideShapePortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getNotesSlideShapePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getNotesSlideShapePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("getNotesSlideShapePortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideShapePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideShapePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideShapePortion", "storage");
	paramPassword = utils->getInvalidTestValue("getNotesSlideShapePortion", "password", paramPassword);
	utils->initialize("getNotesSlideShapePortion", "password", paramPassword);

	bool failed = true;
	try
	{
		api->getNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapePortion", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapePortion", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapePortion", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapePortion", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideShapePortion", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideShapePortionInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideShapePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideShapePortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getNotesSlideShapePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getNotesSlideShapePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("getNotesSlideShapePortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideShapePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideShapePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideShapePortion", "storage");
	paramFolder = utils->getInvalidTestValue("getNotesSlideShapePortion", "folder", paramFolder);
	utils->initialize("getNotesSlideShapePortion", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->getNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapePortion", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapePortion", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapePortion", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapePortion", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideShapePortion", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideShapePortionInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideShapePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideShapePortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getNotesSlideShapePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getNotesSlideShapePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("getNotesSlideShapePortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideShapePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideShapePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideShapePortion", "storage");
	paramStorage = utils->getInvalidTestValue("getNotesSlideShapePortion", "storage", paramStorage);
	utils->initialize("getNotesSlideShapePortion", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->getNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapePortion", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapePortion", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapePortion", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapePortion", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideShapePortion", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideShapePortions) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideShapePortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideShapePortions", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getNotesSlideShapePortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getNotesSlideShapePortions", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideShapePortions", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideShapePortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideShapePortions", "storage");
	utils->initialize("getNotesSlideShapePortions", "");
	std::shared_ptr<Portions> result = api->getNotesSlidePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getNotesSlideShapePortionsInvalidName) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideShapePortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideShapePortions", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getNotesSlideShapePortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getNotesSlideShapePortions", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideShapePortions", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideShapePortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideShapePortions", "storage");
	paramName = utils->getInvalidTestValue("getNotesSlideShapePortions", "name", paramName);
	utils->initialize("getNotesSlideShapePortions", "name", paramName);

	bool failed = true;
	try
	{
		api->getNotesSlidePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapePortions", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapePortions", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapePortions", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapePortions", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideShapePortions", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideShapePortionsInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideShapePortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideShapePortions", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getNotesSlideShapePortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getNotesSlideShapePortions", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideShapePortions", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideShapePortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideShapePortions", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("getNotesSlideShapePortions", "slideIndex", paramSlideIndex).value();
	utils->initialize("getNotesSlideShapePortions", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->getNotesSlidePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapePortions", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapePortions", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapePortions", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapePortions", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideShapePortions", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideShapePortionsInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideShapePortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideShapePortions", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getNotesSlideShapePortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getNotesSlideShapePortions", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideShapePortions", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideShapePortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideShapePortions", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("getNotesSlideShapePortions", "shapeIndex", paramShapeIndex).value();
	utils->initialize("getNotesSlideShapePortions", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->getNotesSlidePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapePortions", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapePortions", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapePortions", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapePortions", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideShapePortions", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideShapePortionsInvalidParagraphIndex) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideShapePortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideShapePortions", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getNotesSlideShapePortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getNotesSlideShapePortions", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideShapePortions", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideShapePortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideShapePortions", "storage");
	paramParagraphIndex = utils->getInvalidIntTestValue("getNotesSlideShapePortions", "paragraphIndex", paramParagraphIndex).value();
	utils->initialize("getNotesSlideShapePortions", "paragraphIndex", paramParagraphIndex);

	bool failed = true;
	try
	{
		api->getNotesSlidePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapePortions", "paragraphIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapePortions", "paragraphIndex", paramParagraphIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapePortions", "paragraphIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapePortions", "paragraphIndex", paramParagraphIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideShapePortions", "paragraphIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideShapePortionsInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideShapePortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideShapePortions", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getNotesSlideShapePortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getNotesSlideShapePortions", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideShapePortions", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideShapePortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideShapePortions", "storage");
	paramPassword = utils->getInvalidTestValue("getNotesSlideShapePortions", "password", paramPassword);
	utils->initialize("getNotesSlideShapePortions", "password", paramPassword);

	bool failed = true;
	try
	{
		api->getNotesSlidePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapePortions", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapePortions", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapePortions", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapePortions", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideShapePortions", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideShapePortionsInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideShapePortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideShapePortions", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getNotesSlideShapePortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getNotesSlideShapePortions", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideShapePortions", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideShapePortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideShapePortions", "storage");
	paramFolder = utils->getInvalidTestValue("getNotesSlideShapePortions", "folder", paramFolder);
	utils->initialize("getNotesSlideShapePortions", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->getNotesSlidePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapePortions", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapePortions", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapePortions", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapePortions", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideShapePortions", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideShapePortionsInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideShapePortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideShapePortions", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getNotesSlideShapePortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getNotesSlideShapePortions", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideShapePortions", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideShapePortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideShapePortions", "storage");
	paramStorage = utils->getInvalidTestValue("getNotesSlideShapePortions", "storage", paramStorage);
	utils->initialize("getNotesSlideShapePortions", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->getNotesSlidePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapePortions", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapePortions", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapePortions", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapePortions", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideShapePortions", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideShapes) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideShapes", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideShapes", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideShapes", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideShapes", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideShapes", "storage");
	utils->initialize("getNotesSlideShapes", "");
	std::shared_ptr<Shapes> result = api->getNotesSlideShapes(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getNotesSlideShapesInvalidName) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideShapes", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideShapes", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideShapes", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideShapes", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideShapes", "storage");
	paramName = utils->getInvalidTestValue("getNotesSlideShapes", "name", paramName);
	utils->initialize("getNotesSlideShapes", "name", paramName);

	bool failed = true;
	try
	{
		api->getNotesSlideShapes(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapes", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapes", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapes", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapes", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideShapes", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideShapesInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideShapes", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideShapes", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideShapes", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideShapes", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideShapes", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("getNotesSlideShapes", "slideIndex", paramSlideIndex).value();
	utils->initialize("getNotesSlideShapes", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->getNotesSlideShapes(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapes", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapes", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapes", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapes", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideShapes", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideShapesInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideShapes", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideShapes", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideShapes", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideShapes", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideShapes", "storage");
	paramPassword = utils->getInvalidTestValue("getNotesSlideShapes", "password", paramPassword);
	utils->initialize("getNotesSlideShapes", "password", paramPassword);

	bool failed = true;
	try
	{
		api->getNotesSlideShapes(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapes", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapes", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapes", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapes", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideShapes", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideShapesInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideShapes", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideShapes", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideShapes", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideShapes", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideShapes", "storage");
	paramFolder = utils->getInvalidTestValue("getNotesSlideShapes", "folder", paramFolder);
	utils->initialize("getNotesSlideShapes", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->getNotesSlideShapes(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapes", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapes", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapes", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapes", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideShapes", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideShapesInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideShapes", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideShapes", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideShapes", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideShapes", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideShapes", "storage");
	paramStorage = utils->getInvalidTestValue("getNotesSlideShapes", "storage", paramStorage);
	utils->initialize("getNotesSlideShapes", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->getNotesSlideShapes(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapes", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapes", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapes", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapes", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideShapes", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideWithFormat) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideWithFormat", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideWithFormat", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("getNotesSlideWithFormat", "format");
	auto paramWidth = utils->getOptionalIntTestValue("getNotesSlideWithFormat", "width");
	auto paramHeight = utils->getOptionalIntTestValue("getNotesSlideWithFormat", "height");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideWithFormat", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideWithFormat", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideWithFormat", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("getNotesSlideWithFormat", "fontsFolder");
	utils->initialize("getNotesSlideWithFormat", "");
	HttpContent result = api->downloadNotesSlide(paramName, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, getNotesSlideWithFormatInvalidName) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideWithFormat", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideWithFormat", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("getNotesSlideWithFormat", "format");
	auto paramWidth = utils->getOptionalIntTestValue("getNotesSlideWithFormat", "width");
	auto paramHeight = utils->getOptionalIntTestValue("getNotesSlideWithFormat", "height");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideWithFormat", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideWithFormat", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideWithFormat", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("getNotesSlideWithFormat", "fontsFolder");
	paramName = utils->getInvalidTestValue("getNotesSlideWithFormat", "name", paramName);
	utils->initialize("getNotesSlideWithFormat", "name", paramName);

	bool failed = true;
	try
	{
		api->downloadNotesSlide(paramName, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideWithFormat", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideWithFormat", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideWithFormat", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideWithFormat", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideWithFormat", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideWithFormatInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideWithFormat", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideWithFormat", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("getNotesSlideWithFormat", "format");
	auto paramWidth = utils->getOptionalIntTestValue("getNotesSlideWithFormat", "width");
	auto paramHeight = utils->getOptionalIntTestValue("getNotesSlideWithFormat", "height");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideWithFormat", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideWithFormat", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideWithFormat", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("getNotesSlideWithFormat", "fontsFolder");
	paramSlideIndex = utils->getInvalidIntTestValue("getNotesSlideWithFormat", "slideIndex", paramSlideIndex).value();
	utils->initialize("getNotesSlideWithFormat", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->downloadNotesSlide(paramName, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideWithFormat", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideWithFormat", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideWithFormat", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideWithFormat", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideWithFormat", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideWithFormatInvalidFormat) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideWithFormat", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideWithFormat", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("getNotesSlideWithFormat", "format");
	auto paramWidth = utils->getOptionalIntTestValue("getNotesSlideWithFormat", "width");
	auto paramHeight = utils->getOptionalIntTestValue("getNotesSlideWithFormat", "height");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideWithFormat", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideWithFormat", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideWithFormat", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("getNotesSlideWithFormat", "fontsFolder");
	paramFormat = utils->getInvalidTestValue("getNotesSlideWithFormat", "format", paramFormat);
	utils->initialize("getNotesSlideWithFormat", "format", paramFormat);

	bool failed = true;
	try
	{
		api->downloadNotesSlide(paramName, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideWithFormat", "format");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideWithFormat", "format", paramFormat);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideWithFormat", "format");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideWithFormat", "format", paramFormat);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideWithFormat", "format"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideWithFormatInvalidWidth) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideWithFormat", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideWithFormat", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("getNotesSlideWithFormat", "format");
	auto paramWidth = utils->getOptionalIntTestValue("getNotesSlideWithFormat", "width");
	auto paramHeight = utils->getOptionalIntTestValue("getNotesSlideWithFormat", "height");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideWithFormat", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideWithFormat", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideWithFormat", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("getNotesSlideWithFormat", "fontsFolder");
	paramWidth = utils->getInvalidIntTestValue("getNotesSlideWithFormat", "width", paramWidth).value();
	utils->initialize("getNotesSlideWithFormat", "width", paramWidth);

	bool failed = true;
	try
	{
		api->downloadNotesSlide(paramName, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideWithFormat", "width");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideWithFormat", "width", paramWidth);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideWithFormat", "width");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideWithFormat", "width", paramWidth);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideWithFormat", "width"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideWithFormatInvalidHeight) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideWithFormat", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideWithFormat", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("getNotesSlideWithFormat", "format");
	auto paramWidth = utils->getOptionalIntTestValue("getNotesSlideWithFormat", "width");
	auto paramHeight = utils->getOptionalIntTestValue("getNotesSlideWithFormat", "height");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideWithFormat", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideWithFormat", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideWithFormat", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("getNotesSlideWithFormat", "fontsFolder");
	paramHeight = utils->getInvalidIntTestValue("getNotesSlideWithFormat", "height", paramHeight).value();
	utils->initialize("getNotesSlideWithFormat", "height", paramHeight);

	bool failed = true;
	try
	{
		api->downloadNotesSlide(paramName, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideWithFormat", "height");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideWithFormat", "height", paramHeight);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideWithFormat", "height");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideWithFormat", "height", paramHeight);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideWithFormat", "height"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideWithFormatInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideWithFormat", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideWithFormat", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("getNotesSlideWithFormat", "format");
	auto paramWidth = utils->getOptionalIntTestValue("getNotesSlideWithFormat", "width");
	auto paramHeight = utils->getOptionalIntTestValue("getNotesSlideWithFormat", "height");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideWithFormat", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideWithFormat", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideWithFormat", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("getNotesSlideWithFormat", "fontsFolder");
	paramPassword = utils->getInvalidTestValue("getNotesSlideWithFormat", "password", paramPassword);
	utils->initialize("getNotesSlideWithFormat", "password", paramPassword);

	bool failed = true;
	try
	{
		api->downloadNotesSlide(paramName, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideWithFormat", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideWithFormat", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideWithFormat", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideWithFormat", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideWithFormat", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideWithFormatInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideWithFormat", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideWithFormat", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("getNotesSlideWithFormat", "format");
	auto paramWidth = utils->getOptionalIntTestValue("getNotesSlideWithFormat", "width");
	auto paramHeight = utils->getOptionalIntTestValue("getNotesSlideWithFormat", "height");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideWithFormat", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideWithFormat", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideWithFormat", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("getNotesSlideWithFormat", "fontsFolder");
	paramFolder = utils->getInvalidTestValue("getNotesSlideWithFormat", "folder", paramFolder);
	utils->initialize("getNotesSlideWithFormat", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->downloadNotesSlide(paramName, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideWithFormat", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideWithFormat", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideWithFormat", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideWithFormat", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideWithFormat", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideWithFormatInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideWithFormat", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideWithFormat", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("getNotesSlideWithFormat", "format");
	auto paramWidth = utils->getOptionalIntTestValue("getNotesSlideWithFormat", "width");
	auto paramHeight = utils->getOptionalIntTestValue("getNotesSlideWithFormat", "height");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideWithFormat", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideWithFormat", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideWithFormat", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("getNotesSlideWithFormat", "fontsFolder");
	paramStorage = utils->getInvalidTestValue("getNotesSlideWithFormat", "storage", paramStorage);
	utils->initialize("getNotesSlideWithFormat", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->downloadNotesSlide(paramName, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideWithFormat", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideWithFormat", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideWithFormat", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideWithFormat", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideWithFormat", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideWithFormatInvalidFontsFolder) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideWithFormat", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideWithFormat", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("getNotesSlideWithFormat", "format");
	auto paramWidth = utils->getOptionalIntTestValue("getNotesSlideWithFormat", "width");
	auto paramHeight = utils->getOptionalIntTestValue("getNotesSlideWithFormat", "height");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideWithFormat", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideWithFormat", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideWithFormat", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("getNotesSlideWithFormat", "fontsFolder");
	paramFontsFolder = utils->getInvalidTestValue("getNotesSlideWithFormat", "fontsFolder", paramFontsFolder);
	utils->initialize("getNotesSlideWithFormat", "fontsFolder", paramFontsFolder);

	bool failed = true;
	try
	{
		api->downloadNotesSlide(paramName, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideWithFormat", "fontsFolder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideWithFormat", "fontsFolder", paramFontsFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideWithFormat", "fontsFolder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideWithFormat", "fontsFolder", paramFontsFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideWithFormat", "fontsFolder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getParagraphPortion) {
	utility::string_t paramName = utils->getTestValue("getParagraphPortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getParagraphPortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getParagraphPortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getParagraphPortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("getParagraphPortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("getParagraphPortion", "password");
	utility::string_t paramFolder = utils->getTestValue("getParagraphPortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("getParagraphPortion", "storage");
	utils->initialize("getParagraphPortion", "");
	std::shared_ptr<Portion> result = api->getPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getParagraphPortionInvalidName) {
	utility::string_t paramName = utils->getTestValue("getParagraphPortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getParagraphPortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getParagraphPortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getParagraphPortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("getParagraphPortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("getParagraphPortion", "password");
	utility::string_t paramFolder = utils->getTestValue("getParagraphPortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("getParagraphPortion", "storage");
	paramName = utils->getInvalidTestValue("getParagraphPortion", "name", paramName);
	utils->initialize("getParagraphPortion", "name", paramName);

	bool failed = true;
	try
	{
		api->getPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getParagraphPortion", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getParagraphPortion", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getParagraphPortion", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getParagraphPortion", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getParagraphPortion", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getParagraphPortionInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getParagraphPortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getParagraphPortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getParagraphPortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getParagraphPortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("getParagraphPortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("getParagraphPortion", "password");
	utility::string_t paramFolder = utils->getTestValue("getParagraphPortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("getParagraphPortion", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("getParagraphPortion", "slideIndex", paramSlideIndex).value();
	utils->initialize("getParagraphPortion", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->getPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getParagraphPortion", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getParagraphPortion", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getParagraphPortion", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getParagraphPortion", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getParagraphPortion", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getParagraphPortionInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("getParagraphPortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getParagraphPortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getParagraphPortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getParagraphPortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("getParagraphPortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("getParagraphPortion", "password");
	utility::string_t paramFolder = utils->getTestValue("getParagraphPortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("getParagraphPortion", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("getParagraphPortion", "shapeIndex", paramShapeIndex).value();
	utils->initialize("getParagraphPortion", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->getPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getParagraphPortion", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getParagraphPortion", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getParagraphPortion", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getParagraphPortion", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getParagraphPortion", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getParagraphPortionInvalidParagraphIndex) {
	utility::string_t paramName = utils->getTestValue("getParagraphPortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getParagraphPortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getParagraphPortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getParagraphPortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("getParagraphPortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("getParagraphPortion", "password");
	utility::string_t paramFolder = utils->getTestValue("getParagraphPortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("getParagraphPortion", "storage");
	paramParagraphIndex = utils->getInvalidIntTestValue("getParagraphPortion", "paragraphIndex", paramParagraphIndex).value();
	utils->initialize("getParagraphPortion", "paragraphIndex", paramParagraphIndex);

	bool failed = true;
	try
	{
		api->getPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getParagraphPortion", "paragraphIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getParagraphPortion", "paragraphIndex", paramParagraphIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getParagraphPortion", "paragraphIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getParagraphPortion", "paragraphIndex", paramParagraphIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getParagraphPortion", "paragraphIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getParagraphPortionInvalidPortionIndex) {
	utility::string_t paramName = utils->getTestValue("getParagraphPortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getParagraphPortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getParagraphPortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getParagraphPortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("getParagraphPortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("getParagraphPortion", "password");
	utility::string_t paramFolder = utils->getTestValue("getParagraphPortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("getParagraphPortion", "storage");
	paramPortionIndex = utils->getInvalidIntTestValue("getParagraphPortion", "portionIndex", paramPortionIndex).value();
	utils->initialize("getParagraphPortion", "portionIndex", paramPortionIndex);

	bool failed = true;
	try
	{
		api->getPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getParagraphPortion", "portionIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getParagraphPortion", "portionIndex", paramPortionIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getParagraphPortion", "portionIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getParagraphPortion", "portionIndex", paramPortionIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getParagraphPortion", "portionIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getParagraphPortionInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getParagraphPortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getParagraphPortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getParagraphPortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getParagraphPortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("getParagraphPortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("getParagraphPortion", "password");
	utility::string_t paramFolder = utils->getTestValue("getParagraphPortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("getParagraphPortion", "storage");
	paramPassword = utils->getInvalidTestValue("getParagraphPortion", "password", paramPassword);
	utils->initialize("getParagraphPortion", "password", paramPassword);

	bool failed = true;
	try
	{
		api->getPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getParagraphPortion", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getParagraphPortion", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getParagraphPortion", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getParagraphPortion", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getParagraphPortion", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getParagraphPortionInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getParagraphPortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getParagraphPortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getParagraphPortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getParagraphPortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("getParagraphPortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("getParagraphPortion", "password");
	utility::string_t paramFolder = utils->getTestValue("getParagraphPortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("getParagraphPortion", "storage");
	paramFolder = utils->getInvalidTestValue("getParagraphPortion", "folder", paramFolder);
	utils->initialize("getParagraphPortion", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->getPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getParagraphPortion", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getParagraphPortion", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getParagraphPortion", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getParagraphPortion", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getParagraphPortion", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getParagraphPortionInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getParagraphPortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getParagraphPortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getParagraphPortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getParagraphPortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("getParagraphPortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("getParagraphPortion", "password");
	utility::string_t paramFolder = utils->getTestValue("getParagraphPortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("getParagraphPortion", "storage");
	paramStorage = utils->getInvalidTestValue("getParagraphPortion", "storage", paramStorage);
	utils->initialize("getParagraphPortion", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->getPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getParagraphPortion", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getParagraphPortion", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getParagraphPortion", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getParagraphPortion", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getParagraphPortion", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getParagraphPortions) {
	utility::string_t paramName = utils->getTestValue("getParagraphPortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getParagraphPortions", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getParagraphPortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getParagraphPortions", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("getParagraphPortions", "password");
	utility::string_t paramFolder = utils->getTestValue("getParagraphPortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("getParagraphPortions", "storage");
	utils->initialize("getParagraphPortions", "");
	std::shared_ptr<Portions> result = api->getPortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getParagraphPortionsInvalidName) {
	utility::string_t paramName = utils->getTestValue("getParagraphPortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getParagraphPortions", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getParagraphPortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getParagraphPortions", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("getParagraphPortions", "password");
	utility::string_t paramFolder = utils->getTestValue("getParagraphPortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("getParagraphPortions", "storage");
	paramName = utils->getInvalidTestValue("getParagraphPortions", "name", paramName);
	utils->initialize("getParagraphPortions", "name", paramName);

	bool failed = true;
	try
	{
		api->getPortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getParagraphPortions", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getParagraphPortions", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getParagraphPortions", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getParagraphPortions", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getParagraphPortions", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getParagraphPortionsInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getParagraphPortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getParagraphPortions", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getParagraphPortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getParagraphPortions", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("getParagraphPortions", "password");
	utility::string_t paramFolder = utils->getTestValue("getParagraphPortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("getParagraphPortions", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("getParagraphPortions", "slideIndex", paramSlideIndex).value();
	utils->initialize("getParagraphPortions", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->getPortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getParagraphPortions", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getParagraphPortions", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getParagraphPortions", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getParagraphPortions", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getParagraphPortions", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getParagraphPortionsInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("getParagraphPortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getParagraphPortions", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getParagraphPortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getParagraphPortions", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("getParagraphPortions", "password");
	utility::string_t paramFolder = utils->getTestValue("getParagraphPortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("getParagraphPortions", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("getParagraphPortions", "shapeIndex", paramShapeIndex).value();
	utils->initialize("getParagraphPortions", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->getPortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getParagraphPortions", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getParagraphPortions", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getParagraphPortions", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getParagraphPortions", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getParagraphPortions", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getParagraphPortionsInvalidParagraphIndex) {
	utility::string_t paramName = utils->getTestValue("getParagraphPortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getParagraphPortions", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getParagraphPortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getParagraphPortions", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("getParagraphPortions", "password");
	utility::string_t paramFolder = utils->getTestValue("getParagraphPortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("getParagraphPortions", "storage");
	paramParagraphIndex = utils->getInvalidIntTestValue("getParagraphPortions", "paragraphIndex", paramParagraphIndex).value();
	utils->initialize("getParagraphPortions", "paragraphIndex", paramParagraphIndex);

	bool failed = true;
	try
	{
		api->getPortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getParagraphPortions", "paragraphIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getParagraphPortions", "paragraphIndex", paramParagraphIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getParagraphPortions", "paragraphIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getParagraphPortions", "paragraphIndex", paramParagraphIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getParagraphPortions", "paragraphIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getParagraphPortionsInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getParagraphPortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getParagraphPortions", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getParagraphPortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getParagraphPortions", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("getParagraphPortions", "password");
	utility::string_t paramFolder = utils->getTestValue("getParagraphPortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("getParagraphPortions", "storage");
	paramPassword = utils->getInvalidTestValue("getParagraphPortions", "password", paramPassword);
	utils->initialize("getParagraphPortions", "password", paramPassword);

	bool failed = true;
	try
	{
		api->getPortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getParagraphPortions", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getParagraphPortions", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getParagraphPortions", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getParagraphPortions", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getParagraphPortions", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getParagraphPortionsInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getParagraphPortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getParagraphPortions", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getParagraphPortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getParagraphPortions", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("getParagraphPortions", "password");
	utility::string_t paramFolder = utils->getTestValue("getParagraphPortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("getParagraphPortions", "storage");
	paramFolder = utils->getInvalidTestValue("getParagraphPortions", "folder", paramFolder);
	utils->initialize("getParagraphPortions", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->getPortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getParagraphPortions", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getParagraphPortions", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getParagraphPortions", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getParagraphPortions", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getParagraphPortions", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getParagraphPortionsInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getParagraphPortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getParagraphPortions", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getParagraphPortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getParagraphPortions", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("getParagraphPortions", "password");
	utility::string_t paramFolder = utils->getTestValue("getParagraphPortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("getParagraphPortions", "storage");
	paramStorage = utils->getInvalidTestValue("getParagraphPortions", "storage", paramStorage);
	utils->initialize("getParagraphPortions", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->getPortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getParagraphPortions", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getParagraphPortions", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getParagraphPortions", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getParagraphPortions", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getParagraphPortions", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSections) {
	utility::string_t paramName = utils->getTestValue("getSections", "name");
	utility::string_t paramPassword = utils->getTestValue("getSections", "password");
	utility::string_t paramFolder = utils->getTestValue("getSections", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSections", "storage");
	utils->initialize("getSections", "");
	std::shared_ptr<Sections> result = api->getSections(paramName, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getSectionsInvalidName) {
	utility::string_t paramName = utils->getTestValue("getSections", "name");
	utility::string_t paramPassword = utils->getTestValue("getSections", "password");
	utility::string_t paramFolder = utils->getTestValue("getSections", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSections", "storage");
	paramName = utils->getInvalidTestValue("getSections", "name", paramName);
	utils->initialize("getSections", "name", paramName);

	bool failed = true;
	try
	{
		api->getSections(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSections", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSections", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSections", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSections", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSections", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSectionsInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getSections", "name");
	utility::string_t paramPassword = utils->getTestValue("getSections", "password");
	utility::string_t paramFolder = utils->getTestValue("getSections", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSections", "storage");
	paramPassword = utils->getInvalidTestValue("getSections", "password", paramPassword);
	utils->initialize("getSections", "password", paramPassword);

	bool failed = true;
	try
	{
		api->getSections(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSections", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSections", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSections", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSections", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSections", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSectionsInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getSections", "name");
	utility::string_t paramPassword = utils->getTestValue("getSections", "password");
	utility::string_t paramFolder = utils->getTestValue("getSections", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSections", "storage");
	paramFolder = utils->getInvalidTestValue("getSections", "folder", paramFolder);
	utils->initialize("getSections", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->getSections(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSections", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSections", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSections", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSections", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSections", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSectionsInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getSections", "name");
	utility::string_t paramPassword = utils->getTestValue("getSections", "password");
	utility::string_t paramFolder = utils->getTestValue("getSections", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSections", "storage");
	paramStorage = utils->getInvalidTestValue("getSections", "storage", paramStorage);
	utils->initialize("getSections", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->getSections(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSections", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSections", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSections", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSections", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSections", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideAnimation) {
	utility::string_t paramName = utils->getTestValue("getSlideAnimation", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideAnimation", "slideIndex");
	auto paramShapeIndex = utils->getOptionalIntTestValue("getSlideAnimation", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlideAnimation", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideAnimation", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideAnimation", "storage");
	utils->initialize("getSlideAnimation", "");
	std::shared_ptr<SlideAnimation> result = api->getAnimation(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getSlideAnimationInvalidName) {
	utility::string_t paramName = utils->getTestValue("getSlideAnimation", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideAnimation", "slideIndex");
	auto paramShapeIndex = utils->getOptionalIntTestValue("getSlideAnimation", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlideAnimation", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideAnimation", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideAnimation", "storage");
	paramName = utils->getInvalidTestValue("getSlideAnimation", "name", paramName);
	utils->initialize("getSlideAnimation", "name", paramName);

	bool failed = true;
	try
	{
		api->getAnimation(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideAnimation", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideAnimation", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideAnimation", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideAnimation", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideAnimation", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideAnimationInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getSlideAnimation", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideAnimation", "slideIndex");
	auto paramShapeIndex = utils->getOptionalIntTestValue("getSlideAnimation", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlideAnimation", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideAnimation", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideAnimation", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("getSlideAnimation", "slideIndex", paramSlideIndex).value();
	utils->initialize("getSlideAnimation", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->getAnimation(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideAnimation", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideAnimation", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideAnimation", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideAnimation", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideAnimation", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideAnimationInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("getSlideAnimation", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideAnimation", "slideIndex");
	auto paramShapeIndex = utils->getOptionalIntTestValue("getSlideAnimation", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlideAnimation", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideAnimation", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideAnimation", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("getSlideAnimation", "shapeIndex", paramShapeIndex).value();
	utils->initialize("getSlideAnimation", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->getAnimation(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideAnimation", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideAnimation", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideAnimation", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideAnimation", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideAnimation", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideAnimationInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getSlideAnimation", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideAnimation", "slideIndex");
	auto paramShapeIndex = utils->getOptionalIntTestValue("getSlideAnimation", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlideAnimation", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideAnimation", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideAnimation", "storage");
	paramPassword = utils->getInvalidTestValue("getSlideAnimation", "password", paramPassword);
	utils->initialize("getSlideAnimation", "password", paramPassword);

	bool failed = true;
	try
	{
		api->getAnimation(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideAnimation", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideAnimation", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideAnimation", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideAnimation", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideAnimation", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideAnimationInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getSlideAnimation", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideAnimation", "slideIndex");
	auto paramShapeIndex = utils->getOptionalIntTestValue("getSlideAnimation", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlideAnimation", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideAnimation", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideAnimation", "storage");
	paramFolder = utils->getInvalidTestValue("getSlideAnimation", "folder", paramFolder);
	utils->initialize("getSlideAnimation", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->getAnimation(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideAnimation", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideAnimation", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideAnimation", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideAnimation", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideAnimation", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideAnimationInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getSlideAnimation", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideAnimation", "slideIndex");
	auto paramShapeIndex = utils->getOptionalIntTestValue("getSlideAnimation", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlideAnimation", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideAnimation", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideAnimation", "storage");
	paramStorage = utils->getInvalidTestValue("getSlideAnimation", "storage", paramStorage);
	utils->initialize("getSlideAnimation", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->getAnimation(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideAnimation", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideAnimation", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideAnimation", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideAnimation", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideAnimation", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideHeaderFooter) {
	utility::string_t paramName = utils->getTestValue("getSlideHeaderFooter", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideHeaderFooter", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlideHeaderFooter", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideHeaderFooter", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideHeaderFooter", "storage");
	utils->initialize("getSlideHeaderFooter", "");
	std::shared_ptr<HeaderFooter> result = api->getSlideHeaderFooter(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getSlideHeaderFooterInvalidName) {
	utility::string_t paramName = utils->getTestValue("getSlideHeaderFooter", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideHeaderFooter", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlideHeaderFooter", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideHeaderFooter", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideHeaderFooter", "storage");
	paramName = utils->getInvalidTestValue("getSlideHeaderFooter", "name", paramName);
	utils->initialize("getSlideHeaderFooter", "name", paramName);

	bool failed = true;
	try
	{
		api->getSlideHeaderFooter(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideHeaderFooter", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideHeaderFooter", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideHeaderFooter", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideHeaderFooter", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideHeaderFooter", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideHeaderFooterInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getSlideHeaderFooter", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideHeaderFooter", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlideHeaderFooter", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideHeaderFooter", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideHeaderFooter", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("getSlideHeaderFooter", "slideIndex", paramSlideIndex).value();
	utils->initialize("getSlideHeaderFooter", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->getSlideHeaderFooter(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideHeaderFooter", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideHeaderFooter", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideHeaderFooter", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideHeaderFooter", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideHeaderFooter", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideHeaderFooterInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getSlideHeaderFooter", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideHeaderFooter", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlideHeaderFooter", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideHeaderFooter", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideHeaderFooter", "storage");
	paramPassword = utils->getInvalidTestValue("getSlideHeaderFooter", "password", paramPassword);
	utils->initialize("getSlideHeaderFooter", "password", paramPassword);

	bool failed = true;
	try
	{
		api->getSlideHeaderFooter(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideHeaderFooter", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideHeaderFooter", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideHeaderFooter", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideHeaderFooter", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideHeaderFooter", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideHeaderFooterInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getSlideHeaderFooter", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideHeaderFooter", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlideHeaderFooter", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideHeaderFooter", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideHeaderFooter", "storage");
	paramFolder = utils->getInvalidTestValue("getSlideHeaderFooter", "folder", paramFolder);
	utils->initialize("getSlideHeaderFooter", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->getSlideHeaderFooter(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideHeaderFooter", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideHeaderFooter", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideHeaderFooter", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideHeaderFooter", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideHeaderFooter", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideHeaderFooterInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getSlideHeaderFooter", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideHeaderFooter", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlideHeaderFooter", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideHeaderFooter", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideHeaderFooter", "storage");
	paramStorage = utils->getInvalidTestValue("getSlideHeaderFooter", "storage", paramStorage);
	utils->initialize("getSlideHeaderFooter", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->getSlideHeaderFooter(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideHeaderFooter", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideHeaderFooter", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideHeaderFooter", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideHeaderFooter", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideHeaderFooter", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideShape) {
	utility::string_t paramName = utils->getTestValue("getSlideShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getSlideShape", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlideShape", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideShape", "storage");
	utils->initialize("getSlideShape", "");
	std::shared_ptr<ShapeBase> result = api->getShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getSlideShapeInvalidName) {
	utility::string_t paramName = utils->getTestValue("getSlideShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getSlideShape", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlideShape", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideShape", "storage");
	paramName = utils->getInvalidTestValue("getSlideShape", "name", paramName);
	utils->initialize("getSlideShape", "name", paramName);

	bool failed = true;
	try
	{
		api->getShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideShape", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideShape", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideShape", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideShape", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideShape", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideShapeInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getSlideShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getSlideShape", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlideShape", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideShape", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("getSlideShape", "slideIndex", paramSlideIndex).value();
	utils->initialize("getSlideShape", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->getShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideShape", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideShape", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideShape", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideShape", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideShape", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideShapeInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("getSlideShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getSlideShape", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlideShape", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideShape", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("getSlideShape", "shapeIndex", paramShapeIndex).value();
	utils->initialize("getSlideShape", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->getShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideShape", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideShape", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideShape", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideShape", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideShape", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideShapeInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getSlideShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getSlideShape", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlideShape", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideShape", "storage");
	paramPassword = utils->getInvalidTestValue("getSlideShape", "password", paramPassword);
	utils->initialize("getSlideShape", "password", paramPassword);

	bool failed = true;
	try
	{
		api->getShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideShape", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideShape", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideShape", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideShape", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideShape", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideShapeInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getSlideShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getSlideShape", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlideShape", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideShape", "storage");
	paramFolder = utils->getInvalidTestValue("getSlideShape", "folder", paramFolder);
	utils->initialize("getSlideShape", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->getShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideShape", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideShape", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideShape", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideShape", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideShape", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideShapeInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getSlideShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getSlideShape", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlideShape", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideShape", "storage");
	paramStorage = utils->getInvalidTestValue("getSlideShape", "storage", paramStorage);
	utils->initialize("getSlideShape", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->getShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideShape", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideShape", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideShape", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideShape", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideShape", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideShapeParagraph) {
	utility::string_t paramName = utils->getTestValue("getSlideShapeParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideShapeParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getSlideShapeParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getSlideShapeParagraph", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlideShapeParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideShapeParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideShapeParagraph", "storage");
	utils->initialize("getSlideShapeParagraph", "");
	std::shared_ptr<Paragraph> result = api->getParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getSlideShapeParagraphInvalidName) {
	utility::string_t paramName = utils->getTestValue("getSlideShapeParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideShapeParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getSlideShapeParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getSlideShapeParagraph", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlideShapeParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideShapeParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideShapeParagraph", "storage");
	paramName = utils->getInvalidTestValue("getSlideShapeParagraph", "name", paramName);
	utils->initialize("getSlideShapeParagraph", "name", paramName);

	bool failed = true;
	try
	{
		api->getParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideShapeParagraph", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideShapeParagraph", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideShapeParagraph", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideShapeParagraph", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideShapeParagraph", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideShapeParagraphInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getSlideShapeParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideShapeParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getSlideShapeParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getSlideShapeParagraph", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlideShapeParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideShapeParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideShapeParagraph", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("getSlideShapeParagraph", "slideIndex", paramSlideIndex).value();
	utils->initialize("getSlideShapeParagraph", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->getParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideShapeParagraph", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideShapeParagraph", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideShapeParagraph", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideShapeParagraph", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideShapeParagraph", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideShapeParagraphInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("getSlideShapeParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideShapeParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getSlideShapeParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getSlideShapeParagraph", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlideShapeParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideShapeParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideShapeParagraph", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("getSlideShapeParagraph", "shapeIndex", paramShapeIndex).value();
	utils->initialize("getSlideShapeParagraph", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->getParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideShapeParagraph", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideShapeParagraph", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideShapeParagraph", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideShapeParagraph", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideShapeParagraph", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideShapeParagraphInvalidParagraphIndex) {
	utility::string_t paramName = utils->getTestValue("getSlideShapeParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideShapeParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getSlideShapeParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getSlideShapeParagraph", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlideShapeParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideShapeParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideShapeParagraph", "storage");
	paramParagraphIndex = utils->getInvalidIntTestValue("getSlideShapeParagraph", "paragraphIndex", paramParagraphIndex).value();
	utils->initialize("getSlideShapeParagraph", "paragraphIndex", paramParagraphIndex);

	bool failed = true;
	try
	{
		api->getParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideShapeParagraph", "paragraphIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideShapeParagraph", "paragraphIndex", paramParagraphIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideShapeParagraph", "paragraphIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideShapeParagraph", "paragraphIndex", paramParagraphIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideShapeParagraph", "paragraphIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideShapeParagraphInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getSlideShapeParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideShapeParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getSlideShapeParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getSlideShapeParagraph", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlideShapeParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideShapeParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideShapeParagraph", "storage");
	paramPassword = utils->getInvalidTestValue("getSlideShapeParagraph", "password", paramPassword);
	utils->initialize("getSlideShapeParagraph", "password", paramPassword);

	bool failed = true;
	try
	{
		api->getParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideShapeParagraph", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideShapeParagraph", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideShapeParagraph", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideShapeParagraph", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideShapeParagraph", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideShapeParagraphInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getSlideShapeParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideShapeParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getSlideShapeParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getSlideShapeParagraph", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlideShapeParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideShapeParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideShapeParagraph", "storage");
	paramFolder = utils->getInvalidTestValue("getSlideShapeParagraph", "folder", paramFolder);
	utils->initialize("getSlideShapeParagraph", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->getParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideShapeParagraph", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideShapeParagraph", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideShapeParagraph", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideShapeParagraph", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideShapeParagraph", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideShapeParagraphInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getSlideShapeParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideShapeParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getSlideShapeParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getSlideShapeParagraph", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlideShapeParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideShapeParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideShapeParagraph", "storage");
	paramStorage = utils->getInvalidTestValue("getSlideShapeParagraph", "storage", paramStorage);
	utils->initialize("getSlideShapeParagraph", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->getParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideShapeParagraph", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideShapeParagraph", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideShapeParagraph", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideShapeParagraph", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideShapeParagraph", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideShapeParagraphs) {
	utility::string_t paramName = utils->getTestValue("getSlideShapeParagraphs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideShapeParagraphs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getSlideShapeParagraphs", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlideShapeParagraphs", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideShapeParagraphs", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideShapeParagraphs", "storage");
	utils->initialize("getSlideShapeParagraphs", "");
	std::shared_ptr<Paragraphs> result = api->getParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getSlideShapeParagraphsInvalidName) {
	utility::string_t paramName = utils->getTestValue("getSlideShapeParagraphs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideShapeParagraphs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getSlideShapeParagraphs", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlideShapeParagraphs", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideShapeParagraphs", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideShapeParagraphs", "storage");
	paramName = utils->getInvalidTestValue("getSlideShapeParagraphs", "name", paramName);
	utils->initialize("getSlideShapeParagraphs", "name", paramName);

	bool failed = true;
	try
	{
		api->getParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideShapeParagraphs", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideShapeParagraphs", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideShapeParagraphs", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideShapeParagraphs", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideShapeParagraphs", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideShapeParagraphsInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getSlideShapeParagraphs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideShapeParagraphs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getSlideShapeParagraphs", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlideShapeParagraphs", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideShapeParagraphs", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideShapeParagraphs", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("getSlideShapeParagraphs", "slideIndex", paramSlideIndex).value();
	utils->initialize("getSlideShapeParagraphs", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->getParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideShapeParagraphs", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideShapeParagraphs", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideShapeParagraphs", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideShapeParagraphs", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideShapeParagraphs", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideShapeParagraphsInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("getSlideShapeParagraphs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideShapeParagraphs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getSlideShapeParagraphs", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlideShapeParagraphs", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideShapeParagraphs", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideShapeParagraphs", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("getSlideShapeParagraphs", "shapeIndex", paramShapeIndex).value();
	utils->initialize("getSlideShapeParagraphs", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->getParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideShapeParagraphs", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideShapeParagraphs", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideShapeParagraphs", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideShapeParagraphs", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideShapeParagraphs", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideShapeParagraphsInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getSlideShapeParagraphs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideShapeParagraphs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getSlideShapeParagraphs", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlideShapeParagraphs", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideShapeParagraphs", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideShapeParagraphs", "storage");
	paramPassword = utils->getInvalidTestValue("getSlideShapeParagraphs", "password", paramPassword);
	utils->initialize("getSlideShapeParagraphs", "password", paramPassword);

	bool failed = true;
	try
	{
		api->getParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideShapeParagraphs", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideShapeParagraphs", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideShapeParagraphs", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideShapeParagraphs", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideShapeParagraphs", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideShapeParagraphsInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getSlideShapeParagraphs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideShapeParagraphs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getSlideShapeParagraphs", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlideShapeParagraphs", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideShapeParagraphs", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideShapeParagraphs", "storage");
	paramFolder = utils->getInvalidTestValue("getSlideShapeParagraphs", "folder", paramFolder);
	utils->initialize("getSlideShapeParagraphs", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->getParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideShapeParagraphs", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideShapeParagraphs", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideShapeParagraphs", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideShapeParagraphs", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideShapeParagraphs", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideShapeParagraphsInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getSlideShapeParagraphs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideShapeParagraphs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getSlideShapeParagraphs", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlideShapeParagraphs", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideShapeParagraphs", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideShapeParagraphs", "storage");
	paramStorage = utils->getInvalidTestValue("getSlideShapeParagraphs", "storage", paramStorage);
	utils->initialize("getSlideShapeParagraphs", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->getParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideShapeParagraphs", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideShapeParagraphs", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideShapeParagraphs", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideShapeParagraphs", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideShapeParagraphs", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideShapes) {
	utility::string_t paramName = utils->getTestValue("getSlideShapes", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideShapes", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlideShapes", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideShapes", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideShapes", "storage");
	utils->initialize("getSlideShapes", "");
	std::shared_ptr<Shapes> result = api->getShapes(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getSlideShapesInvalidName) {
	utility::string_t paramName = utils->getTestValue("getSlideShapes", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideShapes", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlideShapes", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideShapes", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideShapes", "storage");
	paramName = utils->getInvalidTestValue("getSlideShapes", "name", paramName);
	utils->initialize("getSlideShapes", "name", paramName);

	bool failed = true;
	try
	{
		api->getShapes(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideShapes", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideShapes", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideShapes", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideShapes", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideShapes", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideShapesInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getSlideShapes", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideShapes", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlideShapes", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideShapes", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideShapes", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("getSlideShapes", "slideIndex", paramSlideIndex).value();
	utils->initialize("getSlideShapes", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->getShapes(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideShapes", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideShapes", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideShapes", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideShapes", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideShapes", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideShapesInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getSlideShapes", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideShapes", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlideShapes", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideShapes", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideShapes", "storage");
	paramPassword = utils->getInvalidTestValue("getSlideShapes", "password", paramPassword);
	utils->initialize("getSlideShapes", "password", paramPassword);

	bool failed = true;
	try
	{
		api->getShapes(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideShapes", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideShapes", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideShapes", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideShapes", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideShapes", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideShapesInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getSlideShapes", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideShapes", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlideShapes", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideShapes", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideShapes", "storage");
	paramFolder = utils->getInvalidTestValue("getSlideShapes", "folder", paramFolder);
	utils->initialize("getSlideShapes", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->getShapes(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideShapes", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideShapes", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideShapes", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideShapes", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideShapes", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideShapesInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getSlideShapes", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideShapes", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlideShapes", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideShapes", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideShapes", "storage");
	paramStorage = utils->getInvalidTestValue("getSlideShapes", "storage", paramStorage);
	utils->initialize("getSlideShapes", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->getShapes(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideShapes", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideShapes", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideShapes", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideShapes", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideShapes", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideSubshape) {
	utility::string_t paramName = utils->getTestValue("getSlideSubshape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideSubshape", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("getSlideSubshape", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("getSlideSubshape", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlideSubshape", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideSubshape", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideSubshape", "storage");
	utils->initialize("getSlideSubshape", "");
	std::shared_ptr<ShapeBase> result = api->getSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getSlideSubshapeInvalidName) {
	utility::string_t paramName = utils->getTestValue("getSlideSubshape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideSubshape", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("getSlideSubshape", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("getSlideSubshape", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlideSubshape", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideSubshape", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideSubshape", "storage");
	paramName = utils->getInvalidTestValue("getSlideSubshape", "name", paramName);
	utils->initialize("getSlideSubshape", "name", paramName);

	bool failed = true;
	try
	{
		api->getSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideSubshape", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideSubshape", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideSubshape", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideSubshape", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideSubshape", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideSubshapeInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getSlideSubshape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideSubshape", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("getSlideSubshape", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("getSlideSubshape", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlideSubshape", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideSubshape", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideSubshape", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("getSlideSubshape", "slideIndex", paramSlideIndex).value();
	utils->initialize("getSlideSubshape", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->getSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideSubshape", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideSubshape", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideSubshape", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideSubshape", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideSubshape", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideSubshapeInvalidPath) {
	utility::string_t paramName = utils->getTestValue("getSlideSubshape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideSubshape", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("getSlideSubshape", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("getSlideSubshape", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlideSubshape", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideSubshape", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideSubshape", "storage");
	paramPath = utils->getInvalidTestValue("getSlideSubshape", "path", paramPath);
	utils->initialize("getSlideSubshape", "path", paramPath);

	bool failed = true;
	try
	{
		api->getSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideSubshape", "path");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideSubshape", "path", paramPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideSubshape", "path");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideSubshape", "path", paramPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideSubshape", "path"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideSubshapeInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("getSlideSubshape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideSubshape", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("getSlideSubshape", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("getSlideSubshape", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlideSubshape", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideSubshape", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideSubshape", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("getSlideSubshape", "shapeIndex", paramShapeIndex).value();
	utils->initialize("getSlideSubshape", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->getSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideSubshape", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideSubshape", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideSubshape", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideSubshape", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideSubshape", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideSubshapeInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getSlideSubshape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideSubshape", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("getSlideSubshape", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("getSlideSubshape", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlideSubshape", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideSubshape", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideSubshape", "storage");
	paramPassword = utils->getInvalidTestValue("getSlideSubshape", "password", paramPassword);
	utils->initialize("getSlideSubshape", "password", paramPassword);

	bool failed = true;
	try
	{
		api->getSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideSubshape", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideSubshape", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideSubshape", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideSubshape", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideSubshape", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideSubshapeInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getSlideSubshape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideSubshape", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("getSlideSubshape", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("getSlideSubshape", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlideSubshape", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideSubshape", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideSubshape", "storage");
	paramFolder = utils->getInvalidTestValue("getSlideSubshape", "folder", paramFolder);
	utils->initialize("getSlideSubshape", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->getSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideSubshape", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideSubshape", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideSubshape", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideSubshape", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideSubshape", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideSubshapeInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getSlideSubshape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideSubshape", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("getSlideSubshape", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("getSlideSubshape", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlideSubshape", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideSubshape", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideSubshape", "storage");
	paramStorage = utils->getInvalidTestValue("getSlideSubshape", "storage", paramStorage);
	utils->initialize("getSlideSubshape", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->getSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideSubshape", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideSubshape", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideSubshape", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideSubshape", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideSubshape", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideSubshapeParagraph) {
	utility::string_t paramName = utils->getTestValue("getSlideSubshapeParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideSubshapeParagraph", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("getSlideSubshapeParagraph", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("getSlideSubshapeParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getSlideSubshapeParagraph", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlideSubshapeParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideSubshapeParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideSubshapeParagraph", "storage");
	utils->initialize("getSlideSubshapeParagraph", "");
	std::shared_ptr<Paragraph> result = api->getSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getSlideSubshapeParagraphInvalidName) {
	utility::string_t paramName = utils->getTestValue("getSlideSubshapeParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideSubshapeParagraph", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("getSlideSubshapeParagraph", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("getSlideSubshapeParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getSlideSubshapeParagraph", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlideSubshapeParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideSubshapeParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideSubshapeParagraph", "storage");
	paramName = utils->getInvalidTestValue("getSlideSubshapeParagraph", "name", paramName);
	utils->initialize("getSlideSubshapeParagraph", "name", paramName);

	bool failed = true;
	try
	{
		api->getSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideSubshapeParagraph", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideSubshapeParagraph", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideSubshapeParagraph", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideSubshapeParagraph", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideSubshapeParagraph", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideSubshapeParagraphInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getSlideSubshapeParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideSubshapeParagraph", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("getSlideSubshapeParagraph", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("getSlideSubshapeParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getSlideSubshapeParagraph", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlideSubshapeParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideSubshapeParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideSubshapeParagraph", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("getSlideSubshapeParagraph", "slideIndex", paramSlideIndex).value();
	utils->initialize("getSlideSubshapeParagraph", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->getSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideSubshapeParagraph", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideSubshapeParagraph", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideSubshapeParagraph", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideSubshapeParagraph", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideSubshapeParagraph", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideSubshapeParagraphInvalidPath) {
	utility::string_t paramName = utils->getTestValue("getSlideSubshapeParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideSubshapeParagraph", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("getSlideSubshapeParagraph", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("getSlideSubshapeParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getSlideSubshapeParagraph", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlideSubshapeParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideSubshapeParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideSubshapeParagraph", "storage");
	paramPath = utils->getInvalidTestValue("getSlideSubshapeParagraph", "path", paramPath);
	utils->initialize("getSlideSubshapeParagraph", "path", paramPath);

	bool failed = true;
	try
	{
		api->getSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideSubshapeParagraph", "path");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideSubshapeParagraph", "path", paramPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideSubshapeParagraph", "path");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideSubshapeParagraph", "path", paramPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideSubshapeParagraph", "path"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideSubshapeParagraphInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("getSlideSubshapeParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideSubshapeParagraph", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("getSlideSubshapeParagraph", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("getSlideSubshapeParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getSlideSubshapeParagraph", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlideSubshapeParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideSubshapeParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideSubshapeParagraph", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("getSlideSubshapeParagraph", "shapeIndex", paramShapeIndex).value();
	utils->initialize("getSlideSubshapeParagraph", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->getSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideSubshapeParagraph", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideSubshapeParagraph", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideSubshapeParagraph", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideSubshapeParagraph", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideSubshapeParagraph", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideSubshapeParagraphInvalidParagraphIndex) {
	utility::string_t paramName = utils->getTestValue("getSlideSubshapeParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideSubshapeParagraph", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("getSlideSubshapeParagraph", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("getSlideSubshapeParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getSlideSubshapeParagraph", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlideSubshapeParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideSubshapeParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideSubshapeParagraph", "storage");
	paramParagraphIndex = utils->getInvalidIntTestValue("getSlideSubshapeParagraph", "paragraphIndex", paramParagraphIndex).value();
	utils->initialize("getSlideSubshapeParagraph", "paragraphIndex", paramParagraphIndex);

	bool failed = true;
	try
	{
		api->getSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideSubshapeParagraph", "paragraphIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideSubshapeParagraph", "paragraphIndex", paramParagraphIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideSubshapeParagraph", "paragraphIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideSubshapeParagraph", "paragraphIndex", paramParagraphIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideSubshapeParagraph", "paragraphIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideSubshapeParagraphInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getSlideSubshapeParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideSubshapeParagraph", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("getSlideSubshapeParagraph", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("getSlideSubshapeParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getSlideSubshapeParagraph", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlideSubshapeParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideSubshapeParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideSubshapeParagraph", "storage");
	paramPassword = utils->getInvalidTestValue("getSlideSubshapeParagraph", "password", paramPassword);
	utils->initialize("getSlideSubshapeParagraph", "password", paramPassword);

	bool failed = true;
	try
	{
		api->getSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideSubshapeParagraph", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideSubshapeParagraph", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideSubshapeParagraph", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideSubshapeParagraph", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideSubshapeParagraph", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideSubshapeParagraphInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getSlideSubshapeParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideSubshapeParagraph", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("getSlideSubshapeParagraph", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("getSlideSubshapeParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getSlideSubshapeParagraph", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlideSubshapeParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideSubshapeParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideSubshapeParagraph", "storage");
	paramFolder = utils->getInvalidTestValue("getSlideSubshapeParagraph", "folder", paramFolder);
	utils->initialize("getSlideSubshapeParagraph", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->getSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideSubshapeParagraph", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideSubshapeParagraph", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideSubshapeParagraph", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideSubshapeParagraph", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideSubshapeParagraph", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideSubshapeParagraphInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getSlideSubshapeParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideSubshapeParagraph", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("getSlideSubshapeParagraph", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("getSlideSubshapeParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getSlideSubshapeParagraph", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlideSubshapeParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideSubshapeParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideSubshapeParagraph", "storage");
	paramStorage = utils->getInvalidTestValue("getSlideSubshapeParagraph", "storage", paramStorage);
	utils->initialize("getSlideSubshapeParagraph", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->getSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideSubshapeParagraph", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideSubshapeParagraph", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideSubshapeParagraph", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideSubshapeParagraph", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideSubshapeParagraph", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideSubshapeParagraphs) {
	utility::string_t paramName = utils->getTestValue("getSlideSubshapeParagraphs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideSubshapeParagraphs", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("getSlideSubshapeParagraphs", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("getSlideSubshapeParagraphs", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlideSubshapeParagraphs", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideSubshapeParagraphs", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideSubshapeParagraphs", "storage");
	utils->initialize("getSlideSubshapeParagraphs", "");
	std::shared_ptr<Paragraphs> result = api->getSubshapeParagraphs(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getSlideSubshapeParagraphsInvalidName) {
	utility::string_t paramName = utils->getTestValue("getSlideSubshapeParagraphs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideSubshapeParagraphs", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("getSlideSubshapeParagraphs", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("getSlideSubshapeParagraphs", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlideSubshapeParagraphs", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideSubshapeParagraphs", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideSubshapeParagraphs", "storage");
	paramName = utils->getInvalidTestValue("getSlideSubshapeParagraphs", "name", paramName);
	utils->initialize("getSlideSubshapeParagraphs", "name", paramName);

	bool failed = true;
	try
	{
		api->getSubshapeParagraphs(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideSubshapeParagraphs", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideSubshapeParagraphs", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideSubshapeParagraphs", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideSubshapeParagraphs", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideSubshapeParagraphs", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideSubshapeParagraphsInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getSlideSubshapeParagraphs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideSubshapeParagraphs", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("getSlideSubshapeParagraphs", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("getSlideSubshapeParagraphs", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlideSubshapeParagraphs", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideSubshapeParagraphs", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideSubshapeParagraphs", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("getSlideSubshapeParagraphs", "slideIndex", paramSlideIndex).value();
	utils->initialize("getSlideSubshapeParagraphs", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->getSubshapeParagraphs(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideSubshapeParagraphs", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideSubshapeParagraphs", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideSubshapeParagraphs", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideSubshapeParagraphs", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideSubshapeParagraphs", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideSubshapeParagraphsInvalidPath) {
	utility::string_t paramName = utils->getTestValue("getSlideSubshapeParagraphs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideSubshapeParagraphs", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("getSlideSubshapeParagraphs", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("getSlideSubshapeParagraphs", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlideSubshapeParagraphs", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideSubshapeParagraphs", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideSubshapeParagraphs", "storage");
	paramPath = utils->getInvalidTestValue("getSlideSubshapeParagraphs", "path", paramPath);
	utils->initialize("getSlideSubshapeParagraphs", "path", paramPath);

	bool failed = true;
	try
	{
		api->getSubshapeParagraphs(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideSubshapeParagraphs", "path");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideSubshapeParagraphs", "path", paramPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideSubshapeParagraphs", "path");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideSubshapeParagraphs", "path", paramPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideSubshapeParagraphs", "path"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideSubshapeParagraphsInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("getSlideSubshapeParagraphs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideSubshapeParagraphs", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("getSlideSubshapeParagraphs", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("getSlideSubshapeParagraphs", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlideSubshapeParagraphs", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideSubshapeParagraphs", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideSubshapeParagraphs", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("getSlideSubshapeParagraphs", "shapeIndex", paramShapeIndex).value();
	utils->initialize("getSlideSubshapeParagraphs", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->getSubshapeParagraphs(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideSubshapeParagraphs", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideSubshapeParagraphs", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideSubshapeParagraphs", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideSubshapeParagraphs", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideSubshapeParagraphs", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideSubshapeParagraphsInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getSlideSubshapeParagraphs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideSubshapeParagraphs", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("getSlideSubshapeParagraphs", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("getSlideSubshapeParagraphs", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlideSubshapeParagraphs", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideSubshapeParagraphs", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideSubshapeParagraphs", "storage");
	paramPassword = utils->getInvalidTestValue("getSlideSubshapeParagraphs", "password", paramPassword);
	utils->initialize("getSlideSubshapeParagraphs", "password", paramPassword);

	bool failed = true;
	try
	{
		api->getSubshapeParagraphs(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideSubshapeParagraphs", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideSubshapeParagraphs", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideSubshapeParagraphs", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideSubshapeParagraphs", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideSubshapeParagraphs", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideSubshapeParagraphsInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getSlideSubshapeParagraphs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideSubshapeParagraphs", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("getSlideSubshapeParagraphs", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("getSlideSubshapeParagraphs", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlideSubshapeParagraphs", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideSubshapeParagraphs", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideSubshapeParagraphs", "storage");
	paramFolder = utils->getInvalidTestValue("getSlideSubshapeParagraphs", "folder", paramFolder);
	utils->initialize("getSlideSubshapeParagraphs", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->getSubshapeParagraphs(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideSubshapeParagraphs", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideSubshapeParagraphs", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideSubshapeParagraphs", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideSubshapeParagraphs", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideSubshapeParagraphs", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideSubshapeParagraphsInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getSlideSubshapeParagraphs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideSubshapeParagraphs", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("getSlideSubshapeParagraphs", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("getSlideSubshapeParagraphs", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlideSubshapeParagraphs", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideSubshapeParagraphs", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideSubshapeParagraphs", "storage");
	paramStorage = utils->getInvalidTestValue("getSlideSubshapeParagraphs", "storage", paramStorage);
	utils->initialize("getSlideSubshapeParagraphs", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->getSubshapeParagraphs(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideSubshapeParagraphs", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideSubshapeParagraphs", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideSubshapeParagraphs", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideSubshapeParagraphs", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideSubshapeParagraphs", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideSubshapes) {
	utility::string_t paramName = utils->getTestValue("getSlideSubshapes", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideSubshapes", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("getSlideSubshapes", "path");
	utility::string_t paramPassword = utils->getTestValue("getSlideSubshapes", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideSubshapes", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideSubshapes", "storage");
	utils->initialize("getSlideSubshapes", "");
	std::shared_ptr<Shapes> result = api->getSubshapes(paramName, paramSlideIndex, paramPath, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getSlideSubshapesInvalidName) {
	utility::string_t paramName = utils->getTestValue("getSlideSubshapes", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideSubshapes", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("getSlideSubshapes", "path");
	utility::string_t paramPassword = utils->getTestValue("getSlideSubshapes", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideSubshapes", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideSubshapes", "storage");
	paramName = utils->getInvalidTestValue("getSlideSubshapes", "name", paramName);
	utils->initialize("getSlideSubshapes", "name", paramName);

	bool failed = true;
	try
	{
		api->getSubshapes(paramName, paramSlideIndex, paramPath, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideSubshapes", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideSubshapes", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideSubshapes", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideSubshapes", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideSubshapes", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideSubshapesInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getSlideSubshapes", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideSubshapes", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("getSlideSubshapes", "path");
	utility::string_t paramPassword = utils->getTestValue("getSlideSubshapes", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideSubshapes", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideSubshapes", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("getSlideSubshapes", "slideIndex", paramSlideIndex).value();
	utils->initialize("getSlideSubshapes", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->getSubshapes(paramName, paramSlideIndex, paramPath, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideSubshapes", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideSubshapes", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideSubshapes", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideSubshapes", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideSubshapes", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideSubshapesInvalidPath) {
	utility::string_t paramName = utils->getTestValue("getSlideSubshapes", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideSubshapes", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("getSlideSubshapes", "path");
	utility::string_t paramPassword = utils->getTestValue("getSlideSubshapes", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideSubshapes", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideSubshapes", "storage");
	paramPath = utils->getInvalidTestValue("getSlideSubshapes", "path", paramPath);
	utils->initialize("getSlideSubshapes", "path", paramPath);

	bool failed = true;
	try
	{
		api->getSubshapes(paramName, paramSlideIndex, paramPath, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideSubshapes", "path");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideSubshapes", "path", paramPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideSubshapes", "path");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideSubshapes", "path", paramPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideSubshapes", "path"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideSubshapesInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getSlideSubshapes", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideSubshapes", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("getSlideSubshapes", "path");
	utility::string_t paramPassword = utils->getTestValue("getSlideSubshapes", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideSubshapes", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideSubshapes", "storage");
	paramPassword = utils->getInvalidTestValue("getSlideSubshapes", "password", paramPassword);
	utils->initialize("getSlideSubshapes", "password", paramPassword);

	bool failed = true;
	try
	{
		api->getSubshapes(paramName, paramSlideIndex, paramPath, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideSubshapes", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideSubshapes", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideSubshapes", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideSubshapes", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideSubshapes", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideSubshapesInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getSlideSubshapes", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideSubshapes", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("getSlideSubshapes", "path");
	utility::string_t paramPassword = utils->getTestValue("getSlideSubshapes", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideSubshapes", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideSubshapes", "storage");
	paramFolder = utils->getInvalidTestValue("getSlideSubshapes", "folder", paramFolder);
	utils->initialize("getSlideSubshapes", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->getSubshapes(paramName, paramSlideIndex, paramPath, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideSubshapes", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideSubshapes", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideSubshapes", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideSubshapes", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideSubshapes", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideSubshapesInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getSlideSubshapes", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideSubshapes", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("getSlideSubshapes", "path");
	utility::string_t paramPassword = utils->getTestValue("getSlideSubshapes", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideSubshapes", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideSubshapes", "storage");
	paramStorage = utils->getInvalidTestValue("getSlideSubshapes", "storage", paramStorage);
	utils->initialize("getSlideSubshapes", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->getSubshapes(paramName, paramSlideIndex, paramPath, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideSubshapes", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideSubshapes", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideSubshapes", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideSubshapes", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideSubshapes", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesApiInfo) {
	utils->initialize("getSlidesApiInfo", "");
	std::shared_ptr<ApiInfo> result = api->getApiInfo().get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getSlidesDocument) {
	utility::string_t paramName = utils->getTestValue("getSlidesDocument", "name");
	utility::string_t paramPassword = utils->getTestValue("getSlidesDocument", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesDocument", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesDocument", "storage");
	utils->initialize("getSlidesDocument", "");
	std::shared_ptr<Document> result = api->getPresentation(paramName, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getSlidesDocumentInvalidName) {
	utility::string_t paramName = utils->getTestValue("getSlidesDocument", "name");
	utility::string_t paramPassword = utils->getTestValue("getSlidesDocument", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesDocument", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesDocument", "storage");
	paramName = utils->getInvalidTestValue("getSlidesDocument", "name", paramName);
	utils->initialize("getSlidesDocument", "name", paramName);

	bool failed = true;
	try
	{
		api->getPresentation(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesDocument", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesDocument", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesDocument", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesDocument", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesDocument", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesDocumentInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getSlidesDocument", "name");
	utility::string_t paramPassword = utils->getTestValue("getSlidesDocument", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesDocument", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesDocument", "storage");
	paramPassword = utils->getInvalidTestValue("getSlidesDocument", "password", paramPassword);
	utils->initialize("getSlidesDocument", "password", paramPassword);

	bool failed = true;
	try
	{
		api->getPresentation(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesDocument", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesDocument", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesDocument", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesDocument", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesDocument", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesDocumentInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getSlidesDocument", "name");
	utility::string_t paramPassword = utils->getTestValue("getSlidesDocument", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesDocument", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesDocument", "storage");
	paramFolder = utils->getInvalidTestValue("getSlidesDocument", "folder", paramFolder);
	utils->initialize("getSlidesDocument", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->getPresentation(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesDocument", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesDocument", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesDocument", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesDocument", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesDocument", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesDocumentInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getSlidesDocument", "name");
	utility::string_t paramPassword = utils->getTestValue("getSlidesDocument", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesDocument", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesDocument", "storage");
	paramStorage = utils->getInvalidTestValue("getSlidesDocument", "storage", paramStorage);
	utils->initialize("getSlidesDocument", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->getPresentation(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesDocument", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesDocument", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesDocument", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesDocument", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesDocument", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesDocumentProperties) {
	utility::string_t paramName = utils->getTestValue("getSlidesDocumentProperties", "name");
	utility::string_t paramPassword = utils->getTestValue("getSlidesDocumentProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesDocumentProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesDocumentProperties", "storage");
	utils->initialize("getSlidesDocumentProperties", "");
	std::shared_ptr<DocumentProperties> result = api->getDocumentProperties(paramName, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getSlidesDocumentPropertiesInvalidName) {
	utility::string_t paramName = utils->getTestValue("getSlidesDocumentProperties", "name");
	utility::string_t paramPassword = utils->getTestValue("getSlidesDocumentProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesDocumentProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesDocumentProperties", "storage");
	paramName = utils->getInvalidTestValue("getSlidesDocumentProperties", "name", paramName);
	utils->initialize("getSlidesDocumentProperties", "name", paramName);

	bool failed = true;
	try
	{
		api->getDocumentProperties(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesDocumentProperties", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesDocumentProperties", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesDocumentProperties", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesDocumentProperties", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesDocumentProperties", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesDocumentPropertiesInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getSlidesDocumentProperties", "name");
	utility::string_t paramPassword = utils->getTestValue("getSlidesDocumentProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesDocumentProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesDocumentProperties", "storage");
	paramPassword = utils->getInvalidTestValue("getSlidesDocumentProperties", "password", paramPassword);
	utils->initialize("getSlidesDocumentProperties", "password", paramPassword);

	bool failed = true;
	try
	{
		api->getDocumentProperties(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesDocumentProperties", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesDocumentProperties", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesDocumentProperties", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesDocumentProperties", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesDocumentProperties", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesDocumentPropertiesInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getSlidesDocumentProperties", "name");
	utility::string_t paramPassword = utils->getTestValue("getSlidesDocumentProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesDocumentProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesDocumentProperties", "storage");
	paramFolder = utils->getInvalidTestValue("getSlidesDocumentProperties", "folder", paramFolder);
	utils->initialize("getSlidesDocumentProperties", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->getDocumentProperties(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesDocumentProperties", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesDocumentProperties", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesDocumentProperties", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesDocumentProperties", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesDocumentProperties", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesDocumentPropertiesInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getSlidesDocumentProperties", "name");
	utility::string_t paramPassword = utils->getTestValue("getSlidesDocumentProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesDocumentProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesDocumentProperties", "storage");
	paramStorage = utils->getInvalidTestValue("getSlidesDocumentProperties", "storage", paramStorage);
	utils->initialize("getSlidesDocumentProperties", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->getDocumentProperties(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesDocumentProperties", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesDocumentProperties", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesDocumentProperties", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesDocumentProperties", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesDocumentProperties", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesDocumentProperty) {
	utility::string_t paramName = utils->getTestValue("getSlidesDocumentProperty", "name");
	utility::string_t paramPropertyName = utils->getTestValue("getSlidesDocumentProperty", "propertyName");
	utility::string_t paramPassword = utils->getTestValue("getSlidesDocumentProperty", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesDocumentProperty", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesDocumentProperty", "storage");
	utils->initialize("getSlidesDocumentProperty", "");
	std::shared_ptr<DocumentProperty> result = api->getDocumentProperty(paramName, paramPropertyName, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getSlidesDocumentPropertyInvalidName) {
	utility::string_t paramName = utils->getTestValue("getSlidesDocumentProperty", "name");
	utility::string_t paramPropertyName = utils->getTestValue("getSlidesDocumentProperty", "propertyName");
	utility::string_t paramPassword = utils->getTestValue("getSlidesDocumentProperty", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesDocumentProperty", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesDocumentProperty", "storage");
	paramName = utils->getInvalidTestValue("getSlidesDocumentProperty", "name", paramName);
	utils->initialize("getSlidesDocumentProperty", "name", paramName);

	bool failed = true;
	try
	{
		api->getDocumentProperty(paramName, paramPropertyName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesDocumentProperty", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesDocumentProperty", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesDocumentProperty", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesDocumentProperty", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesDocumentProperty", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesDocumentPropertyInvalidPropertyName) {
	utility::string_t paramName = utils->getTestValue("getSlidesDocumentProperty", "name");
	utility::string_t paramPropertyName = utils->getTestValue("getSlidesDocumentProperty", "propertyName");
	utility::string_t paramPassword = utils->getTestValue("getSlidesDocumentProperty", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesDocumentProperty", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesDocumentProperty", "storage");
	paramPropertyName = utils->getInvalidTestValue("getSlidesDocumentProperty", "propertyName", paramPropertyName);
	utils->initialize("getSlidesDocumentProperty", "propertyName", paramPropertyName);

	bool failed = true;
	try
	{
		api->getDocumentProperty(paramName, paramPropertyName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesDocumentProperty", "propertyName");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesDocumentProperty", "propertyName", paramPropertyName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesDocumentProperty", "propertyName");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesDocumentProperty", "propertyName", paramPropertyName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesDocumentProperty", "propertyName"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesDocumentPropertyInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getSlidesDocumentProperty", "name");
	utility::string_t paramPropertyName = utils->getTestValue("getSlidesDocumentProperty", "propertyName");
	utility::string_t paramPassword = utils->getTestValue("getSlidesDocumentProperty", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesDocumentProperty", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesDocumentProperty", "storage");
	paramPassword = utils->getInvalidTestValue("getSlidesDocumentProperty", "password", paramPassword);
	utils->initialize("getSlidesDocumentProperty", "password", paramPassword);

	bool failed = true;
	try
	{
		api->getDocumentProperty(paramName, paramPropertyName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesDocumentProperty", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesDocumentProperty", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesDocumentProperty", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesDocumentProperty", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesDocumentProperty", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesDocumentPropertyInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getSlidesDocumentProperty", "name");
	utility::string_t paramPropertyName = utils->getTestValue("getSlidesDocumentProperty", "propertyName");
	utility::string_t paramPassword = utils->getTestValue("getSlidesDocumentProperty", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesDocumentProperty", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesDocumentProperty", "storage");
	paramFolder = utils->getInvalidTestValue("getSlidesDocumentProperty", "folder", paramFolder);
	utils->initialize("getSlidesDocumentProperty", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->getDocumentProperty(paramName, paramPropertyName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesDocumentProperty", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesDocumentProperty", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesDocumentProperty", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesDocumentProperty", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesDocumentProperty", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesDocumentPropertyInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getSlidesDocumentProperty", "name");
	utility::string_t paramPropertyName = utils->getTestValue("getSlidesDocumentProperty", "propertyName");
	utility::string_t paramPassword = utils->getTestValue("getSlidesDocumentProperty", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesDocumentProperty", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesDocumentProperty", "storage");
	paramStorage = utils->getInvalidTestValue("getSlidesDocumentProperty", "storage", paramStorage);
	utils->initialize("getSlidesDocumentProperty", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->getDocumentProperty(paramName, paramPropertyName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesDocumentProperty", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesDocumentProperty", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesDocumentProperty", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesDocumentProperty", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesDocumentProperty", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesImageWithDefaultFormat) {
	utility::string_t paramName = utils->getTestValue("getSlidesImageWithDefaultFormat", "name");
	int32_t paramIndex = utils->getIntTestValue("getSlidesImageWithDefaultFormat", "index");
	utility::string_t paramPassword = utils->getTestValue("getSlidesImageWithDefaultFormat", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesImageWithDefaultFormat", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesImageWithDefaultFormat", "storage");
	utils->initialize("getSlidesImageWithDefaultFormat", "");
	HttpContent result = api->downloadImageDefaultFormat(paramName, paramIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, getSlidesImageWithDefaultFormatInvalidName) {
	utility::string_t paramName = utils->getTestValue("getSlidesImageWithDefaultFormat", "name");
	int32_t paramIndex = utils->getIntTestValue("getSlidesImageWithDefaultFormat", "index");
	utility::string_t paramPassword = utils->getTestValue("getSlidesImageWithDefaultFormat", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesImageWithDefaultFormat", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesImageWithDefaultFormat", "storage");
	paramName = utils->getInvalidTestValue("getSlidesImageWithDefaultFormat", "name", paramName);
	utils->initialize("getSlidesImageWithDefaultFormat", "name", paramName);

	bool failed = true;
	try
	{
		api->downloadImageDefaultFormat(paramName, paramIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesImageWithDefaultFormat", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesImageWithDefaultFormat", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesImageWithDefaultFormat", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesImageWithDefaultFormat", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesImageWithDefaultFormat", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesImageWithDefaultFormatInvalidIndex) {
	utility::string_t paramName = utils->getTestValue("getSlidesImageWithDefaultFormat", "name");
	int32_t paramIndex = utils->getIntTestValue("getSlidesImageWithDefaultFormat", "index");
	utility::string_t paramPassword = utils->getTestValue("getSlidesImageWithDefaultFormat", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesImageWithDefaultFormat", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesImageWithDefaultFormat", "storage");
	paramIndex = utils->getInvalidIntTestValue("getSlidesImageWithDefaultFormat", "index", paramIndex).value();
	utils->initialize("getSlidesImageWithDefaultFormat", "index", paramIndex);

	bool failed = true;
	try
	{
		api->downloadImageDefaultFormat(paramName, paramIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesImageWithDefaultFormat", "index");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesImageWithDefaultFormat", "index", paramIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesImageWithDefaultFormat", "index");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesImageWithDefaultFormat", "index", paramIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesImageWithDefaultFormat", "index"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesImageWithDefaultFormatInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getSlidesImageWithDefaultFormat", "name");
	int32_t paramIndex = utils->getIntTestValue("getSlidesImageWithDefaultFormat", "index");
	utility::string_t paramPassword = utils->getTestValue("getSlidesImageWithDefaultFormat", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesImageWithDefaultFormat", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesImageWithDefaultFormat", "storage");
	paramPassword = utils->getInvalidTestValue("getSlidesImageWithDefaultFormat", "password", paramPassword);
	utils->initialize("getSlidesImageWithDefaultFormat", "password", paramPassword);

	bool failed = true;
	try
	{
		api->downloadImageDefaultFormat(paramName, paramIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesImageWithDefaultFormat", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesImageWithDefaultFormat", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesImageWithDefaultFormat", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesImageWithDefaultFormat", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesImageWithDefaultFormat", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesImageWithDefaultFormatInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getSlidesImageWithDefaultFormat", "name");
	int32_t paramIndex = utils->getIntTestValue("getSlidesImageWithDefaultFormat", "index");
	utility::string_t paramPassword = utils->getTestValue("getSlidesImageWithDefaultFormat", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesImageWithDefaultFormat", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesImageWithDefaultFormat", "storage");
	paramFolder = utils->getInvalidTestValue("getSlidesImageWithDefaultFormat", "folder", paramFolder);
	utils->initialize("getSlidesImageWithDefaultFormat", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->downloadImageDefaultFormat(paramName, paramIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesImageWithDefaultFormat", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesImageWithDefaultFormat", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesImageWithDefaultFormat", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesImageWithDefaultFormat", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesImageWithDefaultFormat", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesImageWithDefaultFormatInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getSlidesImageWithDefaultFormat", "name");
	int32_t paramIndex = utils->getIntTestValue("getSlidesImageWithDefaultFormat", "index");
	utility::string_t paramPassword = utils->getTestValue("getSlidesImageWithDefaultFormat", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesImageWithDefaultFormat", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesImageWithDefaultFormat", "storage");
	paramStorage = utils->getInvalidTestValue("getSlidesImageWithDefaultFormat", "storage", paramStorage);
	utils->initialize("getSlidesImageWithDefaultFormat", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->downloadImageDefaultFormat(paramName, paramIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesImageWithDefaultFormat", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesImageWithDefaultFormat", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesImageWithDefaultFormat", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesImageWithDefaultFormat", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesImageWithDefaultFormat", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesImageWithFormat) {
	utility::string_t paramName = utils->getTestValue("getSlidesImageWithFormat", "name");
	int32_t paramIndex = utils->getIntTestValue("getSlidesImageWithFormat", "index");
	utility::string_t paramFormat = utils->getTestValue("getSlidesImageWithFormat", "format");
	utility::string_t paramPassword = utils->getTestValue("getSlidesImageWithFormat", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesImageWithFormat", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesImageWithFormat", "storage");
	utils->initialize("getSlidesImageWithFormat", "");
	HttpContent result = api->downloadImage(paramName, paramIndex, paramFormat, paramPassword, paramFolder, paramStorage).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, getSlidesImageWithFormatInvalidName) {
	utility::string_t paramName = utils->getTestValue("getSlidesImageWithFormat", "name");
	int32_t paramIndex = utils->getIntTestValue("getSlidesImageWithFormat", "index");
	utility::string_t paramFormat = utils->getTestValue("getSlidesImageWithFormat", "format");
	utility::string_t paramPassword = utils->getTestValue("getSlidesImageWithFormat", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesImageWithFormat", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesImageWithFormat", "storage");
	paramName = utils->getInvalidTestValue("getSlidesImageWithFormat", "name", paramName);
	utils->initialize("getSlidesImageWithFormat", "name", paramName);

	bool failed = true;
	try
	{
		api->downloadImage(paramName, paramIndex, paramFormat, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesImageWithFormat", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesImageWithFormat", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesImageWithFormat", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesImageWithFormat", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesImageWithFormat", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesImageWithFormatInvalidIndex) {
	utility::string_t paramName = utils->getTestValue("getSlidesImageWithFormat", "name");
	int32_t paramIndex = utils->getIntTestValue("getSlidesImageWithFormat", "index");
	utility::string_t paramFormat = utils->getTestValue("getSlidesImageWithFormat", "format");
	utility::string_t paramPassword = utils->getTestValue("getSlidesImageWithFormat", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesImageWithFormat", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesImageWithFormat", "storage");
	paramIndex = utils->getInvalidIntTestValue("getSlidesImageWithFormat", "index", paramIndex).value();
	utils->initialize("getSlidesImageWithFormat", "index", paramIndex);

	bool failed = true;
	try
	{
		api->downloadImage(paramName, paramIndex, paramFormat, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesImageWithFormat", "index");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesImageWithFormat", "index", paramIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesImageWithFormat", "index");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesImageWithFormat", "index", paramIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesImageWithFormat", "index"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesImageWithFormatInvalidFormat) {
	utility::string_t paramName = utils->getTestValue("getSlidesImageWithFormat", "name");
	int32_t paramIndex = utils->getIntTestValue("getSlidesImageWithFormat", "index");
	utility::string_t paramFormat = utils->getTestValue("getSlidesImageWithFormat", "format");
	utility::string_t paramPassword = utils->getTestValue("getSlidesImageWithFormat", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesImageWithFormat", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesImageWithFormat", "storage");
	paramFormat = utils->getInvalidTestValue("getSlidesImageWithFormat", "format", paramFormat);
	utils->initialize("getSlidesImageWithFormat", "format", paramFormat);

	bool failed = true;
	try
	{
		api->downloadImage(paramName, paramIndex, paramFormat, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesImageWithFormat", "format");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesImageWithFormat", "format", paramFormat);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesImageWithFormat", "format");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesImageWithFormat", "format", paramFormat);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesImageWithFormat", "format"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesImageWithFormatInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getSlidesImageWithFormat", "name");
	int32_t paramIndex = utils->getIntTestValue("getSlidesImageWithFormat", "index");
	utility::string_t paramFormat = utils->getTestValue("getSlidesImageWithFormat", "format");
	utility::string_t paramPassword = utils->getTestValue("getSlidesImageWithFormat", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesImageWithFormat", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesImageWithFormat", "storage");
	paramPassword = utils->getInvalidTestValue("getSlidesImageWithFormat", "password", paramPassword);
	utils->initialize("getSlidesImageWithFormat", "password", paramPassword);

	bool failed = true;
	try
	{
		api->downloadImage(paramName, paramIndex, paramFormat, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesImageWithFormat", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesImageWithFormat", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesImageWithFormat", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesImageWithFormat", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesImageWithFormat", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesImageWithFormatInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getSlidesImageWithFormat", "name");
	int32_t paramIndex = utils->getIntTestValue("getSlidesImageWithFormat", "index");
	utility::string_t paramFormat = utils->getTestValue("getSlidesImageWithFormat", "format");
	utility::string_t paramPassword = utils->getTestValue("getSlidesImageWithFormat", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesImageWithFormat", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesImageWithFormat", "storage");
	paramFolder = utils->getInvalidTestValue("getSlidesImageWithFormat", "folder", paramFolder);
	utils->initialize("getSlidesImageWithFormat", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->downloadImage(paramName, paramIndex, paramFormat, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesImageWithFormat", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesImageWithFormat", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesImageWithFormat", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesImageWithFormat", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesImageWithFormat", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesImageWithFormatInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getSlidesImageWithFormat", "name");
	int32_t paramIndex = utils->getIntTestValue("getSlidesImageWithFormat", "index");
	utility::string_t paramFormat = utils->getTestValue("getSlidesImageWithFormat", "format");
	utility::string_t paramPassword = utils->getTestValue("getSlidesImageWithFormat", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesImageWithFormat", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesImageWithFormat", "storage");
	paramStorage = utils->getInvalidTestValue("getSlidesImageWithFormat", "storage", paramStorage);
	utils->initialize("getSlidesImageWithFormat", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->downloadImage(paramName, paramIndex, paramFormat, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesImageWithFormat", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesImageWithFormat", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesImageWithFormat", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesImageWithFormat", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesImageWithFormat", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesImages) {
	utility::string_t paramName = utils->getTestValue("getSlidesImages", "name");
	utility::string_t paramPassword = utils->getTestValue("getSlidesImages", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesImages", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesImages", "storage");
	utils->initialize("getSlidesImages", "");
	std::shared_ptr<Images> result = api->getPresentationImages(paramName, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getSlidesImagesInvalidName) {
	utility::string_t paramName = utils->getTestValue("getSlidesImages", "name");
	utility::string_t paramPassword = utils->getTestValue("getSlidesImages", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesImages", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesImages", "storage");
	paramName = utils->getInvalidTestValue("getSlidesImages", "name", paramName);
	utils->initialize("getSlidesImages", "name", paramName);

	bool failed = true;
	try
	{
		api->getPresentationImages(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesImages", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesImages", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesImages", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesImages", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesImages", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesImagesInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getSlidesImages", "name");
	utility::string_t paramPassword = utils->getTestValue("getSlidesImages", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesImages", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesImages", "storage");
	paramPassword = utils->getInvalidTestValue("getSlidesImages", "password", paramPassword);
	utils->initialize("getSlidesImages", "password", paramPassword);

	bool failed = true;
	try
	{
		api->getPresentationImages(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesImages", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesImages", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesImages", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesImages", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesImages", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesImagesInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getSlidesImages", "name");
	utility::string_t paramPassword = utils->getTestValue("getSlidesImages", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesImages", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesImages", "storage");
	paramFolder = utils->getInvalidTestValue("getSlidesImages", "folder", paramFolder);
	utils->initialize("getSlidesImages", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->getPresentationImages(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesImages", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesImages", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesImages", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesImages", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesImages", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesImagesInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getSlidesImages", "name");
	utility::string_t paramPassword = utils->getTestValue("getSlidesImages", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesImages", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesImages", "storage");
	paramStorage = utils->getInvalidTestValue("getSlidesImages", "storage", paramStorage);
	utils->initialize("getSlidesImages", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->getPresentationImages(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesImages", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesImages", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesImages", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesImages", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesImages", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesPlaceholder) {
	utility::string_t paramName = utils->getTestValue("getSlidesPlaceholder", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlidesPlaceholder", "slideIndex");
	int32_t paramPlaceholderIndex = utils->getIntTestValue("getSlidesPlaceholder", "placeholderIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlidesPlaceholder", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesPlaceholder", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesPlaceholder", "storage");
	utils->initialize("getSlidesPlaceholder", "");
	std::shared_ptr<Placeholder> result = api->getPlaceholder(paramName, paramSlideIndex, paramPlaceholderIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getSlidesPlaceholderInvalidName) {
	utility::string_t paramName = utils->getTestValue("getSlidesPlaceholder", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlidesPlaceholder", "slideIndex");
	int32_t paramPlaceholderIndex = utils->getIntTestValue("getSlidesPlaceholder", "placeholderIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlidesPlaceholder", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesPlaceholder", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesPlaceholder", "storage");
	paramName = utils->getInvalidTestValue("getSlidesPlaceholder", "name", paramName);
	utils->initialize("getSlidesPlaceholder", "name", paramName);

	bool failed = true;
	try
	{
		api->getPlaceholder(paramName, paramSlideIndex, paramPlaceholderIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesPlaceholder", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesPlaceholder", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesPlaceholder", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesPlaceholder", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesPlaceholder", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesPlaceholderInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getSlidesPlaceholder", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlidesPlaceholder", "slideIndex");
	int32_t paramPlaceholderIndex = utils->getIntTestValue("getSlidesPlaceholder", "placeholderIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlidesPlaceholder", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesPlaceholder", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesPlaceholder", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("getSlidesPlaceholder", "slideIndex", paramSlideIndex).value();
	utils->initialize("getSlidesPlaceholder", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->getPlaceholder(paramName, paramSlideIndex, paramPlaceholderIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesPlaceholder", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesPlaceholder", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesPlaceholder", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesPlaceholder", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesPlaceholder", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesPlaceholderInvalidPlaceholderIndex) {
	utility::string_t paramName = utils->getTestValue("getSlidesPlaceholder", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlidesPlaceholder", "slideIndex");
	int32_t paramPlaceholderIndex = utils->getIntTestValue("getSlidesPlaceholder", "placeholderIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlidesPlaceholder", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesPlaceholder", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesPlaceholder", "storage");
	paramPlaceholderIndex = utils->getInvalidIntTestValue("getSlidesPlaceholder", "placeholderIndex", paramPlaceholderIndex).value();
	utils->initialize("getSlidesPlaceholder", "placeholderIndex", paramPlaceholderIndex);

	bool failed = true;
	try
	{
		api->getPlaceholder(paramName, paramSlideIndex, paramPlaceholderIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesPlaceholder", "placeholderIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesPlaceholder", "placeholderIndex", paramPlaceholderIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesPlaceholder", "placeholderIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesPlaceholder", "placeholderIndex", paramPlaceholderIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesPlaceholder", "placeholderIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesPlaceholderInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getSlidesPlaceholder", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlidesPlaceholder", "slideIndex");
	int32_t paramPlaceholderIndex = utils->getIntTestValue("getSlidesPlaceholder", "placeholderIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlidesPlaceholder", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesPlaceholder", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesPlaceholder", "storage");
	paramPassword = utils->getInvalidTestValue("getSlidesPlaceholder", "password", paramPassword);
	utils->initialize("getSlidesPlaceholder", "password", paramPassword);

	bool failed = true;
	try
	{
		api->getPlaceholder(paramName, paramSlideIndex, paramPlaceholderIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesPlaceholder", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesPlaceholder", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesPlaceholder", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesPlaceholder", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesPlaceholder", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesPlaceholderInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getSlidesPlaceholder", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlidesPlaceholder", "slideIndex");
	int32_t paramPlaceholderIndex = utils->getIntTestValue("getSlidesPlaceholder", "placeholderIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlidesPlaceholder", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesPlaceholder", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesPlaceholder", "storage");
	paramFolder = utils->getInvalidTestValue("getSlidesPlaceholder", "folder", paramFolder);
	utils->initialize("getSlidesPlaceholder", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->getPlaceholder(paramName, paramSlideIndex, paramPlaceholderIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesPlaceholder", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesPlaceholder", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesPlaceholder", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesPlaceholder", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesPlaceholder", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesPlaceholderInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getSlidesPlaceholder", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlidesPlaceholder", "slideIndex");
	int32_t paramPlaceholderIndex = utils->getIntTestValue("getSlidesPlaceholder", "placeholderIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlidesPlaceholder", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesPlaceholder", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesPlaceholder", "storage");
	paramStorage = utils->getInvalidTestValue("getSlidesPlaceholder", "storage", paramStorage);
	utils->initialize("getSlidesPlaceholder", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->getPlaceholder(paramName, paramSlideIndex, paramPlaceholderIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesPlaceholder", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesPlaceholder", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesPlaceholder", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesPlaceholder", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesPlaceholder", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesPlaceholders) {
	utility::string_t paramName = utils->getTestValue("getSlidesPlaceholders", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlidesPlaceholders", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlidesPlaceholders", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesPlaceholders", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesPlaceholders", "storage");
	utils->initialize("getSlidesPlaceholders", "");
	std::shared_ptr<Placeholders> result = api->getPlaceholders(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getSlidesPlaceholdersInvalidName) {
	utility::string_t paramName = utils->getTestValue("getSlidesPlaceholders", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlidesPlaceholders", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlidesPlaceholders", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesPlaceholders", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesPlaceholders", "storage");
	paramName = utils->getInvalidTestValue("getSlidesPlaceholders", "name", paramName);
	utils->initialize("getSlidesPlaceholders", "name", paramName);

	bool failed = true;
	try
	{
		api->getPlaceholders(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesPlaceholders", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesPlaceholders", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesPlaceholders", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesPlaceholders", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesPlaceholders", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesPlaceholdersInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getSlidesPlaceholders", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlidesPlaceholders", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlidesPlaceholders", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesPlaceholders", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesPlaceholders", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("getSlidesPlaceholders", "slideIndex", paramSlideIndex).value();
	utils->initialize("getSlidesPlaceholders", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->getPlaceholders(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesPlaceholders", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesPlaceholders", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesPlaceholders", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesPlaceholders", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesPlaceholders", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesPlaceholdersInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getSlidesPlaceholders", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlidesPlaceholders", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlidesPlaceholders", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesPlaceholders", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesPlaceholders", "storage");
	paramPassword = utils->getInvalidTestValue("getSlidesPlaceholders", "password", paramPassword);
	utils->initialize("getSlidesPlaceholders", "password", paramPassword);

	bool failed = true;
	try
	{
		api->getPlaceholders(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesPlaceholders", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesPlaceholders", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesPlaceholders", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesPlaceholders", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesPlaceholders", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesPlaceholdersInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getSlidesPlaceholders", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlidesPlaceholders", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlidesPlaceholders", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesPlaceholders", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesPlaceholders", "storage");
	paramFolder = utils->getInvalidTestValue("getSlidesPlaceholders", "folder", paramFolder);
	utils->initialize("getSlidesPlaceholders", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->getPlaceholders(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesPlaceholders", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesPlaceholders", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesPlaceholders", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesPlaceholders", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesPlaceholders", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesPlaceholdersInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getSlidesPlaceholders", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlidesPlaceholders", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlidesPlaceholders", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesPlaceholders", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesPlaceholders", "storage");
	paramStorage = utils->getInvalidTestValue("getSlidesPlaceholders", "storage", paramStorage);
	utils->initialize("getSlidesPlaceholders", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->getPlaceholders(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesPlaceholders", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesPlaceholders", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesPlaceholders", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesPlaceholders", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesPlaceholders", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesPresentationTextItems) {
	utility::string_t paramName = utils->getTestValue("getSlidesPresentationTextItems", "name");
	auto paramWithEmpty = utils->getOptionalBoolTestValue("getSlidesPresentationTextItems", "withEmpty");
	utility::string_t paramPassword = utils->getTestValue("getSlidesPresentationTextItems", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesPresentationTextItems", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesPresentationTextItems", "storage");
	utils->initialize("getSlidesPresentationTextItems", "");
	std::shared_ptr<TextItems> result = api->getPresentationTextItems(paramName, paramWithEmpty, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getSlidesPresentationTextItemsInvalidName) {
	utility::string_t paramName = utils->getTestValue("getSlidesPresentationTextItems", "name");
	auto paramWithEmpty = utils->getOptionalBoolTestValue("getSlidesPresentationTextItems", "withEmpty");
	utility::string_t paramPassword = utils->getTestValue("getSlidesPresentationTextItems", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesPresentationTextItems", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesPresentationTextItems", "storage");
	paramName = utils->getInvalidTestValue("getSlidesPresentationTextItems", "name", paramName);
	utils->initialize("getSlidesPresentationTextItems", "name", paramName);

	bool failed = true;
	try
	{
		api->getPresentationTextItems(paramName, paramWithEmpty, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesPresentationTextItems", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesPresentationTextItems", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesPresentationTextItems", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesPresentationTextItems", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesPresentationTextItems", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesPresentationTextItemsInvalidWithEmpty) {
	utility::string_t paramName = utils->getTestValue("getSlidesPresentationTextItems", "name");
	auto paramWithEmpty = utils->getOptionalBoolTestValue("getSlidesPresentationTextItems", "withEmpty");
	utility::string_t paramPassword = utils->getTestValue("getSlidesPresentationTextItems", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesPresentationTextItems", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesPresentationTextItems", "storage");
	paramWithEmpty = utils->getInvalidBoolTestValue("getSlidesPresentationTextItems", "withEmpty", paramWithEmpty).value();
	utils->initialize("getSlidesPresentationTextItems", "withEmpty", paramWithEmpty);

	bool failed = true;
	try
	{
		api->getPresentationTextItems(paramName, paramWithEmpty, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesPresentationTextItems", "withEmpty");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesPresentationTextItems", "withEmpty", paramWithEmpty);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesPresentationTextItems", "withEmpty");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesPresentationTextItems", "withEmpty", paramWithEmpty);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesPresentationTextItems", "withEmpty"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesPresentationTextItemsInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getSlidesPresentationTextItems", "name");
	auto paramWithEmpty = utils->getOptionalBoolTestValue("getSlidesPresentationTextItems", "withEmpty");
	utility::string_t paramPassword = utils->getTestValue("getSlidesPresentationTextItems", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesPresentationTextItems", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesPresentationTextItems", "storage");
	paramPassword = utils->getInvalidTestValue("getSlidesPresentationTextItems", "password", paramPassword);
	utils->initialize("getSlidesPresentationTextItems", "password", paramPassword);

	bool failed = true;
	try
	{
		api->getPresentationTextItems(paramName, paramWithEmpty, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesPresentationTextItems", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesPresentationTextItems", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesPresentationTextItems", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesPresentationTextItems", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesPresentationTextItems", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesPresentationTextItemsInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getSlidesPresentationTextItems", "name");
	auto paramWithEmpty = utils->getOptionalBoolTestValue("getSlidesPresentationTextItems", "withEmpty");
	utility::string_t paramPassword = utils->getTestValue("getSlidesPresentationTextItems", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesPresentationTextItems", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesPresentationTextItems", "storage");
	paramFolder = utils->getInvalidTestValue("getSlidesPresentationTextItems", "folder", paramFolder);
	utils->initialize("getSlidesPresentationTextItems", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->getPresentationTextItems(paramName, paramWithEmpty, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesPresentationTextItems", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesPresentationTextItems", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesPresentationTextItems", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesPresentationTextItems", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesPresentationTextItems", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesPresentationTextItemsInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getSlidesPresentationTextItems", "name");
	auto paramWithEmpty = utils->getOptionalBoolTestValue("getSlidesPresentationTextItems", "withEmpty");
	utility::string_t paramPassword = utils->getTestValue("getSlidesPresentationTextItems", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesPresentationTextItems", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesPresentationTextItems", "storage");
	paramStorage = utils->getInvalidTestValue("getSlidesPresentationTextItems", "storage", paramStorage);
	utils->initialize("getSlidesPresentationTextItems", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->getPresentationTextItems(paramName, paramWithEmpty, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesPresentationTextItems", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesPresentationTextItems", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesPresentationTextItems", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesPresentationTextItems", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesPresentationTextItems", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesProtectionProperties) {
	utility::string_t paramName = utils->getTestValue("getSlidesProtectionProperties", "name");
	utility::string_t paramPassword = utils->getTestValue("getSlidesProtectionProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesProtectionProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesProtectionProperties", "storage");
	utils->initialize("getSlidesProtectionProperties", "");
	std::shared_ptr<ProtectionProperties> result = api->getProtectionProperties(paramName, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getSlidesProtectionPropertiesInvalidName) {
	utility::string_t paramName = utils->getTestValue("getSlidesProtectionProperties", "name");
	utility::string_t paramPassword = utils->getTestValue("getSlidesProtectionProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesProtectionProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesProtectionProperties", "storage");
	paramName = utils->getInvalidTestValue("getSlidesProtectionProperties", "name", paramName);
	utils->initialize("getSlidesProtectionProperties", "name", paramName);

	bool failed = true;
	try
	{
		api->getProtectionProperties(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesProtectionProperties", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesProtectionProperties", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesProtectionProperties", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesProtectionProperties", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesProtectionProperties", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesProtectionPropertiesInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getSlidesProtectionProperties", "name");
	utility::string_t paramPassword = utils->getTestValue("getSlidesProtectionProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesProtectionProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesProtectionProperties", "storage");
	paramPassword = utils->getInvalidTestValue("getSlidesProtectionProperties", "password", paramPassword);
	utils->initialize("getSlidesProtectionProperties", "password", paramPassword);

	bool failed = true;
	try
	{
		api->getProtectionProperties(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesProtectionProperties", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesProtectionProperties", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesProtectionProperties", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesProtectionProperties", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesProtectionProperties", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesProtectionPropertiesInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getSlidesProtectionProperties", "name");
	utility::string_t paramPassword = utils->getTestValue("getSlidesProtectionProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesProtectionProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesProtectionProperties", "storage");
	paramFolder = utils->getInvalidTestValue("getSlidesProtectionProperties", "folder", paramFolder);
	utils->initialize("getSlidesProtectionProperties", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->getProtectionProperties(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesProtectionProperties", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesProtectionProperties", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesProtectionProperties", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesProtectionProperties", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesProtectionProperties", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesProtectionPropertiesInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getSlidesProtectionProperties", "name");
	utility::string_t paramPassword = utils->getTestValue("getSlidesProtectionProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesProtectionProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesProtectionProperties", "storage");
	paramStorage = utils->getInvalidTestValue("getSlidesProtectionProperties", "storage", paramStorage);
	utils->initialize("getSlidesProtectionProperties", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->getProtectionProperties(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesProtectionProperties", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesProtectionProperties", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesProtectionProperties", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesProtectionProperties", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesProtectionProperties", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesSlide) {
	utility::string_t paramName = utils->getTestValue("getSlidesSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlidesSlide", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlidesSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesSlide", "storage");
	utils->initialize("getSlidesSlide", "");
	std::shared_ptr<Slide> result = api->getSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getSlidesSlideInvalidName) {
	utility::string_t paramName = utils->getTestValue("getSlidesSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlidesSlide", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlidesSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesSlide", "storage");
	paramName = utils->getInvalidTestValue("getSlidesSlide", "name", paramName);
	utils->initialize("getSlidesSlide", "name", paramName);

	bool failed = true;
	try
	{
		api->getSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesSlide", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesSlide", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesSlide", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesSlide", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesSlide", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesSlideInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getSlidesSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlidesSlide", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlidesSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesSlide", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("getSlidesSlide", "slideIndex", paramSlideIndex).value();
	utils->initialize("getSlidesSlide", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->getSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesSlide", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesSlide", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesSlide", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesSlide", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesSlide", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesSlideInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getSlidesSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlidesSlide", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlidesSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesSlide", "storage");
	paramPassword = utils->getInvalidTestValue("getSlidesSlide", "password", paramPassword);
	utils->initialize("getSlidesSlide", "password", paramPassword);

	bool failed = true;
	try
	{
		api->getSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesSlide", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesSlide", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesSlide", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesSlide", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesSlide", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesSlideInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getSlidesSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlidesSlide", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlidesSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesSlide", "storage");
	paramFolder = utils->getInvalidTestValue("getSlidesSlide", "folder", paramFolder);
	utils->initialize("getSlidesSlide", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->getSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesSlide", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesSlide", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesSlide", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesSlide", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesSlide", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesSlideInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getSlidesSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlidesSlide", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlidesSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesSlide", "storage");
	paramStorage = utils->getInvalidTestValue("getSlidesSlide", "storage", paramStorage);
	utils->initialize("getSlidesSlide", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->getSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesSlide", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesSlide", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesSlide", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesSlide", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesSlide", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesSlideBackground) {
	utility::string_t paramName = utils->getTestValue("getSlidesSlideBackground", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlidesSlideBackground", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlidesSlideBackground", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesSlideBackground", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesSlideBackground", "storage");
	utils->initialize("getSlidesSlideBackground", "");
	std::shared_ptr<SlideBackground> result = api->getBackground(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getSlidesSlideBackgroundInvalidName) {
	utility::string_t paramName = utils->getTestValue("getSlidesSlideBackground", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlidesSlideBackground", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlidesSlideBackground", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesSlideBackground", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesSlideBackground", "storage");
	paramName = utils->getInvalidTestValue("getSlidesSlideBackground", "name", paramName);
	utils->initialize("getSlidesSlideBackground", "name", paramName);

	bool failed = true;
	try
	{
		api->getBackground(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesSlideBackground", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesSlideBackground", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesSlideBackground", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesSlideBackground", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesSlideBackground", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesSlideBackgroundInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getSlidesSlideBackground", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlidesSlideBackground", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlidesSlideBackground", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesSlideBackground", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesSlideBackground", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("getSlidesSlideBackground", "slideIndex", paramSlideIndex).value();
	utils->initialize("getSlidesSlideBackground", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->getBackground(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesSlideBackground", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesSlideBackground", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesSlideBackground", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesSlideBackground", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesSlideBackground", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesSlideBackgroundInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getSlidesSlideBackground", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlidesSlideBackground", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlidesSlideBackground", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesSlideBackground", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesSlideBackground", "storage");
	paramPassword = utils->getInvalidTestValue("getSlidesSlideBackground", "password", paramPassword);
	utils->initialize("getSlidesSlideBackground", "password", paramPassword);

	bool failed = true;
	try
	{
		api->getBackground(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesSlideBackground", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesSlideBackground", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesSlideBackground", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesSlideBackground", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesSlideBackground", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesSlideBackgroundInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getSlidesSlideBackground", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlidesSlideBackground", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlidesSlideBackground", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesSlideBackground", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesSlideBackground", "storage");
	paramFolder = utils->getInvalidTestValue("getSlidesSlideBackground", "folder", paramFolder);
	utils->initialize("getSlidesSlideBackground", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->getBackground(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesSlideBackground", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesSlideBackground", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesSlideBackground", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesSlideBackground", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesSlideBackground", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesSlideBackgroundInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getSlidesSlideBackground", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlidesSlideBackground", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlidesSlideBackground", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesSlideBackground", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesSlideBackground", "storage");
	paramStorage = utils->getInvalidTestValue("getSlidesSlideBackground", "storage", paramStorage);
	utils->initialize("getSlidesSlideBackground", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->getBackground(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesSlideBackground", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesSlideBackground", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesSlideBackground", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesSlideBackground", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesSlideBackground", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesSlideComments) {
	utility::string_t paramName = utils->getTestValue("getSlidesSlideComments", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlidesSlideComments", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlidesSlideComments", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesSlideComments", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesSlideComments", "storage");
	utils->initialize("getSlidesSlideComments", "");
	std::shared_ptr<SlideComments> result = api->getComments(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getSlidesSlideCommentsInvalidName) {
	utility::string_t paramName = utils->getTestValue("getSlidesSlideComments", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlidesSlideComments", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlidesSlideComments", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesSlideComments", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesSlideComments", "storage");
	paramName = utils->getInvalidTestValue("getSlidesSlideComments", "name", paramName);
	utils->initialize("getSlidesSlideComments", "name", paramName);

	bool failed = true;
	try
	{
		api->getComments(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesSlideComments", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesSlideComments", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesSlideComments", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesSlideComments", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesSlideComments", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesSlideCommentsInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getSlidesSlideComments", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlidesSlideComments", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlidesSlideComments", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesSlideComments", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesSlideComments", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("getSlidesSlideComments", "slideIndex", paramSlideIndex).value();
	utils->initialize("getSlidesSlideComments", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->getComments(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesSlideComments", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesSlideComments", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesSlideComments", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesSlideComments", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesSlideComments", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesSlideCommentsInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getSlidesSlideComments", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlidesSlideComments", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlidesSlideComments", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesSlideComments", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesSlideComments", "storage");
	paramPassword = utils->getInvalidTestValue("getSlidesSlideComments", "password", paramPassword);
	utils->initialize("getSlidesSlideComments", "password", paramPassword);

	bool failed = true;
	try
	{
		api->getComments(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesSlideComments", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesSlideComments", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesSlideComments", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesSlideComments", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesSlideComments", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesSlideCommentsInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getSlidesSlideComments", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlidesSlideComments", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlidesSlideComments", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesSlideComments", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesSlideComments", "storage");
	paramFolder = utils->getInvalidTestValue("getSlidesSlideComments", "folder", paramFolder);
	utils->initialize("getSlidesSlideComments", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->getComments(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesSlideComments", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesSlideComments", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesSlideComments", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesSlideComments", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesSlideComments", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesSlideCommentsInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getSlidesSlideComments", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlidesSlideComments", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlidesSlideComments", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesSlideComments", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesSlideComments", "storage");
	paramStorage = utils->getInvalidTestValue("getSlidesSlideComments", "storage", paramStorage);
	utils->initialize("getSlidesSlideComments", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->getComments(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesSlideComments", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesSlideComments", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesSlideComments", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesSlideComments", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesSlideComments", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesSlideImages) {
	utility::string_t paramName = utils->getTestValue("getSlidesSlideImages", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlidesSlideImages", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlidesSlideImages", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesSlideImages", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesSlideImages", "storage");
	utils->initialize("getSlidesSlideImages", "");
	std::shared_ptr<Images> result = api->getSlideImages(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getSlidesSlideImagesInvalidName) {
	utility::string_t paramName = utils->getTestValue("getSlidesSlideImages", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlidesSlideImages", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlidesSlideImages", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesSlideImages", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesSlideImages", "storage");
	paramName = utils->getInvalidTestValue("getSlidesSlideImages", "name", paramName);
	utils->initialize("getSlidesSlideImages", "name", paramName);

	bool failed = true;
	try
	{
		api->getSlideImages(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesSlideImages", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesSlideImages", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesSlideImages", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesSlideImages", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesSlideImages", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesSlideImagesInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getSlidesSlideImages", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlidesSlideImages", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlidesSlideImages", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesSlideImages", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesSlideImages", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("getSlidesSlideImages", "slideIndex", paramSlideIndex).value();
	utils->initialize("getSlidesSlideImages", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->getSlideImages(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesSlideImages", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesSlideImages", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesSlideImages", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesSlideImages", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesSlideImages", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesSlideImagesInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getSlidesSlideImages", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlidesSlideImages", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlidesSlideImages", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesSlideImages", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesSlideImages", "storage");
	paramPassword = utils->getInvalidTestValue("getSlidesSlideImages", "password", paramPassword);
	utils->initialize("getSlidesSlideImages", "password", paramPassword);

	bool failed = true;
	try
	{
		api->getSlideImages(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesSlideImages", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesSlideImages", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesSlideImages", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesSlideImages", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesSlideImages", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesSlideImagesInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getSlidesSlideImages", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlidesSlideImages", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlidesSlideImages", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesSlideImages", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesSlideImages", "storage");
	paramFolder = utils->getInvalidTestValue("getSlidesSlideImages", "folder", paramFolder);
	utils->initialize("getSlidesSlideImages", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->getSlideImages(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesSlideImages", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesSlideImages", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesSlideImages", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesSlideImages", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesSlideImages", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesSlideImagesInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getSlidesSlideImages", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlidesSlideImages", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlidesSlideImages", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesSlideImages", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesSlideImages", "storage");
	paramStorage = utils->getInvalidTestValue("getSlidesSlideImages", "storage", paramStorage);
	utils->initialize("getSlidesSlideImages", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->getSlideImages(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesSlideImages", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesSlideImages", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesSlideImages", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesSlideImages", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesSlideImages", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesSlideProperties) {
	utility::string_t paramName = utils->getTestValue("getSlidesSlideProperties", "name");
	utility::string_t paramPassword = utils->getTestValue("getSlidesSlideProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesSlideProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesSlideProperties", "storage");
	utils->initialize("getSlidesSlideProperties", "");
	std::shared_ptr<SlideProperties> result = api->getSlideProperties(paramName, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getSlidesSlidePropertiesInvalidName) {
	utility::string_t paramName = utils->getTestValue("getSlidesSlideProperties", "name");
	utility::string_t paramPassword = utils->getTestValue("getSlidesSlideProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesSlideProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesSlideProperties", "storage");
	paramName = utils->getInvalidTestValue("getSlidesSlideProperties", "name", paramName);
	utils->initialize("getSlidesSlideProperties", "name", paramName);

	bool failed = true;
	try
	{
		api->getSlideProperties(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesSlideProperties", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesSlideProperties", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesSlideProperties", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesSlideProperties", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesSlideProperties", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesSlidePropertiesInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getSlidesSlideProperties", "name");
	utility::string_t paramPassword = utils->getTestValue("getSlidesSlideProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesSlideProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesSlideProperties", "storage");
	paramPassword = utils->getInvalidTestValue("getSlidesSlideProperties", "password", paramPassword);
	utils->initialize("getSlidesSlideProperties", "password", paramPassword);

	bool failed = true;
	try
	{
		api->getSlideProperties(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesSlideProperties", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesSlideProperties", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesSlideProperties", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesSlideProperties", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesSlideProperties", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesSlidePropertiesInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getSlidesSlideProperties", "name");
	utility::string_t paramPassword = utils->getTestValue("getSlidesSlideProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesSlideProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesSlideProperties", "storage");
	paramFolder = utils->getInvalidTestValue("getSlidesSlideProperties", "folder", paramFolder);
	utils->initialize("getSlidesSlideProperties", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->getSlideProperties(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesSlideProperties", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesSlideProperties", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesSlideProperties", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesSlideProperties", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesSlideProperties", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesSlidePropertiesInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getSlidesSlideProperties", "name");
	utility::string_t paramPassword = utils->getTestValue("getSlidesSlideProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesSlideProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesSlideProperties", "storage");
	paramStorage = utils->getInvalidTestValue("getSlidesSlideProperties", "storage", paramStorage);
	utils->initialize("getSlidesSlideProperties", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->getSlideProperties(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesSlideProperties", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesSlideProperties", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesSlideProperties", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesSlideProperties", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesSlideProperties", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesSlideTextItems) {
	utility::string_t paramName = utils->getTestValue("getSlidesSlideTextItems", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlidesSlideTextItems", "slideIndex");
	auto paramWithEmpty = utils->getOptionalBoolTestValue("getSlidesSlideTextItems", "withEmpty");
	utility::string_t paramPassword = utils->getTestValue("getSlidesSlideTextItems", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesSlideTextItems", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesSlideTextItems", "storage");
	utils->initialize("getSlidesSlideTextItems", "");
	std::shared_ptr<TextItems> result = api->getSlideTextItems(paramName, paramSlideIndex, paramWithEmpty, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getSlidesSlideTextItemsInvalidName) {
	utility::string_t paramName = utils->getTestValue("getSlidesSlideTextItems", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlidesSlideTextItems", "slideIndex");
	auto paramWithEmpty = utils->getOptionalBoolTestValue("getSlidesSlideTextItems", "withEmpty");
	utility::string_t paramPassword = utils->getTestValue("getSlidesSlideTextItems", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesSlideTextItems", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesSlideTextItems", "storage");
	paramName = utils->getInvalidTestValue("getSlidesSlideTextItems", "name", paramName);
	utils->initialize("getSlidesSlideTextItems", "name", paramName);

	bool failed = true;
	try
	{
		api->getSlideTextItems(paramName, paramSlideIndex, paramWithEmpty, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesSlideTextItems", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesSlideTextItems", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesSlideTextItems", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesSlideTextItems", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesSlideTextItems", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesSlideTextItemsInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getSlidesSlideTextItems", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlidesSlideTextItems", "slideIndex");
	auto paramWithEmpty = utils->getOptionalBoolTestValue("getSlidesSlideTextItems", "withEmpty");
	utility::string_t paramPassword = utils->getTestValue("getSlidesSlideTextItems", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesSlideTextItems", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesSlideTextItems", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("getSlidesSlideTextItems", "slideIndex", paramSlideIndex).value();
	utils->initialize("getSlidesSlideTextItems", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->getSlideTextItems(paramName, paramSlideIndex, paramWithEmpty, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesSlideTextItems", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesSlideTextItems", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesSlideTextItems", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesSlideTextItems", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesSlideTextItems", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesSlideTextItemsInvalidWithEmpty) {
	utility::string_t paramName = utils->getTestValue("getSlidesSlideTextItems", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlidesSlideTextItems", "slideIndex");
	auto paramWithEmpty = utils->getOptionalBoolTestValue("getSlidesSlideTextItems", "withEmpty");
	utility::string_t paramPassword = utils->getTestValue("getSlidesSlideTextItems", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesSlideTextItems", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesSlideTextItems", "storage");
	paramWithEmpty = utils->getInvalidBoolTestValue("getSlidesSlideTextItems", "withEmpty", paramWithEmpty).value();
	utils->initialize("getSlidesSlideTextItems", "withEmpty", paramWithEmpty);

	bool failed = true;
	try
	{
		api->getSlideTextItems(paramName, paramSlideIndex, paramWithEmpty, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesSlideTextItems", "withEmpty");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesSlideTextItems", "withEmpty", paramWithEmpty);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesSlideTextItems", "withEmpty");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesSlideTextItems", "withEmpty", paramWithEmpty);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesSlideTextItems", "withEmpty"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesSlideTextItemsInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getSlidesSlideTextItems", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlidesSlideTextItems", "slideIndex");
	auto paramWithEmpty = utils->getOptionalBoolTestValue("getSlidesSlideTextItems", "withEmpty");
	utility::string_t paramPassword = utils->getTestValue("getSlidesSlideTextItems", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesSlideTextItems", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesSlideTextItems", "storage");
	paramPassword = utils->getInvalidTestValue("getSlidesSlideTextItems", "password", paramPassword);
	utils->initialize("getSlidesSlideTextItems", "password", paramPassword);

	bool failed = true;
	try
	{
		api->getSlideTextItems(paramName, paramSlideIndex, paramWithEmpty, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesSlideTextItems", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesSlideTextItems", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesSlideTextItems", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesSlideTextItems", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesSlideTextItems", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesSlideTextItemsInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getSlidesSlideTextItems", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlidesSlideTextItems", "slideIndex");
	auto paramWithEmpty = utils->getOptionalBoolTestValue("getSlidesSlideTextItems", "withEmpty");
	utility::string_t paramPassword = utils->getTestValue("getSlidesSlideTextItems", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesSlideTextItems", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesSlideTextItems", "storage");
	paramFolder = utils->getInvalidTestValue("getSlidesSlideTextItems", "folder", paramFolder);
	utils->initialize("getSlidesSlideTextItems", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->getSlideTextItems(paramName, paramSlideIndex, paramWithEmpty, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesSlideTextItems", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesSlideTextItems", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesSlideTextItems", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesSlideTextItems", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesSlideTextItems", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesSlideTextItemsInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getSlidesSlideTextItems", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlidesSlideTextItems", "slideIndex");
	auto paramWithEmpty = utils->getOptionalBoolTestValue("getSlidesSlideTextItems", "withEmpty");
	utility::string_t paramPassword = utils->getTestValue("getSlidesSlideTextItems", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesSlideTextItems", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesSlideTextItems", "storage");
	paramStorage = utils->getInvalidTestValue("getSlidesSlideTextItems", "storage", paramStorage);
	utils->initialize("getSlidesSlideTextItems", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->getSlideTextItems(paramName, paramSlideIndex, paramWithEmpty, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesSlideTextItems", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesSlideTextItems", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesSlideTextItems", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesSlideTextItems", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesSlideTextItems", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesSlidesList) {
	utility::string_t paramName = utils->getTestValue("getSlidesSlidesList", "name");
	utility::string_t paramPassword = utils->getTestValue("getSlidesSlidesList", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesSlidesList", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesSlidesList", "storage");
	utils->initialize("getSlidesSlidesList", "");
	std::shared_ptr<Slides> result = api->getSlides(paramName, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getSlidesSlidesListInvalidName) {
	utility::string_t paramName = utils->getTestValue("getSlidesSlidesList", "name");
	utility::string_t paramPassword = utils->getTestValue("getSlidesSlidesList", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesSlidesList", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesSlidesList", "storage");
	paramName = utils->getInvalidTestValue("getSlidesSlidesList", "name", paramName);
	utils->initialize("getSlidesSlidesList", "name", paramName);

	bool failed = true;
	try
	{
		api->getSlides(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesSlidesList", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesSlidesList", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesSlidesList", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesSlidesList", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesSlidesList", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesSlidesListInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getSlidesSlidesList", "name");
	utility::string_t paramPassword = utils->getTestValue("getSlidesSlidesList", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesSlidesList", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesSlidesList", "storage");
	paramPassword = utils->getInvalidTestValue("getSlidesSlidesList", "password", paramPassword);
	utils->initialize("getSlidesSlidesList", "password", paramPassword);

	bool failed = true;
	try
	{
		api->getSlides(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesSlidesList", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesSlidesList", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesSlidesList", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesSlidesList", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesSlidesList", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesSlidesListInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getSlidesSlidesList", "name");
	utility::string_t paramPassword = utils->getTestValue("getSlidesSlidesList", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesSlidesList", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesSlidesList", "storage");
	paramFolder = utils->getInvalidTestValue("getSlidesSlidesList", "folder", paramFolder);
	utils->initialize("getSlidesSlidesList", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->getSlides(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesSlidesList", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesSlidesList", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesSlidesList", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesSlidesList", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesSlidesList", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesSlidesListInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getSlidesSlidesList", "name");
	utility::string_t paramPassword = utils->getTestValue("getSlidesSlidesList", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesSlidesList", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesSlidesList", "storage");
	paramStorage = utils->getInvalidTestValue("getSlidesSlidesList", "storage", paramStorage);
	utils->initialize("getSlidesSlidesList", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->getSlides(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesSlidesList", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesSlidesList", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesSlidesList", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesSlidesList", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesSlidesList", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesTheme) {
	utility::string_t paramName = utils->getTestValue("getSlidesTheme", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlidesTheme", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlidesTheme", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesTheme", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesTheme", "storage");
	utils->initialize("getSlidesTheme", "");
	std::shared_ptr<Theme> result = api->getTheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getSlidesThemeInvalidName) {
	utility::string_t paramName = utils->getTestValue("getSlidesTheme", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlidesTheme", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlidesTheme", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesTheme", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesTheme", "storage");
	paramName = utils->getInvalidTestValue("getSlidesTheme", "name", paramName);
	utils->initialize("getSlidesTheme", "name", paramName);

	bool failed = true;
	try
	{
		api->getTheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesTheme", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesTheme", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesTheme", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesTheme", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesTheme", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesThemeInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getSlidesTheme", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlidesTheme", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlidesTheme", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesTheme", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesTheme", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("getSlidesTheme", "slideIndex", paramSlideIndex).value();
	utils->initialize("getSlidesTheme", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->getTheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesTheme", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesTheme", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesTheme", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesTheme", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesTheme", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesThemeInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getSlidesTheme", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlidesTheme", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlidesTheme", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesTheme", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesTheme", "storage");
	paramPassword = utils->getInvalidTestValue("getSlidesTheme", "password", paramPassword);
	utils->initialize("getSlidesTheme", "password", paramPassword);

	bool failed = true;
	try
	{
		api->getTheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesTheme", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesTheme", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesTheme", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesTheme", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesTheme", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesThemeInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getSlidesTheme", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlidesTheme", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlidesTheme", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesTheme", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesTheme", "storage");
	paramFolder = utils->getInvalidTestValue("getSlidesTheme", "folder", paramFolder);
	utils->initialize("getSlidesTheme", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->getTheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesTheme", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesTheme", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesTheme", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesTheme", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesTheme", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesThemeInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getSlidesTheme", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlidesTheme", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlidesTheme", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesTheme", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesTheme", "storage");
	paramStorage = utils->getInvalidTestValue("getSlidesTheme", "storage", paramStorage);
	utils->initialize("getSlidesTheme", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->getTheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesTheme", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesTheme", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesTheme", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesTheme", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesTheme", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesThemeColorScheme) {
	utility::string_t paramName = utils->getTestValue("getSlidesThemeColorScheme", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlidesThemeColorScheme", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlidesThemeColorScheme", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesThemeColorScheme", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesThemeColorScheme", "storage");
	utils->initialize("getSlidesThemeColorScheme", "");
	std::shared_ptr<ColorScheme> result = api->getColorScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getSlidesThemeColorSchemeInvalidName) {
	utility::string_t paramName = utils->getTestValue("getSlidesThemeColorScheme", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlidesThemeColorScheme", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlidesThemeColorScheme", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesThemeColorScheme", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesThemeColorScheme", "storage");
	paramName = utils->getInvalidTestValue("getSlidesThemeColorScheme", "name", paramName);
	utils->initialize("getSlidesThemeColorScheme", "name", paramName);

	bool failed = true;
	try
	{
		api->getColorScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesThemeColorScheme", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesThemeColorScheme", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesThemeColorScheme", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesThemeColorScheme", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesThemeColorScheme", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesThemeColorSchemeInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getSlidesThemeColorScheme", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlidesThemeColorScheme", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlidesThemeColorScheme", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesThemeColorScheme", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesThemeColorScheme", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("getSlidesThemeColorScheme", "slideIndex", paramSlideIndex).value();
	utils->initialize("getSlidesThemeColorScheme", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->getColorScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesThemeColorScheme", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesThemeColorScheme", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesThemeColorScheme", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesThemeColorScheme", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesThemeColorScheme", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesThemeColorSchemeInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getSlidesThemeColorScheme", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlidesThemeColorScheme", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlidesThemeColorScheme", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesThemeColorScheme", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesThemeColorScheme", "storage");
	paramPassword = utils->getInvalidTestValue("getSlidesThemeColorScheme", "password", paramPassword);
	utils->initialize("getSlidesThemeColorScheme", "password", paramPassword);

	bool failed = true;
	try
	{
		api->getColorScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesThemeColorScheme", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesThemeColorScheme", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesThemeColorScheme", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesThemeColorScheme", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesThemeColorScheme", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesThemeColorSchemeInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getSlidesThemeColorScheme", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlidesThemeColorScheme", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlidesThemeColorScheme", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesThemeColorScheme", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesThemeColorScheme", "storage");
	paramFolder = utils->getInvalidTestValue("getSlidesThemeColorScheme", "folder", paramFolder);
	utils->initialize("getSlidesThemeColorScheme", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->getColorScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesThemeColorScheme", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesThemeColorScheme", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesThemeColorScheme", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesThemeColorScheme", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesThemeColorScheme", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesThemeColorSchemeInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getSlidesThemeColorScheme", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlidesThemeColorScheme", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlidesThemeColorScheme", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesThemeColorScheme", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesThemeColorScheme", "storage");
	paramStorage = utils->getInvalidTestValue("getSlidesThemeColorScheme", "storage", paramStorage);
	utils->initialize("getSlidesThemeColorScheme", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->getColorScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesThemeColorScheme", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesThemeColorScheme", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesThemeColorScheme", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesThemeColorScheme", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesThemeColorScheme", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesThemeFontScheme) {
	utility::string_t paramName = utils->getTestValue("getSlidesThemeFontScheme", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlidesThemeFontScheme", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlidesThemeFontScheme", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesThemeFontScheme", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesThemeFontScheme", "storage");
	utils->initialize("getSlidesThemeFontScheme", "");
	std::shared_ptr<FontScheme> result = api->getFontScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getSlidesThemeFontSchemeInvalidName) {
	utility::string_t paramName = utils->getTestValue("getSlidesThemeFontScheme", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlidesThemeFontScheme", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlidesThemeFontScheme", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesThemeFontScheme", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesThemeFontScheme", "storage");
	paramName = utils->getInvalidTestValue("getSlidesThemeFontScheme", "name", paramName);
	utils->initialize("getSlidesThemeFontScheme", "name", paramName);

	bool failed = true;
	try
	{
		api->getFontScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesThemeFontScheme", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesThemeFontScheme", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesThemeFontScheme", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesThemeFontScheme", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesThemeFontScheme", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesThemeFontSchemeInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getSlidesThemeFontScheme", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlidesThemeFontScheme", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlidesThemeFontScheme", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesThemeFontScheme", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesThemeFontScheme", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("getSlidesThemeFontScheme", "slideIndex", paramSlideIndex).value();
	utils->initialize("getSlidesThemeFontScheme", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->getFontScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesThemeFontScheme", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesThemeFontScheme", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesThemeFontScheme", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesThemeFontScheme", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesThemeFontScheme", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesThemeFontSchemeInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getSlidesThemeFontScheme", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlidesThemeFontScheme", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlidesThemeFontScheme", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesThemeFontScheme", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesThemeFontScheme", "storage");
	paramPassword = utils->getInvalidTestValue("getSlidesThemeFontScheme", "password", paramPassword);
	utils->initialize("getSlidesThemeFontScheme", "password", paramPassword);

	bool failed = true;
	try
	{
		api->getFontScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesThemeFontScheme", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesThemeFontScheme", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesThemeFontScheme", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesThemeFontScheme", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesThemeFontScheme", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesThemeFontSchemeInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getSlidesThemeFontScheme", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlidesThemeFontScheme", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlidesThemeFontScheme", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesThemeFontScheme", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesThemeFontScheme", "storage");
	paramFolder = utils->getInvalidTestValue("getSlidesThemeFontScheme", "folder", paramFolder);
	utils->initialize("getSlidesThemeFontScheme", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->getFontScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesThemeFontScheme", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesThemeFontScheme", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesThemeFontScheme", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesThemeFontScheme", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesThemeFontScheme", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesThemeFontSchemeInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getSlidesThemeFontScheme", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlidesThemeFontScheme", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlidesThemeFontScheme", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesThemeFontScheme", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesThemeFontScheme", "storage");
	paramStorage = utils->getInvalidTestValue("getSlidesThemeFontScheme", "storage", paramStorage);
	utils->initialize("getSlidesThemeFontScheme", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->getFontScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesThemeFontScheme", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesThemeFontScheme", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesThemeFontScheme", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesThemeFontScheme", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesThemeFontScheme", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesThemeFormatScheme) {
	utility::string_t paramName = utils->getTestValue("getSlidesThemeFormatScheme", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlidesThemeFormatScheme", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlidesThemeFormatScheme", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesThemeFormatScheme", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesThemeFormatScheme", "storage");
	utils->initialize("getSlidesThemeFormatScheme", "");
	std::shared_ptr<FormatScheme> result = api->getFormatScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getSlidesThemeFormatSchemeInvalidName) {
	utility::string_t paramName = utils->getTestValue("getSlidesThemeFormatScheme", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlidesThemeFormatScheme", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlidesThemeFormatScheme", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesThemeFormatScheme", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesThemeFormatScheme", "storage");
	paramName = utils->getInvalidTestValue("getSlidesThemeFormatScheme", "name", paramName);
	utils->initialize("getSlidesThemeFormatScheme", "name", paramName);

	bool failed = true;
	try
	{
		api->getFormatScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesThemeFormatScheme", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesThemeFormatScheme", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesThemeFormatScheme", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesThemeFormatScheme", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesThemeFormatScheme", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesThemeFormatSchemeInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getSlidesThemeFormatScheme", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlidesThemeFormatScheme", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlidesThemeFormatScheme", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesThemeFormatScheme", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesThemeFormatScheme", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("getSlidesThemeFormatScheme", "slideIndex", paramSlideIndex).value();
	utils->initialize("getSlidesThemeFormatScheme", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->getFormatScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesThemeFormatScheme", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesThemeFormatScheme", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesThemeFormatScheme", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesThemeFormatScheme", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesThemeFormatScheme", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesThemeFormatSchemeInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getSlidesThemeFormatScheme", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlidesThemeFormatScheme", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlidesThemeFormatScheme", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesThemeFormatScheme", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesThemeFormatScheme", "storage");
	paramPassword = utils->getInvalidTestValue("getSlidesThemeFormatScheme", "password", paramPassword);
	utils->initialize("getSlidesThemeFormatScheme", "password", paramPassword);

	bool failed = true;
	try
	{
		api->getFormatScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesThemeFormatScheme", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesThemeFormatScheme", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesThemeFormatScheme", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesThemeFormatScheme", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesThemeFormatScheme", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesThemeFormatSchemeInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getSlidesThemeFormatScheme", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlidesThemeFormatScheme", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlidesThemeFormatScheme", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesThemeFormatScheme", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesThemeFormatScheme", "storage");
	paramFolder = utils->getInvalidTestValue("getSlidesThemeFormatScheme", "folder", paramFolder);
	utils->initialize("getSlidesThemeFormatScheme", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->getFormatScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesThemeFormatScheme", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesThemeFormatScheme", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesThemeFormatScheme", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesThemeFormatScheme", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesThemeFormatScheme", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesThemeFormatSchemeInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getSlidesThemeFormatScheme", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlidesThemeFormatScheme", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlidesThemeFormatScheme", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesThemeFormatScheme", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesThemeFormatScheme", "storage");
	paramStorage = utils->getInvalidTestValue("getSlidesThemeFormatScheme", "storage", paramStorage);
	utils->initialize("getSlidesThemeFormatScheme", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->getFormatScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesThemeFormatScheme", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesThemeFormatScheme", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesThemeFormatScheme", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesThemeFormatScheme", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesThemeFormatScheme", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesViewProperties) {
	utility::string_t paramName = utils->getTestValue("getSlidesViewProperties", "name");
	utility::string_t paramPassword = utils->getTestValue("getSlidesViewProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesViewProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesViewProperties", "storage");
	utils->initialize("getSlidesViewProperties", "");
	std::shared_ptr<ViewProperties> result = api->getViewProperties(paramName, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getSlidesViewPropertiesInvalidName) {
	utility::string_t paramName = utils->getTestValue("getSlidesViewProperties", "name");
	utility::string_t paramPassword = utils->getTestValue("getSlidesViewProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesViewProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesViewProperties", "storage");
	paramName = utils->getInvalidTestValue("getSlidesViewProperties", "name", paramName);
	utils->initialize("getSlidesViewProperties", "name", paramName);

	bool failed = true;
	try
	{
		api->getViewProperties(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesViewProperties", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesViewProperties", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesViewProperties", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesViewProperties", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesViewProperties", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesViewPropertiesInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getSlidesViewProperties", "name");
	utility::string_t paramPassword = utils->getTestValue("getSlidesViewProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesViewProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesViewProperties", "storage");
	paramPassword = utils->getInvalidTestValue("getSlidesViewProperties", "password", paramPassword);
	utils->initialize("getSlidesViewProperties", "password", paramPassword);

	bool failed = true;
	try
	{
		api->getViewProperties(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesViewProperties", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesViewProperties", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesViewProperties", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesViewProperties", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesViewProperties", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesViewPropertiesInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getSlidesViewProperties", "name");
	utility::string_t paramPassword = utils->getTestValue("getSlidesViewProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesViewProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesViewProperties", "storage");
	paramFolder = utils->getInvalidTestValue("getSlidesViewProperties", "folder", paramFolder);
	utils->initialize("getSlidesViewProperties", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->getViewProperties(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesViewProperties", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesViewProperties", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesViewProperties", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesViewProperties", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesViewProperties", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesViewPropertiesInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getSlidesViewProperties", "name");
	utility::string_t paramPassword = utils->getTestValue("getSlidesViewProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlidesViewProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlidesViewProperties", "storage");
	paramStorage = utils->getInvalidTestValue("getSlidesViewProperties", "storage", paramStorage);
	utils->initialize("getSlidesViewProperties", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->getViewProperties(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesViewProperties", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesViewProperties", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesViewProperties", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesViewProperties", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesViewProperties", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSubshapeParagraphPortion) {
	utility::string_t paramName = utils->getTestValue("getSubshapeParagraphPortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSubshapeParagraphPortion", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("getSubshapeParagraphPortion", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("getSubshapeParagraphPortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getSubshapeParagraphPortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("getSubshapeParagraphPortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("getSubshapeParagraphPortion", "password");
	utility::string_t paramFolder = utils->getTestValue("getSubshapeParagraphPortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSubshapeParagraphPortion", "storage");
	utils->initialize("getSubshapeParagraphPortion", "");
	std::shared_ptr<Portion> result = api->getSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getSubshapeParagraphPortionInvalidName) {
	utility::string_t paramName = utils->getTestValue("getSubshapeParagraphPortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSubshapeParagraphPortion", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("getSubshapeParagraphPortion", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("getSubshapeParagraphPortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getSubshapeParagraphPortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("getSubshapeParagraphPortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("getSubshapeParagraphPortion", "password");
	utility::string_t paramFolder = utils->getTestValue("getSubshapeParagraphPortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSubshapeParagraphPortion", "storage");
	paramName = utils->getInvalidTestValue("getSubshapeParagraphPortion", "name", paramName);
	utils->initialize("getSubshapeParagraphPortion", "name", paramName);

	bool failed = true;
	try
	{
		api->getSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSubshapeParagraphPortion", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSubshapeParagraphPortion", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSubshapeParagraphPortion", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSubshapeParagraphPortion", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSubshapeParagraphPortion", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSubshapeParagraphPortionInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getSubshapeParagraphPortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSubshapeParagraphPortion", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("getSubshapeParagraphPortion", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("getSubshapeParagraphPortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getSubshapeParagraphPortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("getSubshapeParagraphPortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("getSubshapeParagraphPortion", "password");
	utility::string_t paramFolder = utils->getTestValue("getSubshapeParagraphPortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSubshapeParagraphPortion", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("getSubshapeParagraphPortion", "slideIndex", paramSlideIndex).value();
	utils->initialize("getSubshapeParagraphPortion", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->getSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSubshapeParagraphPortion", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSubshapeParagraphPortion", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSubshapeParagraphPortion", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSubshapeParagraphPortion", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSubshapeParagraphPortion", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSubshapeParagraphPortionInvalidPath) {
	utility::string_t paramName = utils->getTestValue("getSubshapeParagraphPortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSubshapeParagraphPortion", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("getSubshapeParagraphPortion", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("getSubshapeParagraphPortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getSubshapeParagraphPortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("getSubshapeParagraphPortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("getSubshapeParagraphPortion", "password");
	utility::string_t paramFolder = utils->getTestValue("getSubshapeParagraphPortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSubshapeParagraphPortion", "storage");
	paramPath = utils->getInvalidTestValue("getSubshapeParagraphPortion", "path", paramPath);
	utils->initialize("getSubshapeParagraphPortion", "path", paramPath);

	bool failed = true;
	try
	{
		api->getSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSubshapeParagraphPortion", "path");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSubshapeParagraphPortion", "path", paramPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSubshapeParagraphPortion", "path");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSubshapeParagraphPortion", "path", paramPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSubshapeParagraphPortion", "path"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSubshapeParagraphPortionInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("getSubshapeParagraphPortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSubshapeParagraphPortion", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("getSubshapeParagraphPortion", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("getSubshapeParagraphPortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getSubshapeParagraphPortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("getSubshapeParagraphPortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("getSubshapeParagraphPortion", "password");
	utility::string_t paramFolder = utils->getTestValue("getSubshapeParagraphPortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSubshapeParagraphPortion", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("getSubshapeParagraphPortion", "shapeIndex", paramShapeIndex).value();
	utils->initialize("getSubshapeParagraphPortion", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->getSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSubshapeParagraphPortion", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSubshapeParagraphPortion", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSubshapeParagraphPortion", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSubshapeParagraphPortion", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSubshapeParagraphPortion", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSubshapeParagraphPortionInvalidParagraphIndex) {
	utility::string_t paramName = utils->getTestValue("getSubshapeParagraphPortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSubshapeParagraphPortion", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("getSubshapeParagraphPortion", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("getSubshapeParagraphPortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getSubshapeParagraphPortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("getSubshapeParagraphPortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("getSubshapeParagraphPortion", "password");
	utility::string_t paramFolder = utils->getTestValue("getSubshapeParagraphPortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSubshapeParagraphPortion", "storage");
	paramParagraphIndex = utils->getInvalidIntTestValue("getSubshapeParagraphPortion", "paragraphIndex", paramParagraphIndex).value();
	utils->initialize("getSubshapeParagraphPortion", "paragraphIndex", paramParagraphIndex);

	bool failed = true;
	try
	{
		api->getSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSubshapeParagraphPortion", "paragraphIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSubshapeParagraphPortion", "paragraphIndex", paramParagraphIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSubshapeParagraphPortion", "paragraphIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSubshapeParagraphPortion", "paragraphIndex", paramParagraphIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSubshapeParagraphPortion", "paragraphIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSubshapeParagraphPortionInvalidPortionIndex) {
	utility::string_t paramName = utils->getTestValue("getSubshapeParagraphPortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSubshapeParagraphPortion", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("getSubshapeParagraphPortion", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("getSubshapeParagraphPortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getSubshapeParagraphPortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("getSubshapeParagraphPortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("getSubshapeParagraphPortion", "password");
	utility::string_t paramFolder = utils->getTestValue("getSubshapeParagraphPortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSubshapeParagraphPortion", "storage");
	paramPortionIndex = utils->getInvalidIntTestValue("getSubshapeParagraphPortion", "portionIndex", paramPortionIndex).value();
	utils->initialize("getSubshapeParagraphPortion", "portionIndex", paramPortionIndex);

	bool failed = true;
	try
	{
		api->getSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSubshapeParagraphPortion", "portionIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSubshapeParagraphPortion", "portionIndex", paramPortionIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSubshapeParagraphPortion", "portionIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSubshapeParagraphPortion", "portionIndex", paramPortionIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSubshapeParagraphPortion", "portionIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSubshapeParagraphPortionInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getSubshapeParagraphPortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSubshapeParagraphPortion", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("getSubshapeParagraphPortion", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("getSubshapeParagraphPortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getSubshapeParagraphPortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("getSubshapeParagraphPortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("getSubshapeParagraphPortion", "password");
	utility::string_t paramFolder = utils->getTestValue("getSubshapeParagraphPortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSubshapeParagraphPortion", "storage");
	paramPassword = utils->getInvalidTestValue("getSubshapeParagraphPortion", "password", paramPassword);
	utils->initialize("getSubshapeParagraphPortion", "password", paramPassword);

	bool failed = true;
	try
	{
		api->getSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSubshapeParagraphPortion", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSubshapeParagraphPortion", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSubshapeParagraphPortion", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSubshapeParagraphPortion", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSubshapeParagraphPortion", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSubshapeParagraphPortionInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getSubshapeParagraphPortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSubshapeParagraphPortion", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("getSubshapeParagraphPortion", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("getSubshapeParagraphPortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getSubshapeParagraphPortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("getSubshapeParagraphPortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("getSubshapeParagraphPortion", "password");
	utility::string_t paramFolder = utils->getTestValue("getSubshapeParagraphPortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSubshapeParagraphPortion", "storage");
	paramFolder = utils->getInvalidTestValue("getSubshapeParagraphPortion", "folder", paramFolder);
	utils->initialize("getSubshapeParagraphPortion", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->getSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSubshapeParagraphPortion", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSubshapeParagraphPortion", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSubshapeParagraphPortion", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSubshapeParagraphPortion", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSubshapeParagraphPortion", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSubshapeParagraphPortionInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getSubshapeParagraphPortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSubshapeParagraphPortion", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("getSubshapeParagraphPortion", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("getSubshapeParagraphPortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getSubshapeParagraphPortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("getSubshapeParagraphPortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("getSubshapeParagraphPortion", "password");
	utility::string_t paramFolder = utils->getTestValue("getSubshapeParagraphPortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSubshapeParagraphPortion", "storage");
	paramStorage = utils->getInvalidTestValue("getSubshapeParagraphPortion", "storage", paramStorage);
	utils->initialize("getSubshapeParagraphPortion", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->getSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSubshapeParagraphPortion", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSubshapeParagraphPortion", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSubshapeParagraphPortion", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSubshapeParagraphPortion", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSubshapeParagraphPortion", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSubshapeParagraphPortions) {
	utility::string_t paramName = utils->getTestValue("getSubshapeParagraphPortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSubshapeParagraphPortions", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("getSubshapeParagraphPortions", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("getSubshapeParagraphPortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getSubshapeParagraphPortions", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("getSubshapeParagraphPortions", "password");
	utility::string_t paramFolder = utils->getTestValue("getSubshapeParagraphPortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSubshapeParagraphPortions", "storage");
	utils->initialize("getSubshapeParagraphPortions", "");
	std::shared_ptr<Portions> result = api->getSubshapePortions(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getSubshapeParagraphPortionsInvalidName) {
	utility::string_t paramName = utils->getTestValue("getSubshapeParagraphPortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSubshapeParagraphPortions", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("getSubshapeParagraphPortions", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("getSubshapeParagraphPortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getSubshapeParagraphPortions", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("getSubshapeParagraphPortions", "password");
	utility::string_t paramFolder = utils->getTestValue("getSubshapeParagraphPortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSubshapeParagraphPortions", "storage");
	paramName = utils->getInvalidTestValue("getSubshapeParagraphPortions", "name", paramName);
	utils->initialize("getSubshapeParagraphPortions", "name", paramName);

	bool failed = true;
	try
	{
		api->getSubshapePortions(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSubshapeParagraphPortions", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSubshapeParagraphPortions", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSubshapeParagraphPortions", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSubshapeParagraphPortions", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSubshapeParagraphPortions", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSubshapeParagraphPortionsInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getSubshapeParagraphPortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSubshapeParagraphPortions", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("getSubshapeParagraphPortions", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("getSubshapeParagraphPortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getSubshapeParagraphPortions", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("getSubshapeParagraphPortions", "password");
	utility::string_t paramFolder = utils->getTestValue("getSubshapeParagraphPortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSubshapeParagraphPortions", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("getSubshapeParagraphPortions", "slideIndex", paramSlideIndex).value();
	utils->initialize("getSubshapeParagraphPortions", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->getSubshapePortions(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSubshapeParagraphPortions", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSubshapeParagraphPortions", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSubshapeParagraphPortions", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSubshapeParagraphPortions", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSubshapeParagraphPortions", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSubshapeParagraphPortionsInvalidPath) {
	utility::string_t paramName = utils->getTestValue("getSubshapeParagraphPortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSubshapeParagraphPortions", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("getSubshapeParagraphPortions", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("getSubshapeParagraphPortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getSubshapeParagraphPortions", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("getSubshapeParagraphPortions", "password");
	utility::string_t paramFolder = utils->getTestValue("getSubshapeParagraphPortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSubshapeParagraphPortions", "storage");
	paramPath = utils->getInvalidTestValue("getSubshapeParagraphPortions", "path", paramPath);
	utils->initialize("getSubshapeParagraphPortions", "path", paramPath);

	bool failed = true;
	try
	{
		api->getSubshapePortions(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSubshapeParagraphPortions", "path");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSubshapeParagraphPortions", "path", paramPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSubshapeParagraphPortions", "path");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSubshapeParagraphPortions", "path", paramPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSubshapeParagraphPortions", "path"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSubshapeParagraphPortionsInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("getSubshapeParagraphPortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSubshapeParagraphPortions", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("getSubshapeParagraphPortions", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("getSubshapeParagraphPortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getSubshapeParagraphPortions", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("getSubshapeParagraphPortions", "password");
	utility::string_t paramFolder = utils->getTestValue("getSubshapeParagraphPortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSubshapeParagraphPortions", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("getSubshapeParagraphPortions", "shapeIndex", paramShapeIndex).value();
	utils->initialize("getSubshapeParagraphPortions", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->getSubshapePortions(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSubshapeParagraphPortions", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSubshapeParagraphPortions", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSubshapeParagraphPortions", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSubshapeParagraphPortions", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSubshapeParagraphPortions", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSubshapeParagraphPortionsInvalidParagraphIndex) {
	utility::string_t paramName = utils->getTestValue("getSubshapeParagraphPortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSubshapeParagraphPortions", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("getSubshapeParagraphPortions", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("getSubshapeParagraphPortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getSubshapeParagraphPortions", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("getSubshapeParagraphPortions", "password");
	utility::string_t paramFolder = utils->getTestValue("getSubshapeParagraphPortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSubshapeParagraphPortions", "storage");
	paramParagraphIndex = utils->getInvalidIntTestValue("getSubshapeParagraphPortions", "paragraphIndex", paramParagraphIndex).value();
	utils->initialize("getSubshapeParagraphPortions", "paragraphIndex", paramParagraphIndex);

	bool failed = true;
	try
	{
		api->getSubshapePortions(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSubshapeParagraphPortions", "paragraphIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSubshapeParagraphPortions", "paragraphIndex", paramParagraphIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSubshapeParagraphPortions", "paragraphIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSubshapeParagraphPortions", "paragraphIndex", paramParagraphIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSubshapeParagraphPortions", "paragraphIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSubshapeParagraphPortionsInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getSubshapeParagraphPortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSubshapeParagraphPortions", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("getSubshapeParagraphPortions", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("getSubshapeParagraphPortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getSubshapeParagraphPortions", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("getSubshapeParagraphPortions", "password");
	utility::string_t paramFolder = utils->getTestValue("getSubshapeParagraphPortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSubshapeParagraphPortions", "storage");
	paramPassword = utils->getInvalidTestValue("getSubshapeParagraphPortions", "password", paramPassword);
	utils->initialize("getSubshapeParagraphPortions", "password", paramPassword);

	bool failed = true;
	try
	{
		api->getSubshapePortions(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSubshapeParagraphPortions", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSubshapeParagraphPortions", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSubshapeParagraphPortions", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSubshapeParagraphPortions", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSubshapeParagraphPortions", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSubshapeParagraphPortionsInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getSubshapeParagraphPortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSubshapeParagraphPortions", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("getSubshapeParagraphPortions", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("getSubshapeParagraphPortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getSubshapeParagraphPortions", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("getSubshapeParagraphPortions", "password");
	utility::string_t paramFolder = utils->getTestValue("getSubshapeParagraphPortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSubshapeParagraphPortions", "storage");
	paramFolder = utils->getInvalidTestValue("getSubshapeParagraphPortions", "folder", paramFolder);
	utils->initialize("getSubshapeParagraphPortions", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->getSubshapePortions(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSubshapeParagraphPortions", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSubshapeParagraphPortions", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSubshapeParagraphPortions", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSubshapeParagraphPortions", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSubshapeParagraphPortions", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSubshapeParagraphPortionsInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getSubshapeParagraphPortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSubshapeParagraphPortions", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("getSubshapeParagraphPortions", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("getSubshapeParagraphPortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getSubshapeParagraphPortions", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("getSubshapeParagraphPortions", "password");
	utility::string_t paramFolder = utils->getTestValue("getSubshapeParagraphPortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSubshapeParagraphPortions", "storage");
	paramStorage = utils->getInvalidTestValue("getSubshapeParagraphPortions", "storage", paramStorage);
	utils->initialize("getSubshapeParagraphPortions", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->getSubshapePortions(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSubshapeParagraphPortions", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSubshapeParagraphPortions", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSubshapeParagraphPortions", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSubshapeParagraphPortions", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSubshapeParagraphPortions", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, moveFile) {
	utility::string_t paramSrcPath = utils->getTestValue("moveFile", "srcPath");
	utility::string_t paramDestPath = utils->getTestValue("moveFile", "destPath");
	utility::string_t paramSrcStorageName = utils->getTestValue("moveFile", "srcStorageName");
	utility::string_t paramDestStorageName = utils->getTestValue("moveFile", "destStorageName");
	utility::string_t paramVersionId = utils->getTestValue("moveFile", "versionId");
	utils->initialize("moveFile", "");
	api->moveFile(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName, paramVersionId).wait();
}

TEST_F(SlidesApiTest, moveFileInvalidSrcPath) {
	utility::string_t paramSrcPath = utils->getTestValue("moveFile", "srcPath");
	utility::string_t paramDestPath = utils->getTestValue("moveFile", "destPath");
	utility::string_t paramSrcStorageName = utils->getTestValue("moveFile", "srcStorageName");
	utility::string_t paramDestStorageName = utils->getTestValue("moveFile", "destStorageName");
	utility::string_t paramVersionId = utils->getTestValue("moveFile", "versionId");
	paramSrcPath = utils->getInvalidTestValue("moveFile", "srcPath", paramSrcPath);
	utils->initialize("moveFile", "srcPath", paramSrcPath);

	bool failed = true;
	try
	{
		api->moveFile(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName, paramVersionId).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("moveFile", "srcPath");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("moveFile", "srcPath", paramSrcPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("moveFile", "srcPath");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("moveFile", "srcPath", paramSrcPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("moveFile", "srcPath"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, moveFileInvalidDestPath) {
	utility::string_t paramSrcPath = utils->getTestValue("moveFile", "srcPath");
	utility::string_t paramDestPath = utils->getTestValue("moveFile", "destPath");
	utility::string_t paramSrcStorageName = utils->getTestValue("moveFile", "srcStorageName");
	utility::string_t paramDestStorageName = utils->getTestValue("moveFile", "destStorageName");
	utility::string_t paramVersionId = utils->getTestValue("moveFile", "versionId");
	paramDestPath = utils->getInvalidTestValue("moveFile", "destPath", paramDestPath);
	utils->initialize("moveFile", "destPath", paramDestPath);

	bool failed = true;
	try
	{
		api->moveFile(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName, paramVersionId).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("moveFile", "destPath");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("moveFile", "destPath", paramDestPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("moveFile", "destPath");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("moveFile", "destPath", paramDestPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("moveFile", "destPath"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, moveFileInvalidSrcStorageName) {
	utility::string_t paramSrcPath = utils->getTestValue("moveFile", "srcPath");
	utility::string_t paramDestPath = utils->getTestValue("moveFile", "destPath");
	utility::string_t paramSrcStorageName = utils->getTestValue("moveFile", "srcStorageName");
	utility::string_t paramDestStorageName = utils->getTestValue("moveFile", "destStorageName");
	utility::string_t paramVersionId = utils->getTestValue("moveFile", "versionId");
	paramSrcStorageName = utils->getInvalidTestValue("moveFile", "srcStorageName", paramSrcStorageName);
	utils->initialize("moveFile", "srcStorageName", paramSrcStorageName);

	bool failed = true;
	try
	{
		api->moveFile(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName, paramVersionId).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("moveFile", "srcStorageName");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("moveFile", "srcStorageName", paramSrcStorageName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("moveFile", "srcStorageName");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("moveFile", "srcStorageName", paramSrcStorageName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("moveFile", "srcStorageName"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, moveFileInvalidDestStorageName) {
	utility::string_t paramSrcPath = utils->getTestValue("moveFile", "srcPath");
	utility::string_t paramDestPath = utils->getTestValue("moveFile", "destPath");
	utility::string_t paramSrcStorageName = utils->getTestValue("moveFile", "srcStorageName");
	utility::string_t paramDestStorageName = utils->getTestValue("moveFile", "destStorageName");
	utility::string_t paramVersionId = utils->getTestValue("moveFile", "versionId");
	paramDestStorageName = utils->getInvalidTestValue("moveFile", "destStorageName", paramDestStorageName);
	utils->initialize("moveFile", "destStorageName", paramDestStorageName);

	bool failed = true;
	try
	{
		api->moveFile(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName, paramVersionId).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("moveFile", "destStorageName");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("moveFile", "destStorageName", paramDestStorageName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("moveFile", "destStorageName");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("moveFile", "destStorageName", paramDestStorageName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("moveFile", "destStorageName"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, moveFileInvalidVersionId) {
	utility::string_t paramSrcPath = utils->getTestValue("moveFile", "srcPath");
	utility::string_t paramDestPath = utils->getTestValue("moveFile", "destPath");
	utility::string_t paramSrcStorageName = utils->getTestValue("moveFile", "srcStorageName");
	utility::string_t paramDestStorageName = utils->getTestValue("moveFile", "destStorageName");
	utility::string_t paramVersionId = utils->getTestValue("moveFile", "versionId");
	paramVersionId = utils->getInvalidTestValue("moveFile", "versionId", paramVersionId);
	utils->initialize("moveFile", "versionId", paramVersionId);

	bool failed = true;
	try
	{
		api->moveFile(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName, paramVersionId).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("moveFile", "versionId");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("moveFile", "versionId", paramVersionId);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("moveFile", "versionId");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("moveFile", "versionId", paramVersionId);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("moveFile", "versionId"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, moveFolder) {
	utility::string_t paramSrcPath = utils->getTestValue("moveFolder", "srcPath");
	utility::string_t paramDestPath = utils->getTestValue("moveFolder", "destPath");
	utility::string_t paramSrcStorageName = utils->getTestValue("moveFolder", "srcStorageName");
	utility::string_t paramDestStorageName = utils->getTestValue("moveFolder", "destStorageName");
	utils->initialize("moveFolder", "");
	api->moveFolder(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName).wait();
}

TEST_F(SlidesApiTest, moveFolderInvalidSrcPath) {
	utility::string_t paramSrcPath = utils->getTestValue("moveFolder", "srcPath");
	utility::string_t paramDestPath = utils->getTestValue("moveFolder", "destPath");
	utility::string_t paramSrcStorageName = utils->getTestValue("moveFolder", "srcStorageName");
	utility::string_t paramDestStorageName = utils->getTestValue("moveFolder", "destStorageName");
	paramSrcPath = utils->getInvalidTestValue("moveFolder", "srcPath", paramSrcPath);
	utils->initialize("moveFolder", "srcPath", paramSrcPath);

	bool failed = true;
	try
	{
		api->moveFolder(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("moveFolder", "srcPath");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("moveFolder", "srcPath", paramSrcPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("moveFolder", "srcPath");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("moveFolder", "srcPath", paramSrcPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("moveFolder", "srcPath"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, moveFolderInvalidDestPath) {
	utility::string_t paramSrcPath = utils->getTestValue("moveFolder", "srcPath");
	utility::string_t paramDestPath = utils->getTestValue("moveFolder", "destPath");
	utility::string_t paramSrcStorageName = utils->getTestValue("moveFolder", "srcStorageName");
	utility::string_t paramDestStorageName = utils->getTestValue("moveFolder", "destStorageName");
	paramDestPath = utils->getInvalidTestValue("moveFolder", "destPath", paramDestPath);
	utils->initialize("moveFolder", "destPath", paramDestPath);

	bool failed = true;
	try
	{
		api->moveFolder(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("moveFolder", "destPath");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("moveFolder", "destPath", paramDestPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("moveFolder", "destPath");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("moveFolder", "destPath", paramDestPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("moveFolder", "destPath"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, moveFolderInvalidSrcStorageName) {
	utility::string_t paramSrcPath = utils->getTestValue("moveFolder", "srcPath");
	utility::string_t paramDestPath = utils->getTestValue("moveFolder", "destPath");
	utility::string_t paramSrcStorageName = utils->getTestValue("moveFolder", "srcStorageName");
	utility::string_t paramDestStorageName = utils->getTestValue("moveFolder", "destStorageName");
	paramSrcStorageName = utils->getInvalidTestValue("moveFolder", "srcStorageName", paramSrcStorageName);
	utils->initialize("moveFolder", "srcStorageName", paramSrcStorageName);

	bool failed = true;
	try
	{
		api->moveFolder(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("moveFolder", "srcStorageName");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("moveFolder", "srcStorageName", paramSrcStorageName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("moveFolder", "srcStorageName");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("moveFolder", "srcStorageName", paramSrcStorageName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("moveFolder", "srcStorageName"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, moveFolderInvalidDestStorageName) {
	utility::string_t paramSrcPath = utils->getTestValue("moveFolder", "srcPath");
	utility::string_t paramDestPath = utils->getTestValue("moveFolder", "destPath");
	utility::string_t paramSrcStorageName = utils->getTestValue("moveFolder", "srcStorageName");
	utility::string_t paramDestStorageName = utils->getTestValue("moveFolder", "destStorageName");
	paramDestStorageName = utils->getInvalidTestValue("moveFolder", "destStorageName", paramDestStorageName);
	utils->initialize("moveFolder", "destStorageName", paramDestStorageName);

	bool failed = true;
	try
	{
		api->moveFolder(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("moveFolder", "destStorageName");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("moveFolder", "destStorageName", paramDestStorageName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("moveFolder", "destStorageName");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("moveFolder", "destStorageName", paramDestStorageName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("moveFolder", "destStorageName"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, objectExists) {
	utility::string_t paramPath = utils->getTestValue("objectExists", "path");
	utility::string_t paramStorageName = utils->getTestValue("objectExists", "storageName");
	utility::string_t paramVersionId = utils->getTestValue("objectExists", "versionId");
	utils->initialize("objectExists", "");
	std::shared_ptr<ObjectExist> result = api->objectExists(paramPath, paramStorageName, paramVersionId).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, objectExistsInvalidPath) {
	utility::string_t paramPath = utils->getTestValue("objectExists", "path");
	utility::string_t paramStorageName = utils->getTestValue("objectExists", "storageName");
	utility::string_t paramVersionId = utils->getTestValue("objectExists", "versionId");
	paramPath = utils->getInvalidTestValue("objectExists", "path", paramPath);
	utils->initialize("objectExists", "path", paramPath);

	bool failed = true;
	try
	{
		api->objectExists(paramPath, paramStorageName, paramVersionId).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("objectExists", "path");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("objectExists", "path", paramPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("objectExists", "path");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("objectExists", "path", paramPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("objectExists", "path"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, objectExistsInvalidStorageName) {
	utility::string_t paramPath = utils->getTestValue("objectExists", "path");
	utility::string_t paramStorageName = utils->getTestValue("objectExists", "storageName");
	utility::string_t paramVersionId = utils->getTestValue("objectExists", "versionId");
	paramStorageName = utils->getInvalidTestValue("objectExists", "storageName", paramStorageName);
	utils->initialize("objectExists", "storageName", paramStorageName);

	bool failed = true;
	try
	{
		api->objectExists(paramPath, paramStorageName, paramVersionId).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("objectExists", "storageName");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("objectExists", "storageName", paramStorageName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("objectExists", "storageName");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("objectExists", "storageName", paramStorageName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("objectExists", "storageName"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, objectExistsInvalidVersionId) {
	utility::string_t paramPath = utils->getTestValue("objectExists", "path");
	utility::string_t paramStorageName = utils->getTestValue("objectExists", "storageName");
	utility::string_t paramVersionId = utils->getTestValue("objectExists", "versionId");
	paramVersionId = utils->getInvalidTestValue("objectExists", "versionId", paramVersionId);
	utils->initialize("objectExists", "versionId", paramVersionId);

	bool failed = true;
	try
	{
		api->objectExists(paramPath, paramStorageName, paramVersionId).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("objectExists", "versionId");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("objectExists", "versionId", paramVersionId);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("objectExists", "versionId");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("objectExists", "versionId", paramVersionId);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("objectExists", "versionId"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewParagraph) {
	utility::string_t paramName = utils->getTestValue("postAddNewParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postAddNewParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("postAddNewParagraph", "shapeIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("postAddNewParagraph", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("postAddNewParagraph", "position");
	utility::string_t paramPassword = utils->getTestValue("postAddNewParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("postAddNewParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("postAddNewParagraph", "storage");
	utils->initialize("postAddNewParagraph", "");
	std::shared_ptr<Paragraph> result = api->createParagraph(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, postAddNewParagraphInvalidName) {
	utility::string_t paramName = utils->getTestValue("postAddNewParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postAddNewParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("postAddNewParagraph", "shapeIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("postAddNewParagraph", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("postAddNewParagraph", "position");
	utility::string_t paramPassword = utils->getTestValue("postAddNewParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("postAddNewParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("postAddNewParagraph", "storage");
	paramName = utils->getInvalidTestValue("postAddNewParagraph", "name", paramName);
	utils->initialize("postAddNewParagraph", "name", paramName);

	bool failed = true;
	try
	{
		api->createParagraph(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewParagraph", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewParagraph", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewParagraph", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewParagraph", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewParagraph", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewParagraphInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("postAddNewParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postAddNewParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("postAddNewParagraph", "shapeIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("postAddNewParagraph", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("postAddNewParagraph", "position");
	utility::string_t paramPassword = utils->getTestValue("postAddNewParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("postAddNewParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("postAddNewParagraph", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("postAddNewParagraph", "slideIndex", paramSlideIndex).value();
	utils->initialize("postAddNewParagraph", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->createParagraph(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewParagraph", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewParagraph", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewParagraph", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewParagraph", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewParagraph", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewParagraphInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("postAddNewParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postAddNewParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("postAddNewParagraph", "shapeIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("postAddNewParagraph", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("postAddNewParagraph", "position");
	utility::string_t paramPassword = utils->getTestValue("postAddNewParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("postAddNewParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("postAddNewParagraph", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("postAddNewParagraph", "shapeIndex", paramShapeIndex).value();
	utils->initialize("postAddNewParagraph", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->createParagraph(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewParagraph", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewParagraph", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewParagraph", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewParagraph", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewParagraph", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewParagraphInvalidDto) {
	utility::string_t paramName = utils->getTestValue("postAddNewParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postAddNewParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("postAddNewParagraph", "shapeIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("postAddNewParagraph", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("postAddNewParagraph", "position");
	utility::string_t paramPassword = utils->getTestValue("postAddNewParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("postAddNewParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("postAddNewParagraph", "storage");
	paramDto = utils->getInvalidTestValueForClass<>("postAddNewParagraph", "dto", paramDto);
	utils->initialize("postAddNewParagraph", "dto", paramDto);

	bool failed = true;
	try
	{
		api->createParagraph(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewParagraph", "dto");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewParagraph", "dto", paramDto);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewParagraph", "dto");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewParagraph", "dto", paramDto);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewParagraph", "dto"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewParagraphInvalidPosition) {
	utility::string_t paramName = utils->getTestValue("postAddNewParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postAddNewParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("postAddNewParagraph", "shapeIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("postAddNewParagraph", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("postAddNewParagraph", "position");
	utility::string_t paramPassword = utils->getTestValue("postAddNewParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("postAddNewParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("postAddNewParagraph", "storage");
	paramPosition = utils->getInvalidIntTestValue("postAddNewParagraph", "position", paramPosition).value();
	utils->initialize("postAddNewParagraph", "position", paramPosition);

	bool failed = true;
	try
	{
		api->createParagraph(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewParagraph", "position");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewParagraph", "position", paramPosition);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewParagraph", "position");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewParagraph", "position", paramPosition);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewParagraph", "position"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewParagraphInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("postAddNewParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postAddNewParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("postAddNewParagraph", "shapeIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("postAddNewParagraph", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("postAddNewParagraph", "position");
	utility::string_t paramPassword = utils->getTestValue("postAddNewParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("postAddNewParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("postAddNewParagraph", "storage");
	paramPassword = utils->getInvalidTestValue("postAddNewParagraph", "password", paramPassword);
	utils->initialize("postAddNewParagraph", "password", paramPassword);

	bool failed = true;
	try
	{
		api->createParagraph(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewParagraph", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewParagraph", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewParagraph", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewParagraph", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewParagraph", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewParagraphInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("postAddNewParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postAddNewParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("postAddNewParagraph", "shapeIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("postAddNewParagraph", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("postAddNewParagraph", "position");
	utility::string_t paramPassword = utils->getTestValue("postAddNewParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("postAddNewParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("postAddNewParagraph", "storage");
	paramFolder = utils->getInvalidTestValue("postAddNewParagraph", "folder", paramFolder);
	utils->initialize("postAddNewParagraph", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->createParagraph(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewParagraph", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewParagraph", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewParagraph", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewParagraph", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewParagraph", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewParagraphInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("postAddNewParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postAddNewParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("postAddNewParagraph", "shapeIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("postAddNewParagraph", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("postAddNewParagraph", "position");
	utility::string_t paramPassword = utils->getTestValue("postAddNewParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("postAddNewParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("postAddNewParagraph", "storage");
	paramStorage = utils->getInvalidTestValue("postAddNewParagraph", "storage", paramStorage);
	utils->initialize("postAddNewParagraph", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->createParagraph(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewParagraph", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewParagraph", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewParagraph", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewParagraph", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewParagraph", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewPortion) {
	utility::string_t paramName = utils->getTestValue("postAddNewPortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postAddNewPortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("postAddNewPortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("postAddNewPortion", "paragraphIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("postAddNewPortion", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("postAddNewPortion", "position");
	utility::string_t paramPassword = utils->getTestValue("postAddNewPortion", "password");
	utility::string_t paramFolder = utils->getTestValue("postAddNewPortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("postAddNewPortion", "storage");
	utils->initialize("postAddNewPortion", "");
	std::shared_ptr<Portion> result = api->createPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, postAddNewPortionInvalidName) {
	utility::string_t paramName = utils->getTestValue("postAddNewPortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postAddNewPortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("postAddNewPortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("postAddNewPortion", "paragraphIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("postAddNewPortion", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("postAddNewPortion", "position");
	utility::string_t paramPassword = utils->getTestValue("postAddNewPortion", "password");
	utility::string_t paramFolder = utils->getTestValue("postAddNewPortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("postAddNewPortion", "storage");
	paramName = utils->getInvalidTestValue("postAddNewPortion", "name", paramName);
	utils->initialize("postAddNewPortion", "name", paramName);

	bool failed = true;
	try
	{
		api->createPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewPortion", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewPortion", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewPortion", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewPortion", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewPortion", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewPortionInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("postAddNewPortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postAddNewPortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("postAddNewPortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("postAddNewPortion", "paragraphIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("postAddNewPortion", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("postAddNewPortion", "position");
	utility::string_t paramPassword = utils->getTestValue("postAddNewPortion", "password");
	utility::string_t paramFolder = utils->getTestValue("postAddNewPortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("postAddNewPortion", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("postAddNewPortion", "slideIndex", paramSlideIndex).value();
	utils->initialize("postAddNewPortion", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->createPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewPortion", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewPortion", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewPortion", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewPortion", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewPortion", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewPortionInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("postAddNewPortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postAddNewPortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("postAddNewPortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("postAddNewPortion", "paragraphIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("postAddNewPortion", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("postAddNewPortion", "position");
	utility::string_t paramPassword = utils->getTestValue("postAddNewPortion", "password");
	utility::string_t paramFolder = utils->getTestValue("postAddNewPortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("postAddNewPortion", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("postAddNewPortion", "shapeIndex", paramShapeIndex).value();
	utils->initialize("postAddNewPortion", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->createPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewPortion", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewPortion", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewPortion", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewPortion", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewPortion", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewPortionInvalidParagraphIndex) {
	utility::string_t paramName = utils->getTestValue("postAddNewPortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postAddNewPortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("postAddNewPortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("postAddNewPortion", "paragraphIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("postAddNewPortion", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("postAddNewPortion", "position");
	utility::string_t paramPassword = utils->getTestValue("postAddNewPortion", "password");
	utility::string_t paramFolder = utils->getTestValue("postAddNewPortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("postAddNewPortion", "storage");
	paramParagraphIndex = utils->getInvalidIntTestValue("postAddNewPortion", "paragraphIndex", paramParagraphIndex).value();
	utils->initialize("postAddNewPortion", "paragraphIndex", paramParagraphIndex);

	bool failed = true;
	try
	{
		api->createPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewPortion", "paragraphIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewPortion", "paragraphIndex", paramParagraphIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewPortion", "paragraphIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewPortion", "paragraphIndex", paramParagraphIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewPortion", "paragraphIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewPortionInvalidDto) {
	utility::string_t paramName = utils->getTestValue("postAddNewPortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postAddNewPortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("postAddNewPortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("postAddNewPortion", "paragraphIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("postAddNewPortion", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("postAddNewPortion", "position");
	utility::string_t paramPassword = utils->getTestValue("postAddNewPortion", "password");
	utility::string_t paramFolder = utils->getTestValue("postAddNewPortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("postAddNewPortion", "storage");
	paramDto = utils->getInvalidTestValueForClass<>("postAddNewPortion", "dto", paramDto);
	utils->initialize("postAddNewPortion", "dto", paramDto);

	bool failed = true;
	try
	{
		api->createPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewPortion", "dto");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewPortion", "dto", paramDto);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewPortion", "dto");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewPortion", "dto", paramDto);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewPortion", "dto"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewPortionInvalidPosition) {
	utility::string_t paramName = utils->getTestValue("postAddNewPortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postAddNewPortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("postAddNewPortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("postAddNewPortion", "paragraphIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("postAddNewPortion", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("postAddNewPortion", "position");
	utility::string_t paramPassword = utils->getTestValue("postAddNewPortion", "password");
	utility::string_t paramFolder = utils->getTestValue("postAddNewPortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("postAddNewPortion", "storage");
	paramPosition = utils->getInvalidIntTestValue("postAddNewPortion", "position", paramPosition).value();
	utils->initialize("postAddNewPortion", "position", paramPosition);

	bool failed = true;
	try
	{
		api->createPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewPortion", "position");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewPortion", "position", paramPosition);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewPortion", "position");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewPortion", "position", paramPosition);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewPortion", "position"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewPortionInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("postAddNewPortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postAddNewPortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("postAddNewPortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("postAddNewPortion", "paragraphIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("postAddNewPortion", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("postAddNewPortion", "position");
	utility::string_t paramPassword = utils->getTestValue("postAddNewPortion", "password");
	utility::string_t paramFolder = utils->getTestValue("postAddNewPortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("postAddNewPortion", "storage");
	paramPassword = utils->getInvalidTestValue("postAddNewPortion", "password", paramPassword);
	utils->initialize("postAddNewPortion", "password", paramPassword);

	bool failed = true;
	try
	{
		api->createPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewPortion", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewPortion", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewPortion", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewPortion", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewPortion", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewPortionInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("postAddNewPortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postAddNewPortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("postAddNewPortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("postAddNewPortion", "paragraphIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("postAddNewPortion", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("postAddNewPortion", "position");
	utility::string_t paramPassword = utils->getTestValue("postAddNewPortion", "password");
	utility::string_t paramFolder = utils->getTestValue("postAddNewPortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("postAddNewPortion", "storage");
	paramFolder = utils->getInvalidTestValue("postAddNewPortion", "folder", paramFolder);
	utils->initialize("postAddNewPortion", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->createPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewPortion", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewPortion", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewPortion", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewPortion", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewPortion", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewPortionInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("postAddNewPortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postAddNewPortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("postAddNewPortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("postAddNewPortion", "paragraphIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("postAddNewPortion", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("postAddNewPortion", "position");
	utility::string_t paramPassword = utils->getTestValue("postAddNewPortion", "password");
	utility::string_t paramFolder = utils->getTestValue("postAddNewPortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("postAddNewPortion", "storage");
	paramStorage = utils->getInvalidTestValue("postAddNewPortion", "storage", paramStorage);
	utils->initialize("postAddNewPortion", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->createPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewPortion", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewPortion", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewPortion", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewPortion", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewPortion", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewShape) {
	utility::string_t paramName = utils->getTestValue("postAddNewShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postAddNewShape", "slideIndex");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("postAddNewShape", "dto");
	auto paramShapeToClone = utils->getOptionalIntTestValue("postAddNewShape", "shapeToClone");
	auto paramPosition = utils->getOptionalIntTestValue("postAddNewShape", "position");
	utility::string_t paramPassword = utils->getTestValue("postAddNewShape", "password");
	utility::string_t paramFolder = utils->getTestValue("postAddNewShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("postAddNewShape", "storage");
	utils->initialize("postAddNewShape", "");
	std::shared_ptr<ShapeBase> result = api->createShape(paramName, paramSlideIndex, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, postAddNewShapeInvalidName) {
	utility::string_t paramName = utils->getTestValue("postAddNewShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postAddNewShape", "slideIndex");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("postAddNewShape", "dto");
	auto paramShapeToClone = utils->getOptionalIntTestValue("postAddNewShape", "shapeToClone");
	auto paramPosition = utils->getOptionalIntTestValue("postAddNewShape", "position");
	utility::string_t paramPassword = utils->getTestValue("postAddNewShape", "password");
	utility::string_t paramFolder = utils->getTestValue("postAddNewShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("postAddNewShape", "storage");
	paramName = utils->getInvalidTestValue("postAddNewShape", "name", paramName);
	utils->initialize("postAddNewShape", "name", paramName);

	bool failed = true;
	try
	{
		api->createShape(paramName, paramSlideIndex, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewShape", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewShape", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewShape", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewShape", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewShape", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewShapeInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("postAddNewShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postAddNewShape", "slideIndex");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("postAddNewShape", "dto");
	auto paramShapeToClone = utils->getOptionalIntTestValue("postAddNewShape", "shapeToClone");
	auto paramPosition = utils->getOptionalIntTestValue("postAddNewShape", "position");
	utility::string_t paramPassword = utils->getTestValue("postAddNewShape", "password");
	utility::string_t paramFolder = utils->getTestValue("postAddNewShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("postAddNewShape", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("postAddNewShape", "slideIndex", paramSlideIndex).value();
	utils->initialize("postAddNewShape", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->createShape(paramName, paramSlideIndex, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewShape", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewShape", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewShape", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewShape", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewShape", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewShapeInvalidDto) {
	utility::string_t paramName = utils->getTestValue("postAddNewShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postAddNewShape", "slideIndex");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("postAddNewShape", "dto");
	auto paramShapeToClone = utils->getOptionalIntTestValue("postAddNewShape", "shapeToClone");
	auto paramPosition = utils->getOptionalIntTestValue("postAddNewShape", "position");
	utility::string_t paramPassword = utils->getTestValue("postAddNewShape", "password");
	utility::string_t paramFolder = utils->getTestValue("postAddNewShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("postAddNewShape", "storage");
	paramDto = utils->getInvalidTestValueForClass<>("postAddNewShape", "dto", paramDto);
	utils->initialize("postAddNewShape", "dto", paramDto);

	bool failed = true;
	try
	{
		api->createShape(paramName, paramSlideIndex, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewShape", "dto");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewShape", "dto", paramDto);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewShape", "dto");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewShape", "dto", paramDto);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewShape", "dto"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewShapeInvalidShapeToClone) {
	utility::string_t paramName = utils->getTestValue("postAddNewShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postAddNewShape", "slideIndex");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("postAddNewShape", "dto");
	auto paramShapeToClone = utils->getOptionalIntTestValue("postAddNewShape", "shapeToClone");
	auto paramPosition = utils->getOptionalIntTestValue("postAddNewShape", "position");
	utility::string_t paramPassword = utils->getTestValue("postAddNewShape", "password");
	utility::string_t paramFolder = utils->getTestValue("postAddNewShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("postAddNewShape", "storage");
	paramShapeToClone = utils->getInvalidIntTestValue("postAddNewShape", "shapeToClone", paramShapeToClone).value();
	utils->initialize("postAddNewShape", "shapeToClone", paramShapeToClone);

	bool failed = true;
	try
	{
		api->createShape(paramName, paramSlideIndex, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewShape", "shapeToClone");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewShape", "shapeToClone", paramShapeToClone);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewShape", "shapeToClone");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewShape", "shapeToClone", paramShapeToClone);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewShape", "shapeToClone"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewShapeInvalidPosition) {
	utility::string_t paramName = utils->getTestValue("postAddNewShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postAddNewShape", "slideIndex");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("postAddNewShape", "dto");
	auto paramShapeToClone = utils->getOptionalIntTestValue("postAddNewShape", "shapeToClone");
	auto paramPosition = utils->getOptionalIntTestValue("postAddNewShape", "position");
	utility::string_t paramPassword = utils->getTestValue("postAddNewShape", "password");
	utility::string_t paramFolder = utils->getTestValue("postAddNewShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("postAddNewShape", "storage");
	paramPosition = utils->getInvalidIntTestValue("postAddNewShape", "position", paramPosition).value();
	utils->initialize("postAddNewShape", "position", paramPosition);

	bool failed = true;
	try
	{
		api->createShape(paramName, paramSlideIndex, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewShape", "position");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewShape", "position", paramPosition);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewShape", "position");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewShape", "position", paramPosition);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewShape", "position"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewShapeInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("postAddNewShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postAddNewShape", "slideIndex");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("postAddNewShape", "dto");
	auto paramShapeToClone = utils->getOptionalIntTestValue("postAddNewShape", "shapeToClone");
	auto paramPosition = utils->getOptionalIntTestValue("postAddNewShape", "position");
	utility::string_t paramPassword = utils->getTestValue("postAddNewShape", "password");
	utility::string_t paramFolder = utils->getTestValue("postAddNewShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("postAddNewShape", "storage");
	paramPassword = utils->getInvalidTestValue("postAddNewShape", "password", paramPassword);
	utils->initialize("postAddNewShape", "password", paramPassword);

	bool failed = true;
	try
	{
		api->createShape(paramName, paramSlideIndex, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewShape", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewShape", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewShape", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewShape", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewShape", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewShapeInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("postAddNewShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postAddNewShape", "slideIndex");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("postAddNewShape", "dto");
	auto paramShapeToClone = utils->getOptionalIntTestValue("postAddNewShape", "shapeToClone");
	auto paramPosition = utils->getOptionalIntTestValue("postAddNewShape", "position");
	utility::string_t paramPassword = utils->getTestValue("postAddNewShape", "password");
	utility::string_t paramFolder = utils->getTestValue("postAddNewShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("postAddNewShape", "storage");
	paramFolder = utils->getInvalidTestValue("postAddNewShape", "folder", paramFolder);
	utils->initialize("postAddNewShape", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->createShape(paramName, paramSlideIndex, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewShape", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewShape", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewShape", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewShape", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewShape", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewShapeInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("postAddNewShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postAddNewShape", "slideIndex");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("postAddNewShape", "dto");
	auto paramShapeToClone = utils->getOptionalIntTestValue("postAddNewShape", "shapeToClone");
	auto paramPosition = utils->getOptionalIntTestValue("postAddNewShape", "position");
	utility::string_t paramPassword = utils->getTestValue("postAddNewShape", "password");
	utility::string_t paramFolder = utils->getTestValue("postAddNewShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("postAddNewShape", "storage");
	paramStorage = utils->getInvalidTestValue("postAddNewShape", "storage", paramStorage);
	utils->initialize("postAddNewShape", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->createShape(paramName, paramSlideIndex, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewShape", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewShape", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewShape", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewShape", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewShape", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewSubshape) {
	utility::string_t paramName = utils->getTestValue("postAddNewSubshape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postAddNewSubshape", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("postAddNewSubshape", "path");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("postAddNewSubshape", "dto");
	auto paramShapeToClone = utils->getOptionalIntTestValue("postAddNewSubshape", "shapeToClone");
	auto paramPosition = utils->getOptionalIntTestValue("postAddNewSubshape", "position");
	utility::string_t paramPassword = utils->getTestValue("postAddNewSubshape", "password");
	utility::string_t paramFolder = utils->getTestValue("postAddNewSubshape", "folder");
	utility::string_t paramStorage = utils->getTestValue("postAddNewSubshape", "storage");
	utils->initialize("postAddNewSubshape", "");
	std::shared_ptr<ShapeBase> result = api->createSubshape(paramName, paramSlideIndex, paramPath, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, postAddNewSubshapeInvalidName) {
	utility::string_t paramName = utils->getTestValue("postAddNewSubshape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postAddNewSubshape", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("postAddNewSubshape", "path");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("postAddNewSubshape", "dto");
	auto paramShapeToClone = utils->getOptionalIntTestValue("postAddNewSubshape", "shapeToClone");
	auto paramPosition = utils->getOptionalIntTestValue("postAddNewSubshape", "position");
	utility::string_t paramPassword = utils->getTestValue("postAddNewSubshape", "password");
	utility::string_t paramFolder = utils->getTestValue("postAddNewSubshape", "folder");
	utility::string_t paramStorage = utils->getTestValue("postAddNewSubshape", "storage");
	paramName = utils->getInvalidTestValue("postAddNewSubshape", "name", paramName);
	utils->initialize("postAddNewSubshape", "name", paramName);

	bool failed = true;
	try
	{
		api->createSubshape(paramName, paramSlideIndex, paramPath, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshape", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshape", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshape", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshape", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewSubshape", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewSubshapeInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("postAddNewSubshape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postAddNewSubshape", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("postAddNewSubshape", "path");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("postAddNewSubshape", "dto");
	auto paramShapeToClone = utils->getOptionalIntTestValue("postAddNewSubshape", "shapeToClone");
	auto paramPosition = utils->getOptionalIntTestValue("postAddNewSubshape", "position");
	utility::string_t paramPassword = utils->getTestValue("postAddNewSubshape", "password");
	utility::string_t paramFolder = utils->getTestValue("postAddNewSubshape", "folder");
	utility::string_t paramStorage = utils->getTestValue("postAddNewSubshape", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("postAddNewSubshape", "slideIndex", paramSlideIndex).value();
	utils->initialize("postAddNewSubshape", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->createSubshape(paramName, paramSlideIndex, paramPath, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshape", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshape", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshape", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshape", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewSubshape", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewSubshapeInvalidPath) {
	utility::string_t paramName = utils->getTestValue("postAddNewSubshape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postAddNewSubshape", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("postAddNewSubshape", "path");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("postAddNewSubshape", "dto");
	auto paramShapeToClone = utils->getOptionalIntTestValue("postAddNewSubshape", "shapeToClone");
	auto paramPosition = utils->getOptionalIntTestValue("postAddNewSubshape", "position");
	utility::string_t paramPassword = utils->getTestValue("postAddNewSubshape", "password");
	utility::string_t paramFolder = utils->getTestValue("postAddNewSubshape", "folder");
	utility::string_t paramStorage = utils->getTestValue("postAddNewSubshape", "storage");
	paramPath = utils->getInvalidTestValue("postAddNewSubshape", "path", paramPath);
	utils->initialize("postAddNewSubshape", "path", paramPath);

	bool failed = true;
	try
	{
		api->createSubshape(paramName, paramSlideIndex, paramPath, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshape", "path");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshape", "path", paramPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshape", "path");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshape", "path", paramPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewSubshape", "path"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewSubshapeInvalidDto) {
	utility::string_t paramName = utils->getTestValue("postAddNewSubshape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postAddNewSubshape", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("postAddNewSubshape", "path");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("postAddNewSubshape", "dto");
	auto paramShapeToClone = utils->getOptionalIntTestValue("postAddNewSubshape", "shapeToClone");
	auto paramPosition = utils->getOptionalIntTestValue("postAddNewSubshape", "position");
	utility::string_t paramPassword = utils->getTestValue("postAddNewSubshape", "password");
	utility::string_t paramFolder = utils->getTestValue("postAddNewSubshape", "folder");
	utility::string_t paramStorage = utils->getTestValue("postAddNewSubshape", "storage");
	paramDto = utils->getInvalidTestValueForClass<>("postAddNewSubshape", "dto", paramDto);
	utils->initialize("postAddNewSubshape", "dto", paramDto);

	bool failed = true;
	try
	{
		api->createSubshape(paramName, paramSlideIndex, paramPath, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshape", "dto");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshape", "dto", paramDto);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshape", "dto");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshape", "dto", paramDto);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewSubshape", "dto"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewSubshapeInvalidShapeToClone) {
	utility::string_t paramName = utils->getTestValue("postAddNewSubshape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postAddNewSubshape", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("postAddNewSubshape", "path");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("postAddNewSubshape", "dto");
	auto paramShapeToClone = utils->getOptionalIntTestValue("postAddNewSubshape", "shapeToClone");
	auto paramPosition = utils->getOptionalIntTestValue("postAddNewSubshape", "position");
	utility::string_t paramPassword = utils->getTestValue("postAddNewSubshape", "password");
	utility::string_t paramFolder = utils->getTestValue("postAddNewSubshape", "folder");
	utility::string_t paramStorage = utils->getTestValue("postAddNewSubshape", "storage");
	paramShapeToClone = utils->getInvalidIntTestValue("postAddNewSubshape", "shapeToClone", paramShapeToClone).value();
	utils->initialize("postAddNewSubshape", "shapeToClone", paramShapeToClone);

	bool failed = true;
	try
	{
		api->createSubshape(paramName, paramSlideIndex, paramPath, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshape", "shapeToClone");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshape", "shapeToClone", paramShapeToClone);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshape", "shapeToClone");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshape", "shapeToClone", paramShapeToClone);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewSubshape", "shapeToClone"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewSubshapeInvalidPosition) {
	utility::string_t paramName = utils->getTestValue("postAddNewSubshape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postAddNewSubshape", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("postAddNewSubshape", "path");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("postAddNewSubshape", "dto");
	auto paramShapeToClone = utils->getOptionalIntTestValue("postAddNewSubshape", "shapeToClone");
	auto paramPosition = utils->getOptionalIntTestValue("postAddNewSubshape", "position");
	utility::string_t paramPassword = utils->getTestValue("postAddNewSubshape", "password");
	utility::string_t paramFolder = utils->getTestValue("postAddNewSubshape", "folder");
	utility::string_t paramStorage = utils->getTestValue("postAddNewSubshape", "storage");
	paramPosition = utils->getInvalidIntTestValue("postAddNewSubshape", "position", paramPosition).value();
	utils->initialize("postAddNewSubshape", "position", paramPosition);

	bool failed = true;
	try
	{
		api->createSubshape(paramName, paramSlideIndex, paramPath, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshape", "position");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshape", "position", paramPosition);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshape", "position");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshape", "position", paramPosition);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewSubshape", "position"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewSubshapeInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("postAddNewSubshape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postAddNewSubshape", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("postAddNewSubshape", "path");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("postAddNewSubshape", "dto");
	auto paramShapeToClone = utils->getOptionalIntTestValue("postAddNewSubshape", "shapeToClone");
	auto paramPosition = utils->getOptionalIntTestValue("postAddNewSubshape", "position");
	utility::string_t paramPassword = utils->getTestValue("postAddNewSubshape", "password");
	utility::string_t paramFolder = utils->getTestValue("postAddNewSubshape", "folder");
	utility::string_t paramStorage = utils->getTestValue("postAddNewSubshape", "storage");
	paramPassword = utils->getInvalidTestValue("postAddNewSubshape", "password", paramPassword);
	utils->initialize("postAddNewSubshape", "password", paramPassword);

	bool failed = true;
	try
	{
		api->createSubshape(paramName, paramSlideIndex, paramPath, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshape", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshape", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshape", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshape", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewSubshape", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewSubshapeInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("postAddNewSubshape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postAddNewSubshape", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("postAddNewSubshape", "path");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("postAddNewSubshape", "dto");
	auto paramShapeToClone = utils->getOptionalIntTestValue("postAddNewSubshape", "shapeToClone");
	auto paramPosition = utils->getOptionalIntTestValue("postAddNewSubshape", "position");
	utility::string_t paramPassword = utils->getTestValue("postAddNewSubshape", "password");
	utility::string_t paramFolder = utils->getTestValue("postAddNewSubshape", "folder");
	utility::string_t paramStorage = utils->getTestValue("postAddNewSubshape", "storage");
	paramFolder = utils->getInvalidTestValue("postAddNewSubshape", "folder", paramFolder);
	utils->initialize("postAddNewSubshape", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->createSubshape(paramName, paramSlideIndex, paramPath, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshape", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshape", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshape", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshape", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewSubshape", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewSubshapeInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("postAddNewSubshape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postAddNewSubshape", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("postAddNewSubshape", "path");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("postAddNewSubshape", "dto");
	auto paramShapeToClone = utils->getOptionalIntTestValue("postAddNewSubshape", "shapeToClone");
	auto paramPosition = utils->getOptionalIntTestValue("postAddNewSubshape", "position");
	utility::string_t paramPassword = utils->getTestValue("postAddNewSubshape", "password");
	utility::string_t paramFolder = utils->getTestValue("postAddNewSubshape", "folder");
	utility::string_t paramStorage = utils->getTestValue("postAddNewSubshape", "storage");
	paramStorage = utils->getInvalidTestValue("postAddNewSubshape", "storage", paramStorage);
	utils->initialize("postAddNewSubshape", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->createSubshape(paramName, paramSlideIndex, paramPath, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshape", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshape", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshape", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshape", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewSubshape", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewSubshapeParagraph) {
	utility::string_t paramName = utils->getTestValue("postAddNewSubshapeParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postAddNewSubshapeParagraph", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("postAddNewSubshapeParagraph", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("postAddNewSubshapeParagraph", "shapeIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("postAddNewSubshapeParagraph", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("postAddNewSubshapeParagraph", "position");
	utility::string_t paramPassword = utils->getTestValue("postAddNewSubshapeParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("postAddNewSubshapeParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("postAddNewSubshapeParagraph", "storage");
	utils->initialize("postAddNewSubshapeParagraph", "");
	std::shared_ptr<Paragraph> result = api->createSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, postAddNewSubshapeParagraphInvalidName) {
	utility::string_t paramName = utils->getTestValue("postAddNewSubshapeParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postAddNewSubshapeParagraph", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("postAddNewSubshapeParagraph", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("postAddNewSubshapeParagraph", "shapeIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("postAddNewSubshapeParagraph", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("postAddNewSubshapeParagraph", "position");
	utility::string_t paramPassword = utils->getTestValue("postAddNewSubshapeParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("postAddNewSubshapeParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("postAddNewSubshapeParagraph", "storage");
	paramName = utils->getInvalidTestValue("postAddNewSubshapeParagraph", "name", paramName);
	utils->initialize("postAddNewSubshapeParagraph", "name", paramName);

	bool failed = true;
	try
	{
		api->createSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshapeParagraph", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshapeParagraph", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshapeParagraph", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshapeParagraph", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewSubshapeParagraph", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewSubshapeParagraphInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("postAddNewSubshapeParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postAddNewSubshapeParagraph", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("postAddNewSubshapeParagraph", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("postAddNewSubshapeParagraph", "shapeIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("postAddNewSubshapeParagraph", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("postAddNewSubshapeParagraph", "position");
	utility::string_t paramPassword = utils->getTestValue("postAddNewSubshapeParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("postAddNewSubshapeParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("postAddNewSubshapeParagraph", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("postAddNewSubshapeParagraph", "slideIndex", paramSlideIndex).value();
	utils->initialize("postAddNewSubshapeParagraph", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->createSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshapeParagraph", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshapeParagraph", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshapeParagraph", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshapeParagraph", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewSubshapeParagraph", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewSubshapeParagraphInvalidPath) {
	utility::string_t paramName = utils->getTestValue("postAddNewSubshapeParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postAddNewSubshapeParagraph", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("postAddNewSubshapeParagraph", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("postAddNewSubshapeParagraph", "shapeIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("postAddNewSubshapeParagraph", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("postAddNewSubshapeParagraph", "position");
	utility::string_t paramPassword = utils->getTestValue("postAddNewSubshapeParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("postAddNewSubshapeParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("postAddNewSubshapeParagraph", "storage");
	paramPath = utils->getInvalidTestValue("postAddNewSubshapeParagraph", "path", paramPath);
	utils->initialize("postAddNewSubshapeParagraph", "path", paramPath);

	bool failed = true;
	try
	{
		api->createSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshapeParagraph", "path");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshapeParagraph", "path", paramPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshapeParagraph", "path");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshapeParagraph", "path", paramPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewSubshapeParagraph", "path"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewSubshapeParagraphInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("postAddNewSubshapeParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postAddNewSubshapeParagraph", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("postAddNewSubshapeParagraph", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("postAddNewSubshapeParagraph", "shapeIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("postAddNewSubshapeParagraph", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("postAddNewSubshapeParagraph", "position");
	utility::string_t paramPassword = utils->getTestValue("postAddNewSubshapeParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("postAddNewSubshapeParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("postAddNewSubshapeParagraph", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("postAddNewSubshapeParagraph", "shapeIndex", paramShapeIndex).value();
	utils->initialize("postAddNewSubshapeParagraph", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->createSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshapeParagraph", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshapeParagraph", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshapeParagraph", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshapeParagraph", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewSubshapeParagraph", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewSubshapeParagraphInvalidDto) {
	utility::string_t paramName = utils->getTestValue("postAddNewSubshapeParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postAddNewSubshapeParagraph", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("postAddNewSubshapeParagraph", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("postAddNewSubshapeParagraph", "shapeIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("postAddNewSubshapeParagraph", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("postAddNewSubshapeParagraph", "position");
	utility::string_t paramPassword = utils->getTestValue("postAddNewSubshapeParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("postAddNewSubshapeParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("postAddNewSubshapeParagraph", "storage");
	paramDto = utils->getInvalidTestValueForClass<>("postAddNewSubshapeParagraph", "dto", paramDto);
	utils->initialize("postAddNewSubshapeParagraph", "dto", paramDto);

	bool failed = true;
	try
	{
		api->createSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshapeParagraph", "dto");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshapeParagraph", "dto", paramDto);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshapeParagraph", "dto");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshapeParagraph", "dto", paramDto);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewSubshapeParagraph", "dto"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewSubshapeParagraphInvalidPosition) {
	utility::string_t paramName = utils->getTestValue("postAddNewSubshapeParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postAddNewSubshapeParagraph", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("postAddNewSubshapeParagraph", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("postAddNewSubshapeParagraph", "shapeIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("postAddNewSubshapeParagraph", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("postAddNewSubshapeParagraph", "position");
	utility::string_t paramPassword = utils->getTestValue("postAddNewSubshapeParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("postAddNewSubshapeParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("postAddNewSubshapeParagraph", "storage");
	paramPosition = utils->getInvalidIntTestValue("postAddNewSubshapeParagraph", "position", paramPosition).value();
	utils->initialize("postAddNewSubshapeParagraph", "position", paramPosition);

	bool failed = true;
	try
	{
		api->createSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshapeParagraph", "position");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshapeParagraph", "position", paramPosition);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshapeParagraph", "position");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshapeParagraph", "position", paramPosition);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewSubshapeParagraph", "position"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewSubshapeParagraphInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("postAddNewSubshapeParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postAddNewSubshapeParagraph", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("postAddNewSubshapeParagraph", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("postAddNewSubshapeParagraph", "shapeIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("postAddNewSubshapeParagraph", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("postAddNewSubshapeParagraph", "position");
	utility::string_t paramPassword = utils->getTestValue("postAddNewSubshapeParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("postAddNewSubshapeParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("postAddNewSubshapeParagraph", "storage");
	paramPassword = utils->getInvalidTestValue("postAddNewSubshapeParagraph", "password", paramPassword);
	utils->initialize("postAddNewSubshapeParagraph", "password", paramPassword);

	bool failed = true;
	try
	{
		api->createSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshapeParagraph", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshapeParagraph", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshapeParagraph", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshapeParagraph", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewSubshapeParagraph", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewSubshapeParagraphInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("postAddNewSubshapeParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postAddNewSubshapeParagraph", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("postAddNewSubshapeParagraph", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("postAddNewSubshapeParagraph", "shapeIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("postAddNewSubshapeParagraph", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("postAddNewSubshapeParagraph", "position");
	utility::string_t paramPassword = utils->getTestValue("postAddNewSubshapeParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("postAddNewSubshapeParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("postAddNewSubshapeParagraph", "storage");
	paramFolder = utils->getInvalidTestValue("postAddNewSubshapeParagraph", "folder", paramFolder);
	utils->initialize("postAddNewSubshapeParagraph", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->createSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshapeParagraph", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshapeParagraph", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshapeParagraph", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshapeParagraph", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewSubshapeParagraph", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewSubshapeParagraphInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("postAddNewSubshapeParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postAddNewSubshapeParagraph", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("postAddNewSubshapeParagraph", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("postAddNewSubshapeParagraph", "shapeIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("postAddNewSubshapeParagraph", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("postAddNewSubshapeParagraph", "position");
	utility::string_t paramPassword = utils->getTestValue("postAddNewSubshapeParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("postAddNewSubshapeParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("postAddNewSubshapeParagraph", "storage");
	paramStorage = utils->getInvalidTestValue("postAddNewSubshapeParagraph", "storage", paramStorage);
	utils->initialize("postAddNewSubshapeParagraph", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->createSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshapeParagraph", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshapeParagraph", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshapeParagraph", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshapeParagraph", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewSubshapeParagraph", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewSubshapePortion) {
	utility::string_t paramName = utils->getTestValue("postAddNewSubshapePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postAddNewSubshapePortion", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("postAddNewSubshapePortion", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("postAddNewSubshapePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("postAddNewSubshapePortion", "paragraphIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("postAddNewSubshapePortion", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("postAddNewSubshapePortion", "position");
	utility::string_t paramPassword = utils->getTestValue("postAddNewSubshapePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("postAddNewSubshapePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("postAddNewSubshapePortion", "storage");
	utils->initialize("postAddNewSubshapePortion", "");
	std::shared_ptr<Portion> result = api->createSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, postAddNewSubshapePortionInvalidName) {
	utility::string_t paramName = utils->getTestValue("postAddNewSubshapePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postAddNewSubshapePortion", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("postAddNewSubshapePortion", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("postAddNewSubshapePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("postAddNewSubshapePortion", "paragraphIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("postAddNewSubshapePortion", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("postAddNewSubshapePortion", "position");
	utility::string_t paramPassword = utils->getTestValue("postAddNewSubshapePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("postAddNewSubshapePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("postAddNewSubshapePortion", "storage");
	paramName = utils->getInvalidTestValue("postAddNewSubshapePortion", "name", paramName);
	utils->initialize("postAddNewSubshapePortion", "name", paramName);

	bool failed = true;
	try
	{
		api->createSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshapePortion", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshapePortion", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshapePortion", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshapePortion", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewSubshapePortion", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewSubshapePortionInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("postAddNewSubshapePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postAddNewSubshapePortion", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("postAddNewSubshapePortion", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("postAddNewSubshapePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("postAddNewSubshapePortion", "paragraphIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("postAddNewSubshapePortion", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("postAddNewSubshapePortion", "position");
	utility::string_t paramPassword = utils->getTestValue("postAddNewSubshapePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("postAddNewSubshapePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("postAddNewSubshapePortion", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("postAddNewSubshapePortion", "slideIndex", paramSlideIndex).value();
	utils->initialize("postAddNewSubshapePortion", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->createSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshapePortion", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshapePortion", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshapePortion", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshapePortion", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewSubshapePortion", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewSubshapePortionInvalidPath) {
	utility::string_t paramName = utils->getTestValue("postAddNewSubshapePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postAddNewSubshapePortion", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("postAddNewSubshapePortion", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("postAddNewSubshapePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("postAddNewSubshapePortion", "paragraphIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("postAddNewSubshapePortion", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("postAddNewSubshapePortion", "position");
	utility::string_t paramPassword = utils->getTestValue("postAddNewSubshapePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("postAddNewSubshapePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("postAddNewSubshapePortion", "storage");
	paramPath = utils->getInvalidTestValue("postAddNewSubshapePortion", "path", paramPath);
	utils->initialize("postAddNewSubshapePortion", "path", paramPath);

	bool failed = true;
	try
	{
		api->createSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshapePortion", "path");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshapePortion", "path", paramPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshapePortion", "path");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshapePortion", "path", paramPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewSubshapePortion", "path"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewSubshapePortionInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("postAddNewSubshapePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postAddNewSubshapePortion", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("postAddNewSubshapePortion", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("postAddNewSubshapePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("postAddNewSubshapePortion", "paragraphIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("postAddNewSubshapePortion", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("postAddNewSubshapePortion", "position");
	utility::string_t paramPassword = utils->getTestValue("postAddNewSubshapePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("postAddNewSubshapePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("postAddNewSubshapePortion", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("postAddNewSubshapePortion", "shapeIndex", paramShapeIndex).value();
	utils->initialize("postAddNewSubshapePortion", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->createSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshapePortion", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshapePortion", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshapePortion", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshapePortion", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewSubshapePortion", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewSubshapePortionInvalidParagraphIndex) {
	utility::string_t paramName = utils->getTestValue("postAddNewSubshapePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postAddNewSubshapePortion", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("postAddNewSubshapePortion", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("postAddNewSubshapePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("postAddNewSubshapePortion", "paragraphIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("postAddNewSubshapePortion", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("postAddNewSubshapePortion", "position");
	utility::string_t paramPassword = utils->getTestValue("postAddNewSubshapePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("postAddNewSubshapePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("postAddNewSubshapePortion", "storage");
	paramParagraphIndex = utils->getInvalidIntTestValue("postAddNewSubshapePortion", "paragraphIndex", paramParagraphIndex).value();
	utils->initialize("postAddNewSubshapePortion", "paragraphIndex", paramParagraphIndex);

	bool failed = true;
	try
	{
		api->createSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshapePortion", "paragraphIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshapePortion", "paragraphIndex", paramParagraphIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshapePortion", "paragraphIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshapePortion", "paragraphIndex", paramParagraphIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewSubshapePortion", "paragraphIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewSubshapePortionInvalidDto) {
	utility::string_t paramName = utils->getTestValue("postAddNewSubshapePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postAddNewSubshapePortion", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("postAddNewSubshapePortion", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("postAddNewSubshapePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("postAddNewSubshapePortion", "paragraphIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("postAddNewSubshapePortion", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("postAddNewSubshapePortion", "position");
	utility::string_t paramPassword = utils->getTestValue("postAddNewSubshapePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("postAddNewSubshapePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("postAddNewSubshapePortion", "storage");
	paramDto = utils->getInvalidTestValueForClass<>("postAddNewSubshapePortion", "dto", paramDto);
	utils->initialize("postAddNewSubshapePortion", "dto", paramDto);

	bool failed = true;
	try
	{
		api->createSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshapePortion", "dto");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshapePortion", "dto", paramDto);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshapePortion", "dto");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshapePortion", "dto", paramDto);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewSubshapePortion", "dto"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewSubshapePortionInvalidPosition) {
	utility::string_t paramName = utils->getTestValue("postAddNewSubshapePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postAddNewSubshapePortion", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("postAddNewSubshapePortion", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("postAddNewSubshapePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("postAddNewSubshapePortion", "paragraphIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("postAddNewSubshapePortion", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("postAddNewSubshapePortion", "position");
	utility::string_t paramPassword = utils->getTestValue("postAddNewSubshapePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("postAddNewSubshapePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("postAddNewSubshapePortion", "storage");
	paramPosition = utils->getInvalidIntTestValue("postAddNewSubshapePortion", "position", paramPosition).value();
	utils->initialize("postAddNewSubshapePortion", "position", paramPosition);

	bool failed = true;
	try
	{
		api->createSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshapePortion", "position");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshapePortion", "position", paramPosition);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshapePortion", "position");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshapePortion", "position", paramPosition);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewSubshapePortion", "position"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewSubshapePortionInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("postAddNewSubshapePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postAddNewSubshapePortion", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("postAddNewSubshapePortion", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("postAddNewSubshapePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("postAddNewSubshapePortion", "paragraphIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("postAddNewSubshapePortion", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("postAddNewSubshapePortion", "position");
	utility::string_t paramPassword = utils->getTestValue("postAddNewSubshapePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("postAddNewSubshapePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("postAddNewSubshapePortion", "storage");
	paramPassword = utils->getInvalidTestValue("postAddNewSubshapePortion", "password", paramPassword);
	utils->initialize("postAddNewSubshapePortion", "password", paramPassword);

	bool failed = true;
	try
	{
		api->createSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshapePortion", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshapePortion", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshapePortion", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshapePortion", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewSubshapePortion", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewSubshapePortionInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("postAddNewSubshapePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postAddNewSubshapePortion", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("postAddNewSubshapePortion", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("postAddNewSubshapePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("postAddNewSubshapePortion", "paragraphIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("postAddNewSubshapePortion", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("postAddNewSubshapePortion", "position");
	utility::string_t paramPassword = utils->getTestValue("postAddNewSubshapePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("postAddNewSubshapePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("postAddNewSubshapePortion", "storage");
	paramFolder = utils->getInvalidTestValue("postAddNewSubshapePortion", "folder", paramFolder);
	utils->initialize("postAddNewSubshapePortion", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->createSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshapePortion", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshapePortion", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshapePortion", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshapePortion", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewSubshapePortion", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewSubshapePortionInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("postAddNewSubshapePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postAddNewSubshapePortion", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("postAddNewSubshapePortion", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("postAddNewSubshapePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("postAddNewSubshapePortion", "paragraphIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("postAddNewSubshapePortion", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("postAddNewSubshapePortion", "position");
	utility::string_t paramPassword = utils->getTestValue("postAddNewSubshapePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("postAddNewSubshapePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("postAddNewSubshapePortion", "storage");
	paramStorage = utils->getInvalidTestValue("postAddNewSubshapePortion", "storage", paramStorage);
	utils->initialize("postAddNewSubshapePortion", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->createSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshapePortion", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshapePortion", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshapePortion", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshapePortion", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewSubshapePortion", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNotesSlide) {
	utility::string_t paramName = utils->getTestValue("postAddNotesSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postAddNotesSlide", "slideIndex");
	std::shared_ptr<NotesSlide> paramDto = utils->getTestValueForClass<NotesSlide>("postAddNotesSlide", "dto");
	utility::string_t paramPassword = utils->getTestValue("postAddNotesSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("postAddNotesSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("postAddNotesSlide", "storage");
	utils->initialize("postAddNotesSlide", "");
	std::shared_ptr<NotesSlide> result = api->createNotesSlide(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, postAddNotesSlideInvalidName) {
	utility::string_t paramName = utils->getTestValue("postAddNotesSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postAddNotesSlide", "slideIndex");
	std::shared_ptr<NotesSlide> paramDto = utils->getTestValueForClass<NotesSlide>("postAddNotesSlide", "dto");
	utility::string_t paramPassword = utils->getTestValue("postAddNotesSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("postAddNotesSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("postAddNotesSlide", "storage");
	paramName = utils->getInvalidTestValue("postAddNotesSlide", "name", paramName);
	utils->initialize("postAddNotesSlide", "name", paramName);

	bool failed = true;
	try
	{
		api->createNotesSlide(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNotesSlide", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNotesSlide", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNotesSlide", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNotesSlide", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNotesSlide", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNotesSlideInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("postAddNotesSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postAddNotesSlide", "slideIndex");
	std::shared_ptr<NotesSlide> paramDto = utils->getTestValueForClass<NotesSlide>("postAddNotesSlide", "dto");
	utility::string_t paramPassword = utils->getTestValue("postAddNotesSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("postAddNotesSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("postAddNotesSlide", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("postAddNotesSlide", "slideIndex", paramSlideIndex).value();
	utils->initialize("postAddNotesSlide", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->createNotesSlide(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNotesSlide", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNotesSlide", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNotesSlide", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNotesSlide", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNotesSlide", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNotesSlideInvalidDto) {
	utility::string_t paramName = utils->getTestValue("postAddNotesSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postAddNotesSlide", "slideIndex");
	std::shared_ptr<NotesSlide> paramDto = utils->getTestValueForClass<NotesSlide>("postAddNotesSlide", "dto");
	utility::string_t paramPassword = utils->getTestValue("postAddNotesSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("postAddNotesSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("postAddNotesSlide", "storage");
	paramDto = utils->getInvalidTestValueForClass<>("postAddNotesSlide", "dto", paramDto);
	utils->initialize("postAddNotesSlide", "dto", paramDto);

	bool failed = true;
	try
	{
		api->createNotesSlide(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNotesSlide", "dto");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNotesSlide", "dto", paramDto);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNotesSlide", "dto");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNotesSlide", "dto", paramDto);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNotesSlide", "dto"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNotesSlideInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("postAddNotesSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postAddNotesSlide", "slideIndex");
	std::shared_ptr<NotesSlide> paramDto = utils->getTestValueForClass<NotesSlide>("postAddNotesSlide", "dto");
	utility::string_t paramPassword = utils->getTestValue("postAddNotesSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("postAddNotesSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("postAddNotesSlide", "storage");
	paramPassword = utils->getInvalidTestValue("postAddNotesSlide", "password", paramPassword);
	utils->initialize("postAddNotesSlide", "password", paramPassword);

	bool failed = true;
	try
	{
		api->createNotesSlide(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNotesSlide", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNotesSlide", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNotesSlide", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNotesSlide", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNotesSlide", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNotesSlideInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("postAddNotesSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postAddNotesSlide", "slideIndex");
	std::shared_ptr<NotesSlide> paramDto = utils->getTestValueForClass<NotesSlide>("postAddNotesSlide", "dto");
	utility::string_t paramPassword = utils->getTestValue("postAddNotesSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("postAddNotesSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("postAddNotesSlide", "storage");
	paramFolder = utils->getInvalidTestValue("postAddNotesSlide", "folder", paramFolder);
	utils->initialize("postAddNotesSlide", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->createNotesSlide(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNotesSlide", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNotesSlide", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNotesSlide", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNotesSlide", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNotesSlide", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNotesSlideInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("postAddNotesSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postAddNotesSlide", "slideIndex");
	std::shared_ptr<NotesSlide> paramDto = utils->getTestValueForClass<NotesSlide>("postAddNotesSlide", "dto");
	utility::string_t paramPassword = utils->getTestValue("postAddNotesSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("postAddNotesSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("postAddNotesSlide", "storage");
	paramStorage = utils->getInvalidTestValue("postAddNotesSlide", "storage", paramStorage);
	utils->initialize("postAddNotesSlide", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->createNotesSlide(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNotesSlide", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNotesSlide", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNotesSlide", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNotesSlide", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNotesSlide", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAlignShapes) {
	utility::string_t paramName = utils->getTestValue("postAlignShapes", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postAlignShapes", "slideIndex");
	utility::string_t paramAlignmentType = utils->getTestValue("postAlignShapes", "alignmentType");
	auto paramAlignToSlide = utils->getOptionalBoolTestValue("postAlignShapes", "alignToSlide");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("postAlignShapes", "shapes");
	utility::string_t paramPassword = utils->getTestValue("postAlignShapes", "password");
	utility::string_t paramFolder = utils->getTestValue("postAlignShapes", "folder");
	utility::string_t paramStorage = utils->getTestValue("postAlignShapes", "storage");
	utils->initialize("postAlignShapes", "");
	std::shared_ptr<Shapes> result = api->alignShapes(paramName, paramSlideIndex, paramAlignmentType, paramAlignToSlide, paramShapes, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, postAlignShapesInvalidName) {
	utility::string_t paramName = utils->getTestValue("postAlignShapes", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postAlignShapes", "slideIndex");
	utility::string_t paramAlignmentType = utils->getTestValue("postAlignShapes", "alignmentType");
	auto paramAlignToSlide = utils->getOptionalBoolTestValue("postAlignShapes", "alignToSlide");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("postAlignShapes", "shapes");
	utility::string_t paramPassword = utils->getTestValue("postAlignShapes", "password");
	utility::string_t paramFolder = utils->getTestValue("postAlignShapes", "folder");
	utility::string_t paramStorage = utils->getTestValue("postAlignShapes", "storage");
	paramName = utils->getInvalidTestValue("postAlignShapes", "name", paramName);
	utils->initialize("postAlignShapes", "name", paramName);

	bool failed = true;
	try
	{
		api->alignShapes(paramName, paramSlideIndex, paramAlignmentType, paramAlignToSlide, paramShapes, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAlignShapes", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAlignShapes", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAlignShapes", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAlignShapes", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAlignShapes", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAlignShapesInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("postAlignShapes", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postAlignShapes", "slideIndex");
	utility::string_t paramAlignmentType = utils->getTestValue("postAlignShapes", "alignmentType");
	auto paramAlignToSlide = utils->getOptionalBoolTestValue("postAlignShapes", "alignToSlide");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("postAlignShapes", "shapes");
	utility::string_t paramPassword = utils->getTestValue("postAlignShapes", "password");
	utility::string_t paramFolder = utils->getTestValue("postAlignShapes", "folder");
	utility::string_t paramStorage = utils->getTestValue("postAlignShapes", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("postAlignShapes", "slideIndex", paramSlideIndex).value();
	utils->initialize("postAlignShapes", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->alignShapes(paramName, paramSlideIndex, paramAlignmentType, paramAlignToSlide, paramShapes, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAlignShapes", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAlignShapes", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAlignShapes", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAlignShapes", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAlignShapes", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAlignShapesInvalidAlignmentType) {
	utility::string_t paramName = utils->getTestValue("postAlignShapes", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postAlignShapes", "slideIndex");
	utility::string_t paramAlignmentType = utils->getTestValue("postAlignShapes", "alignmentType");
	auto paramAlignToSlide = utils->getOptionalBoolTestValue("postAlignShapes", "alignToSlide");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("postAlignShapes", "shapes");
	utility::string_t paramPassword = utils->getTestValue("postAlignShapes", "password");
	utility::string_t paramFolder = utils->getTestValue("postAlignShapes", "folder");
	utility::string_t paramStorage = utils->getTestValue("postAlignShapes", "storage");
	paramAlignmentType = utils->getInvalidTestValue("postAlignShapes", "alignmentType", paramAlignmentType);
	utils->initialize("postAlignShapes", "alignmentType", paramAlignmentType);

	bool failed = true;
	try
	{
		api->alignShapes(paramName, paramSlideIndex, paramAlignmentType, paramAlignToSlide, paramShapes, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAlignShapes", "alignmentType");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAlignShapes", "alignmentType", paramAlignmentType);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAlignShapes", "alignmentType");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAlignShapes", "alignmentType", paramAlignmentType);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAlignShapes", "alignmentType"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAlignShapesInvalidAlignToSlide) {
	utility::string_t paramName = utils->getTestValue("postAlignShapes", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postAlignShapes", "slideIndex");
	utility::string_t paramAlignmentType = utils->getTestValue("postAlignShapes", "alignmentType");
	auto paramAlignToSlide = utils->getOptionalBoolTestValue("postAlignShapes", "alignToSlide");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("postAlignShapes", "shapes");
	utility::string_t paramPassword = utils->getTestValue("postAlignShapes", "password");
	utility::string_t paramFolder = utils->getTestValue("postAlignShapes", "folder");
	utility::string_t paramStorage = utils->getTestValue("postAlignShapes", "storage");
	paramAlignToSlide = utils->getInvalidBoolTestValue("postAlignShapes", "alignToSlide", paramAlignToSlide).value();
	utils->initialize("postAlignShapes", "alignToSlide", paramAlignToSlide);

	bool failed = true;
	try
	{
		api->alignShapes(paramName, paramSlideIndex, paramAlignmentType, paramAlignToSlide, paramShapes, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAlignShapes", "alignToSlide");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAlignShapes", "alignToSlide", paramAlignToSlide);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAlignShapes", "alignToSlide");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAlignShapes", "alignToSlide", paramAlignToSlide);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAlignShapes", "alignToSlide"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAlignShapesInvalidShapes) {
	utility::string_t paramName = utils->getTestValue("postAlignShapes", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postAlignShapes", "slideIndex");
	utility::string_t paramAlignmentType = utils->getTestValue("postAlignShapes", "alignmentType");
	auto paramAlignToSlide = utils->getOptionalBoolTestValue("postAlignShapes", "alignToSlide");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("postAlignShapes", "shapes");
	utility::string_t paramPassword = utils->getTestValue("postAlignShapes", "password");
	utility::string_t paramFolder = utils->getTestValue("postAlignShapes", "folder");
	utility::string_t paramStorage = utils->getTestValue("postAlignShapes", "storage");
	paramShapes = utils->getInvalidIntVectorTestValue("postAlignShapes", "shapes", paramShapes);
	utils->initialize("postAlignShapes", "shapes", paramShapes);

	bool failed = true;
	try
	{
		api->alignShapes(paramName, paramSlideIndex, paramAlignmentType, paramAlignToSlide, paramShapes, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAlignShapes", "shapes");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAlignShapes", "shapes", paramShapes);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAlignShapes", "shapes");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAlignShapes", "shapes", paramShapes);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAlignShapes", "shapes"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAlignShapesInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("postAlignShapes", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postAlignShapes", "slideIndex");
	utility::string_t paramAlignmentType = utils->getTestValue("postAlignShapes", "alignmentType");
	auto paramAlignToSlide = utils->getOptionalBoolTestValue("postAlignShapes", "alignToSlide");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("postAlignShapes", "shapes");
	utility::string_t paramPassword = utils->getTestValue("postAlignShapes", "password");
	utility::string_t paramFolder = utils->getTestValue("postAlignShapes", "folder");
	utility::string_t paramStorage = utils->getTestValue("postAlignShapes", "storage");
	paramPassword = utils->getInvalidTestValue("postAlignShapes", "password", paramPassword);
	utils->initialize("postAlignShapes", "password", paramPassword);

	bool failed = true;
	try
	{
		api->alignShapes(paramName, paramSlideIndex, paramAlignmentType, paramAlignToSlide, paramShapes, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAlignShapes", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAlignShapes", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAlignShapes", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAlignShapes", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAlignShapes", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAlignShapesInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("postAlignShapes", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postAlignShapes", "slideIndex");
	utility::string_t paramAlignmentType = utils->getTestValue("postAlignShapes", "alignmentType");
	auto paramAlignToSlide = utils->getOptionalBoolTestValue("postAlignShapes", "alignToSlide");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("postAlignShapes", "shapes");
	utility::string_t paramPassword = utils->getTestValue("postAlignShapes", "password");
	utility::string_t paramFolder = utils->getTestValue("postAlignShapes", "folder");
	utility::string_t paramStorage = utils->getTestValue("postAlignShapes", "storage");
	paramFolder = utils->getInvalidTestValue("postAlignShapes", "folder", paramFolder);
	utils->initialize("postAlignShapes", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->alignShapes(paramName, paramSlideIndex, paramAlignmentType, paramAlignToSlide, paramShapes, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAlignShapes", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAlignShapes", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAlignShapes", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAlignShapes", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAlignShapes", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAlignShapesInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("postAlignShapes", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postAlignShapes", "slideIndex");
	utility::string_t paramAlignmentType = utils->getTestValue("postAlignShapes", "alignmentType");
	auto paramAlignToSlide = utils->getOptionalBoolTestValue("postAlignShapes", "alignToSlide");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("postAlignShapes", "shapes");
	utility::string_t paramPassword = utils->getTestValue("postAlignShapes", "password");
	utility::string_t paramFolder = utils->getTestValue("postAlignShapes", "folder");
	utility::string_t paramStorage = utils->getTestValue("postAlignShapes", "storage");
	paramStorage = utils->getInvalidTestValue("postAlignShapes", "storage", paramStorage);
	utils->initialize("postAlignShapes", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->alignShapes(paramName, paramSlideIndex, paramAlignmentType, paramAlignToSlide, paramShapes, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAlignShapes", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAlignShapes", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAlignShapes", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAlignShapes", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAlignShapes", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postChartCategory) {
	utility::string_t paramName = utils->getTestValue("postChartCategory", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postChartCategory", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("postChartCategory", "shapeIndex");
	std::shared_ptr<ChartCategory> paramCategory = utils->getTestValueForClass<ChartCategory>("postChartCategory", "category");
	utility::string_t paramPassword = utils->getTestValue("postChartCategory", "password");
	utility::string_t paramFolder = utils->getTestValue("postChartCategory", "folder");
	utility::string_t paramStorage = utils->getTestValue("postChartCategory", "storage");
	utils->initialize("postChartCategory", "");
	std::shared_ptr<Chart> result = api->createChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategory, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, postChartCategoryInvalidName) {
	utility::string_t paramName = utils->getTestValue("postChartCategory", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postChartCategory", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("postChartCategory", "shapeIndex");
	std::shared_ptr<ChartCategory> paramCategory = utils->getTestValueForClass<ChartCategory>("postChartCategory", "category");
	utility::string_t paramPassword = utils->getTestValue("postChartCategory", "password");
	utility::string_t paramFolder = utils->getTestValue("postChartCategory", "folder");
	utility::string_t paramStorage = utils->getTestValue("postChartCategory", "storage");
	paramName = utils->getInvalidTestValue("postChartCategory", "name", paramName);
	utils->initialize("postChartCategory", "name", paramName);

	bool failed = true;
	try
	{
		api->createChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategory, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postChartCategory", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postChartCategory", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postChartCategory", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postChartCategory", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postChartCategory", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postChartCategoryInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("postChartCategory", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postChartCategory", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("postChartCategory", "shapeIndex");
	std::shared_ptr<ChartCategory> paramCategory = utils->getTestValueForClass<ChartCategory>("postChartCategory", "category");
	utility::string_t paramPassword = utils->getTestValue("postChartCategory", "password");
	utility::string_t paramFolder = utils->getTestValue("postChartCategory", "folder");
	utility::string_t paramStorage = utils->getTestValue("postChartCategory", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("postChartCategory", "slideIndex", paramSlideIndex).value();
	utils->initialize("postChartCategory", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->createChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategory, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postChartCategory", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postChartCategory", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postChartCategory", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postChartCategory", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postChartCategory", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postChartCategoryInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("postChartCategory", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postChartCategory", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("postChartCategory", "shapeIndex");
	std::shared_ptr<ChartCategory> paramCategory = utils->getTestValueForClass<ChartCategory>("postChartCategory", "category");
	utility::string_t paramPassword = utils->getTestValue("postChartCategory", "password");
	utility::string_t paramFolder = utils->getTestValue("postChartCategory", "folder");
	utility::string_t paramStorage = utils->getTestValue("postChartCategory", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("postChartCategory", "shapeIndex", paramShapeIndex).value();
	utils->initialize("postChartCategory", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->createChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategory, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postChartCategory", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postChartCategory", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postChartCategory", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postChartCategory", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postChartCategory", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postChartCategoryInvalidCategory) {
	utility::string_t paramName = utils->getTestValue("postChartCategory", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postChartCategory", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("postChartCategory", "shapeIndex");
	std::shared_ptr<ChartCategory> paramCategory = utils->getTestValueForClass<ChartCategory>("postChartCategory", "category");
	utility::string_t paramPassword = utils->getTestValue("postChartCategory", "password");
	utility::string_t paramFolder = utils->getTestValue("postChartCategory", "folder");
	utility::string_t paramStorage = utils->getTestValue("postChartCategory", "storage");
	paramCategory = utils->getInvalidTestValueForClass<>("postChartCategory", "category", paramCategory);
	utils->initialize("postChartCategory", "category", paramCategory);

	bool failed = true;
	try
	{
		api->createChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategory, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postChartCategory", "category");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postChartCategory", "category", paramCategory);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postChartCategory", "category");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postChartCategory", "category", paramCategory);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postChartCategory", "category"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postChartCategoryInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("postChartCategory", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postChartCategory", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("postChartCategory", "shapeIndex");
	std::shared_ptr<ChartCategory> paramCategory = utils->getTestValueForClass<ChartCategory>("postChartCategory", "category");
	utility::string_t paramPassword = utils->getTestValue("postChartCategory", "password");
	utility::string_t paramFolder = utils->getTestValue("postChartCategory", "folder");
	utility::string_t paramStorage = utils->getTestValue("postChartCategory", "storage");
	paramPassword = utils->getInvalidTestValue("postChartCategory", "password", paramPassword);
	utils->initialize("postChartCategory", "password", paramPassword);

	bool failed = true;
	try
	{
		api->createChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategory, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postChartCategory", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postChartCategory", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postChartCategory", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postChartCategory", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postChartCategory", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postChartCategoryInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("postChartCategory", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postChartCategory", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("postChartCategory", "shapeIndex");
	std::shared_ptr<ChartCategory> paramCategory = utils->getTestValueForClass<ChartCategory>("postChartCategory", "category");
	utility::string_t paramPassword = utils->getTestValue("postChartCategory", "password");
	utility::string_t paramFolder = utils->getTestValue("postChartCategory", "folder");
	utility::string_t paramStorage = utils->getTestValue("postChartCategory", "storage");
	paramFolder = utils->getInvalidTestValue("postChartCategory", "folder", paramFolder);
	utils->initialize("postChartCategory", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->createChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategory, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postChartCategory", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postChartCategory", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postChartCategory", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postChartCategory", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postChartCategory", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postChartCategoryInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("postChartCategory", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postChartCategory", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("postChartCategory", "shapeIndex");
	std::shared_ptr<ChartCategory> paramCategory = utils->getTestValueForClass<ChartCategory>("postChartCategory", "category");
	utility::string_t paramPassword = utils->getTestValue("postChartCategory", "password");
	utility::string_t paramFolder = utils->getTestValue("postChartCategory", "folder");
	utility::string_t paramStorage = utils->getTestValue("postChartCategory", "storage");
	paramStorage = utils->getInvalidTestValue("postChartCategory", "storage", paramStorage);
	utils->initialize("postChartCategory", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->createChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategory, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postChartCategory", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postChartCategory", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postChartCategory", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postChartCategory", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postChartCategory", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postChartDataPoint) {
	utility::string_t paramName = utils->getTestValue("postChartDataPoint", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postChartDataPoint", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("postChartDataPoint", "shapeIndex");
	int32_t paramSeriesIndex = utils->getIntTestValue("postChartDataPoint", "seriesIndex");
	std::shared_ptr<DataPoint> paramDataPoint = utils->getTestValueForClass<ScatterChartDataPoint>("postChartDataPoint", "dataPoint");
	utility::string_t paramPassword = utils->getTestValue("postChartDataPoint", "password");
	utility::string_t paramFolder = utils->getTestValue("postChartDataPoint", "folder");
	utility::string_t paramStorage = utils->getTestValue("postChartDataPoint", "storage");
	utils->initialize("postChartDataPoint", "");
	std::shared_ptr<Chart> result = api->createChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramDataPoint, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, postChartDataPointInvalidName) {
	utility::string_t paramName = utils->getTestValue("postChartDataPoint", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postChartDataPoint", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("postChartDataPoint", "shapeIndex");
	int32_t paramSeriesIndex = utils->getIntTestValue("postChartDataPoint", "seriesIndex");
	std::shared_ptr<DataPoint> paramDataPoint = utils->getTestValueForClass<ScatterChartDataPoint>("postChartDataPoint", "dataPoint");
	utility::string_t paramPassword = utils->getTestValue("postChartDataPoint", "password");
	utility::string_t paramFolder = utils->getTestValue("postChartDataPoint", "folder");
	utility::string_t paramStorage = utils->getTestValue("postChartDataPoint", "storage");
	paramName = utils->getInvalidTestValue("postChartDataPoint", "name", paramName);
	utils->initialize("postChartDataPoint", "name", paramName);

	bool failed = true;
	try
	{
		api->createChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramDataPoint, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postChartDataPoint", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postChartDataPoint", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postChartDataPoint", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postChartDataPoint", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postChartDataPoint", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postChartDataPointInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("postChartDataPoint", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postChartDataPoint", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("postChartDataPoint", "shapeIndex");
	int32_t paramSeriesIndex = utils->getIntTestValue("postChartDataPoint", "seriesIndex");
	std::shared_ptr<DataPoint> paramDataPoint = utils->getTestValueForClass<ScatterChartDataPoint>("postChartDataPoint", "dataPoint");
	utility::string_t paramPassword = utils->getTestValue("postChartDataPoint", "password");
	utility::string_t paramFolder = utils->getTestValue("postChartDataPoint", "folder");
	utility::string_t paramStorage = utils->getTestValue("postChartDataPoint", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("postChartDataPoint", "slideIndex", paramSlideIndex).value();
	utils->initialize("postChartDataPoint", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->createChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramDataPoint, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postChartDataPoint", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postChartDataPoint", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postChartDataPoint", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postChartDataPoint", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postChartDataPoint", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postChartDataPointInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("postChartDataPoint", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postChartDataPoint", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("postChartDataPoint", "shapeIndex");
	int32_t paramSeriesIndex = utils->getIntTestValue("postChartDataPoint", "seriesIndex");
	std::shared_ptr<DataPoint> paramDataPoint = utils->getTestValueForClass<ScatterChartDataPoint>("postChartDataPoint", "dataPoint");
	utility::string_t paramPassword = utils->getTestValue("postChartDataPoint", "password");
	utility::string_t paramFolder = utils->getTestValue("postChartDataPoint", "folder");
	utility::string_t paramStorage = utils->getTestValue("postChartDataPoint", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("postChartDataPoint", "shapeIndex", paramShapeIndex).value();
	utils->initialize("postChartDataPoint", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->createChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramDataPoint, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postChartDataPoint", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postChartDataPoint", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postChartDataPoint", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postChartDataPoint", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postChartDataPoint", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postChartDataPointInvalidSeriesIndex) {
	utility::string_t paramName = utils->getTestValue("postChartDataPoint", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postChartDataPoint", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("postChartDataPoint", "shapeIndex");
	int32_t paramSeriesIndex = utils->getIntTestValue("postChartDataPoint", "seriesIndex");
	std::shared_ptr<DataPoint> paramDataPoint = utils->getTestValueForClass<ScatterChartDataPoint>("postChartDataPoint", "dataPoint");
	utility::string_t paramPassword = utils->getTestValue("postChartDataPoint", "password");
	utility::string_t paramFolder = utils->getTestValue("postChartDataPoint", "folder");
	utility::string_t paramStorage = utils->getTestValue("postChartDataPoint", "storage");
	paramSeriesIndex = utils->getInvalidIntTestValue("postChartDataPoint", "seriesIndex", paramSeriesIndex).value();
	utils->initialize("postChartDataPoint", "seriesIndex", paramSeriesIndex);

	bool failed = true;
	try
	{
		api->createChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramDataPoint, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postChartDataPoint", "seriesIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postChartDataPoint", "seriesIndex", paramSeriesIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postChartDataPoint", "seriesIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postChartDataPoint", "seriesIndex", paramSeriesIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postChartDataPoint", "seriesIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postChartDataPointInvalidDataPoint) {
	utility::string_t paramName = utils->getTestValue("postChartDataPoint", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postChartDataPoint", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("postChartDataPoint", "shapeIndex");
	int32_t paramSeriesIndex = utils->getIntTestValue("postChartDataPoint", "seriesIndex");
	std::shared_ptr<DataPoint> paramDataPoint = utils->getTestValueForClass<ScatterChartDataPoint>("postChartDataPoint", "dataPoint");
	utility::string_t paramPassword = utils->getTestValue("postChartDataPoint", "password");
	utility::string_t paramFolder = utils->getTestValue("postChartDataPoint", "folder");
	utility::string_t paramStorage = utils->getTestValue("postChartDataPoint", "storage");
	paramDataPoint = utils->getInvalidTestValueForClass<>("postChartDataPoint", "dataPoint", paramDataPoint);
	utils->initialize("postChartDataPoint", "dataPoint", paramDataPoint);

	bool failed = true;
	try
	{
		api->createChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramDataPoint, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postChartDataPoint", "dataPoint");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postChartDataPoint", "dataPoint", paramDataPoint);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postChartDataPoint", "dataPoint");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postChartDataPoint", "dataPoint", paramDataPoint);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postChartDataPoint", "dataPoint"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postChartDataPointInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("postChartDataPoint", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postChartDataPoint", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("postChartDataPoint", "shapeIndex");
	int32_t paramSeriesIndex = utils->getIntTestValue("postChartDataPoint", "seriesIndex");
	std::shared_ptr<DataPoint> paramDataPoint = utils->getTestValueForClass<ScatterChartDataPoint>("postChartDataPoint", "dataPoint");
	utility::string_t paramPassword = utils->getTestValue("postChartDataPoint", "password");
	utility::string_t paramFolder = utils->getTestValue("postChartDataPoint", "folder");
	utility::string_t paramStorage = utils->getTestValue("postChartDataPoint", "storage");
	paramPassword = utils->getInvalidTestValue("postChartDataPoint", "password", paramPassword);
	utils->initialize("postChartDataPoint", "password", paramPassword);

	bool failed = true;
	try
	{
		api->createChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramDataPoint, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postChartDataPoint", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postChartDataPoint", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postChartDataPoint", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postChartDataPoint", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postChartDataPoint", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postChartDataPointInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("postChartDataPoint", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postChartDataPoint", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("postChartDataPoint", "shapeIndex");
	int32_t paramSeriesIndex = utils->getIntTestValue("postChartDataPoint", "seriesIndex");
	std::shared_ptr<DataPoint> paramDataPoint = utils->getTestValueForClass<ScatterChartDataPoint>("postChartDataPoint", "dataPoint");
	utility::string_t paramPassword = utils->getTestValue("postChartDataPoint", "password");
	utility::string_t paramFolder = utils->getTestValue("postChartDataPoint", "folder");
	utility::string_t paramStorage = utils->getTestValue("postChartDataPoint", "storage");
	paramFolder = utils->getInvalidTestValue("postChartDataPoint", "folder", paramFolder);
	utils->initialize("postChartDataPoint", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->createChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramDataPoint, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postChartDataPoint", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postChartDataPoint", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postChartDataPoint", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postChartDataPoint", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postChartDataPoint", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postChartDataPointInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("postChartDataPoint", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postChartDataPoint", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("postChartDataPoint", "shapeIndex");
	int32_t paramSeriesIndex = utils->getIntTestValue("postChartDataPoint", "seriesIndex");
	std::shared_ptr<DataPoint> paramDataPoint = utils->getTestValueForClass<ScatterChartDataPoint>("postChartDataPoint", "dataPoint");
	utility::string_t paramPassword = utils->getTestValue("postChartDataPoint", "password");
	utility::string_t paramFolder = utils->getTestValue("postChartDataPoint", "folder");
	utility::string_t paramStorage = utils->getTestValue("postChartDataPoint", "storage");
	paramStorage = utils->getInvalidTestValue("postChartDataPoint", "storage", paramStorage);
	utils->initialize("postChartDataPoint", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->createChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramDataPoint, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postChartDataPoint", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postChartDataPoint", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postChartDataPoint", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postChartDataPoint", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postChartDataPoint", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postChartSeries) {
	utility::string_t paramName = utils->getTestValue("postChartSeries", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postChartSeries", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("postChartSeries", "shapeIndex");
	std::shared_ptr<Series> paramSeries = utils->getTestValueForClass<Series>("postChartSeries", "series");
	utility::string_t paramPassword = utils->getTestValue("postChartSeries", "password");
	utility::string_t paramFolder = utils->getTestValue("postChartSeries", "folder");
	utility::string_t paramStorage = utils->getTestValue("postChartSeries", "storage");
	utils->initialize("postChartSeries", "");
	std::shared_ptr<Chart> result = api->createChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeries, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, postChartSeriesInvalidName) {
	utility::string_t paramName = utils->getTestValue("postChartSeries", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postChartSeries", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("postChartSeries", "shapeIndex");
	std::shared_ptr<Series> paramSeries = utils->getTestValueForClass<Series>("postChartSeries", "series");
	utility::string_t paramPassword = utils->getTestValue("postChartSeries", "password");
	utility::string_t paramFolder = utils->getTestValue("postChartSeries", "folder");
	utility::string_t paramStorage = utils->getTestValue("postChartSeries", "storage");
	paramName = utils->getInvalidTestValue("postChartSeries", "name", paramName);
	utils->initialize("postChartSeries", "name", paramName);

	bool failed = true;
	try
	{
		api->createChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeries, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postChartSeries", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postChartSeries", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postChartSeries", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postChartSeries", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postChartSeries", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postChartSeriesInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("postChartSeries", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postChartSeries", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("postChartSeries", "shapeIndex");
	std::shared_ptr<Series> paramSeries = utils->getTestValueForClass<Series>("postChartSeries", "series");
	utility::string_t paramPassword = utils->getTestValue("postChartSeries", "password");
	utility::string_t paramFolder = utils->getTestValue("postChartSeries", "folder");
	utility::string_t paramStorage = utils->getTestValue("postChartSeries", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("postChartSeries", "slideIndex", paramSlideIndex).value();
	utils->initialize("postChartSeries", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->createChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeries, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postChartSeries", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postChartSeries", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postChartSeries", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postChartSeries", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postChartSeries", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postChartSeriesInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("postChartSeries", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postChartSeries", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("postChartSeries", "shapeIndex");
	std::shared_ptr<Series> paramSeries = utils->getTestValueForClass<Series>("postChartSeries", "series");
	utility::string_t paramPassword = utils->getTestValue("postChartSeries", "password");
	utility::string_t paramFolder = utils->getTestValue("postChartSeries", "folder");
	utility::string_t paramStorage = utils->getTestValue("postChartSeries", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("postChartSeries", "shapeIndex", paramShapeIndex).value();
	utils->initialize("postChartSeries", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->createChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeries, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postChartSeries", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postChartSeries", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postChartSeries", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postChartSeries", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postChartSeries", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postChartSeriesInvalidSeries) {
	utility::string_t paramName = utils->getTestValue("postChartSeries", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postChartSeries", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("postChartSeries", "shapeIndex");
	std::shared_ptr<Series> paramSeries = utils->getTestValueForClass<Series>("postChartSeries", "series");
	utility::string_t paramPassword = utils->getTestValue("postChartSeries", "password");
	utility::string_t paramFolder = utils->getTestValue("postChartSeries", "folder");
	utility::string_t paramStorage = utils->getTestValue("postChartSeries", "storage");
	paramSeries = utils->getInvalidTestValueForClass<>("postChartSeries", "series", paramSeries);
	utils->initialize("postChartSeries", "series", paramSeries);

	bool failed = true;
	try
	{
		api->createChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeries, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postChartSeries", "series");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postChartSeries", "series", paramSeries);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postChartSeries", "series");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postChartSeries", "series", paramSeries);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postChartSeries", "series"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postChartSeriesInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("postChartSeries", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postChartSeries", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("postChartSeries", "shapeIndex");
	std::shared_ptr<Series> paramSeries = utils->getTestValueForClass<Series>("postChartSeries", "series");
	utility::string_t paramPassword = utils->getTestValue("postChartSeries", "password");
	utility::string_t paramFolder = utils->getTestValue("postChartSeries", "folder");
	utility::string_t paramStorage = utils->getTestValue("postChartSeries", "storage");
	paramPassword = utils->getInvalidTestValue("postChartSeries", "password", paramPassword);
	utils->initialize("postChartSeries", "password", paramPassword);

	bool failed = true;
	try
	{
		api->createChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeries, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postChartSeries", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postChartSeries", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postChartSeries", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postChartSeries", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postChartSeries", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postChartSeriesInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("postChartSeries", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postChartSeries", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("postChartSeries", "shapeIndex");
	std::shared_ptr<Series> paramSeries = utils->getTestValueForClass<Series>("postChartSeries", "series");
	utility::string_t paramPassword = utils->getTestValue("postChartSeries", "password");
	utility::string_t paramFolder = utils->getTestValue("postChartSeries", "folder");
	utility::string_t paramStorage = utils->getTestValue("postChartSeries", "storage");
	paramFolder = utils->getInvalidTestValue("postChartSeries", "folder", paramFolder);
	utils->initialize("postChartSeries", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->createChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeries, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postChartSeries", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postChartSeries", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postChartSeries", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postChartSeries", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postChartSeries", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postChartSeriesInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("postChartSeries", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postChartSeries", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("postChartSeries", "shapeIndex");
	std::shared_ptr<Series> paramSeries = utils->getTestValueForClass<Series>("postChartSeries", "series");
	utility::string_t paramPassword = utils->getTestValue("postChartSeries", "password");
	utility::string_t paramFolder = utils->getTestValue("postChartSeries", "folder");
	utility::string_t paramStorage = utils->getTestValue("postChartSeries", "storage");
	paramStorage = utils->getInvalidTestValue("postChartSeries", "storage", paramStorage);
	utils->initialize("postChartSeries", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->createChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeries, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postChartSeries", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postChartSeries", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postChartSeries", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postChartSeries", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postChartSeries", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postCopyLayoutSlideFromSourcePresentation) {
	utility::string_t paramName = utils->getTestValue("postCopyLayoutSlideFromSourcePresentation", "name");
	utility::string_t paramCloneFrom = utils->getTestValue("postCopyLayoutSlideFromSourcePresentation", "cloneFrom");
	int32_t paramCloneFromPosition = utils->getIntTestValue("postCopyLayoutSlideFromSourcePresentation", "cloneFromPosition");
	utility::string_t paramCloneFromPassword = utils->getTestValue("postCopyLayoutSlideFromSourcePresentation", "cloneFromPassword");
	utility::string_t paramCloneFromStorage = utils->getTestValue("postCopyLayoutSlideFromSourcePresentation", "cloneFromStorage");
	utility::string_t paramPassword = utils->getTestValue("postCopyLayoutSlideFromSourcePresentation", "password");
	utility::string_t paramFolder = utils->getTestValue("postCopyLayoutSlideFromSourcePresentation", "folder");
	utility::string_t paramStorage = utils->getTestValue("postCopyLayoutSlideFromSourcePresentation", "storage");
	utils->initialize("postCopyLayoutSlideFromSourcePresentation", "");
	std::shared_ptr<LayoutSlide> result = api->copyLayoutSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, postCopyLayoutSlideFromSourcePresentationInvalidName) {
	utility::string_t paramName = utils->getTestValue("postCopyLayoutSlideFromSourcePresentation", "name");
	utility::string_t paramCloneFrom = utils->getTestValue("postCopyLayoutSlideFromSourcePresentation", "cloneFrom");
	int32_t paramCloneFromPosition = utils->getIntTestValue("postCopyLayoutSlideFromSourcePresentation", "cloneFromPosition");
	utility::string_t paramCloneFromPassword = utils->getTestValue("postCopyLayoutSlideFromSourcePresentation", "cloneFromPassword");
	utility::string_t paramCloneFromStorage = utils->getTestValue("postCopyLayoutSlideFromSourcePresentation", "cloneFromStorage");
	utility::string_t paramPassword = utils->getTestValue("postCopyLayoutSlideFromSourcePresentation", "password");
	utility::string_t paramFolder = utils->getTestValue("postCopyLayoutSlideFromSourcePresentation", "folder");
	utility::string_t paramStorage = utils->getTestValue("postCopyLayoutSlideFromSourcePresentation", "storage");
	paramName = utils->getInvalidTestValue("postCopyLayoutSlideFromSourcePresentation", "name", paramName);
	utils->initialize("postCopyLayoutSlideFromSourcePresentation", "name", paramName);

	bool failed = true;
	try
	{
		api->copyLayoutSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postCopyLayoutSlideFromSourcePresentation", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postCopyLayoutSlideFromSourcePresentation", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postCopyLayoutSlideFromSourcePresentation", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postCopyLayoutSlideFromSourcePresentation", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postCopyLayoutSlideFromSourcePresentation", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postCopyLayoutSlideFromSourcePresentationInvalidCloneFrom) {
	utility::string_t paramName = utils->getTestValue("postCopyLayoutSlideFromSourcePresentation", "name");
	utility::string_t paramCloneFrom = utils->getTestValue("postCopyLayoutSlideFromSourcePresentation", "cloneFrom");
	int32_t paramCloneFromPosition = utils->getIntTestValue("postCopyLayoutSlideFromSourcePresentation", "cloneFromPosition");
	utility::string_t paramCloneFromPassword = utils->getTestValue("postCopyLayoutSlideFromSourcePresentation", "cloneFromPassword");
	utility::string_t paramCloneFromStorage = utils->getTestValue("postCopyLayoutSlideFromSourcePresentation", "cloneFromStorage");
	utility::string_t paramPassword = utils->getTestValue("postCopyLayoutSlideFromSourcePresentation", "password");
	utility::string_t paramFolder = utils->getTestValue("postCopyLayoutSlideFromSourcePresentation", "folder");
	utility::string_t paramStorage = utils->getTestValue("postCopyLayoutSlideFromSourcePresentation", "storage");
	paramCloneFrom = utils->getInvalidTestValue("postCopyLayoutSlideFromSourcePresentation", "cloneFrom", paramCloneFrom);
	utils->initialize("postCopyLayoutSlideFromSourcePresentation", "cloneFrom", paramCloneFrom);

	bool failed = true;
	try
	{
		api->copyLayoutSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postCopyLayoutSlideFromSourcePresentation", "cloneFrom");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postCopyLayoutSlideFromSourcePresentation", "cloneFrom", paramCloneFrom);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postCopyLayoutSlideFromSourcePresentation", "cloneFrom");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postCopyLayoutSlideFromSourcePresentation", "cloneFrom", paramCloneFrom);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postCopyLayoutSlideFromSourcePresentation", "cloneFrom"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postCopyLayoutSlideFromSourcePresentationInvalidCloneFromPosition) {
	utility::string_t paramName = utils->getTestValue("postCopyLayoutSlideFromSourcePresentation", "name");
	utility::string_t paramCloneFrom = utils->getTestValue("postCopyLayoutSlideFromSourcePresentation", "cloneFrom");
	int32_t paramCloneFromPosition = utils->getIntTestValue("postCopyLayoutSlideFromSourcePresentation", "cloneFromPosition");
	utility::string_t paramCloneFromPassword = utils->getTestValue("postCopyLayoutSlideFromSourcePresentation", "cloneFromPassword");
	utility::string_t paramCloneFromStorage = utils->getTestValue("postCopyLayoutSlideFromSourcePresentation", "cloneFromStorage");
	utility::string_t paramPassword = utils->getTestValue("postCopyLayoutSlideFromSourcePresentation", "password");
	utility::string_t paramFolder = utils->getTestValue("postCopyLayoutSlideFromSourcePresentation", "folder");
	utility::string_t paramStorage = utils->getTestValue("postCopyLayoutSlideFromSourcePresentation", "storage");
	paramCloneFromPosition = utils->getInvalidIntTestValue("postCopyLayoutSlideFromSourcePresentation", "cloneFromPosition", paramCloneFromPosition).value();
	utils->initialize("postCopyLayoutSlideFromSourcePresentation", "cloneFromPosition", paramCloneFromPosition);

	bool failed = true;
	try
	{
		api->copyLayoutSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postCopyLayoutSlideFromSourcePresentation", "cloneFromPosition");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postCopyLayoutSlideFromSourcePresentation", "cloneFromPosition", paramCloneFromPosition);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postCopyLayoutSlideFromSourcePresentation", "cloneFromPosition");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postCopyLayoutSlideFromSourcePresentation", "cloneFromPosition", paramCloneFromPosition);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postCopyLayoutSlideFromSourcePresentation", "cloneFromPosition"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postCopyLayoutSlideFromSourcePresentationInvalidCloneFromPassword) {
	utility::string_t paramName = utils->getTestValue("postCopyLayoutSlideFromSourcePresentation", "name");
	utility::string_t paramCloneFrom = utils->getTestValue("postCopyLayoutSlideFromSourcePresentation", "cloneFrom");
	int32_t paramCloneFromPosition = utils->getIntTestValue("postCopyLayoutSlideFromSourcePresentation", "cloneFromPosition");
	utility::string_t paramCloneFromPassword = utils->getTestValue("postCopyLayoutSlideFromSourcePresentation", "cloneFromPassword");
	utility::string_t paramCloneFromStorage = utils->getTestValue("postCopyLayoutSlideFromSourcePresentation", "cloneFromStorage");
	utility::string_t paramPassword = utils->getTestValue("postCopyLayoutSlideFromSourcePresentation", "password");
	utility::string_t paramFolder = utils->getTestValue("postCopyLayoutSlideFromSourcePresentation", "folder");
	utility::string_t paramStorage = utils->getTestValue("postCopyLayoutSlideFromSourcePresentation", "storage");
	paramCloneFromPassword = utils->getInvalidTestValue("postCopyLayoutSlideFromSourcePresentation", "cloneFromPassword", paramCloneFromPassword);
	utils->initialize("postCopyLayoutSlideFromSourcePresentation", "cloneFromPassword", paramCloneFromPassword);

	bool failed = true;
	try
	{
		api->copyLayoutSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postCopyLayoutSlideFromSourcePresentation", "cloneFromPassword");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postCopyLayoutSlideFromSourcePresentation", "cloneFromPassword", paramCloneFromPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postCopyLayoutSlideFromSourcePresentation", "cloneFromPassword");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postCopyLayoutSlideFromSourcePresentation", "cloneFromPassword", paramCloneFromPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postCopyLayoutSlideFromSourcePresentation", "cloneFromPassword"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postCopyLayoutSlideFromSourcePresentationInvalidCloneFromStorage) {
	utility::string_t paramName = utils->getTestValue("postCopyLayoutSlideFromSourcePresentation", "name");
	utility::string_t paramCloneFrom = utils->getTestValue("postCopyLayoutSlideFromSourcePresentation", "cloneFrom");
	int32_t paramCloneFromPosition = utils->getIntTestValue("postCopyLayoutSlideFromSourcePresentation", "cloneFromPosition");
	utility::string_t paramCloneFromPassword = utils->getTestValue("postCopyLayoutSlideFromSourcePresentation", "cloneFromPassword");
	utility::string_t paramCloneFromStorage = utils->getTestValue("postCopyLayoutSlideFromSourcePresentation", "cloneFromStorage");
	utility::string_t paramPassword = utils->getTestValue("postCopyLayoutSlideFromSourcePresentation", "password");
	utility::string_t paramFolder = utils->getTestValue("postCopyLayoutSlideFromSourcePresentation", "folder");
	utility::string_t paramStorage = utils->getTestValue("postCopyLayoutSlideFromSourcePresentation", "storage");
	paramCloneFromStorage = utils->getInvalidTestValue("postCopyLayoutSlideFromSourcePresentation", "cloneFromStorage", paramCloneFromStorage);
	utils->initialize("postCopyLayoutSlideFromSourcePresentation", "cloneFromStorage", paramCloneFromStorage);

	bool failed = true;
	try
	{
		api->copyLayoutSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postCopyLayoutSlideFromSourcePresentation", "cloneFromStorage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postCopyLayoutSlideFromSourcePresentation", "cloneFromStorage", paramCloneFromStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postCopyLayoutSlideFromSourcePresentation", "cloneFromStorage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postCopyLayoutSlideFromSourcePresentation", "cloneFromStorage", paramCloneFromStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postCopyLayoutSlideFromSourcePresentation", "cloneFromStorage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postCopyLayoutSlideFromSourcePresentationInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("postCopyLayoutSlideFromSourcePresentation", "name");
	utility::string_t paramCloneFrom = utils->getTestValue("postCopyLayoutSlideFromSourcePresentation", "cloneFrom");
	int32_t paramCloneFromPosition = utils->getIntTestValue("postCopyLayoutSlideFromSourcePresentation", "cloneFromPosition");
	utility::string_t paramCloneFromPassword = utils->getTestValue("postCopyLayoutSlideFromSourcePresentation", "cloneFromPassword");
	utility::string_t paramCloneFromStorage = utils->getTestValue("postCopyLayoutSlideFromSourcePresentation", "cloneFromStorage");
	utility::string_t paramPassword = utils->getTestValue("postCopyLayoutSlideFromSourcePresentation", "password");
	utility::string_t paramFolder = utils->getTestValue("postCopyLayoutSlideFromSourcePresentation", "folder");
	utility::string_t paramStorage = utils->getTestValue("postCopyLayoutSlideFromSourcePresentation", "storage");
	paramPassword = utils->getInvalidTestValue("postCopyLayoutSlideFromSourcePresentation", "password", paramPassword);
	utils->initialize("postCopyLayoutSlideFromSourcePresentation", "password", paramPassword);

	bool failed = true;
	try
	{
		api->copyLayoutSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postCopyLayoutSlideFromSourcePresentation", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postCopyLayoutSlideFromSourcePresentation", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postCopyLayoutSlideFromSourcePresentation", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postCopyLayoutSlideFromSourcePresentation", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postCopyLayoutSlideFromSourcePresentation", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postCopyLayoutSlideFromSourcePresentationInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("postCopyLayoutSlideFromSourcePresentation", "name");
	utility::string_t paramCloneFrom = utils->getTestValue("postCopyLayoutSlideFromSourcePresentation", "cloneFrom");
	int32_t paramCloneFromPosition = utils->getIntTestValue("postCopyLayoutSlideFromSourcePresentation", "cloneFromPosition");
	utility::string_t paramCloneFromPassword = utils->getTestValue("postCopyLayoutSlideFromSourcePresentation", "cloneFromPassword");
	utility::string_t paramCloneFromStorage = utils->getTestValue("postCopyLayoutSlideFromSourcePresentation", "cloneFromStorage");
	utility::string_t paramPassword = utils->getTestValue("postCopyLayoutSlideFromSourcePresentation", "password");
	utility::string_t paramFolder = utils->getTestValue("postCopyLayoutSlideFromSourcePresentation", "folder");
	utility::string_t paramStorage = utils->getTestValue("postCopyLayoutSlideFromSourcePresentation", "storage");
	paramFolder = utils->getInvalidTestValue("postCopyLayoutSlideFromSourcePresentation", "folder", paramFolder);
	utils->initialize("postCopyLayoutSlideFromSourcePresentation", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->copyLayoutSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postCopyLayoutSlideFromSourcePresentation", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postCopyLayoutSlideFromSourcePresentation", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postCopyLayoutSlideFromSourcePresentation", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postCopyLayoutSlideFromSourcePresentation", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postCopyLayoutSlideFromSourcePresentation", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postCopyLayoutSlideFromSourcePresentationInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("postCopyLayoutSlideFromSourcePresentation", "name");
	utility::string_t paramCloneFrom = utils->getTestValue("postCopyLayoutSlideFromSourcePresentation", "cloneFrom");
	int32_t paramCloneFromPosition = utils->getIntTestValue("postCopyLayoutSlideFromSourcePresentation", "cloneFromPosition");
	utility::string_t paramCloneFromPassword = utils->getTestValue("postCopyLayoutSlideFromSourcePresentation", "cloneFromPassword");
	utility::string_t paramCloneFromStorage = utils->getTestValue("postCopyLayoutSlideFromSourcePresentation", "cloneFromStorage");
	utility::string_t paramPassword = utils->getTestValue("postCopyLayoutSlideFromSourcePresentation", "password");
	utility::string_t paramFolder = utils->getTestValue("postCopyLayoutSlideFromSourcePresentation", "folder");
	utility::string_t paramStorage = utils->getTestValue("postCopyLayoutSlideFromSourcePresentation", "storage");
	paramStorage = utils->getInvalidTestValue("postCopyLayoutSlideFromSourcePresentation", "storage", paramStorage);
	utils->initialize("postCopyLayoutSlideFromSourcePresentation", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->copyLayoutSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postCopyLayoutSlideFromSourcePresentation", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postCopyLayoutSlideFromSourcePresentation", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postCopyLayoutSlideFromSourcePresentation", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postCopyLayoutSlideFromSourcePresentation", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postCopyLayoutSlideFromSourcePresentation", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postCopyMasterSlideFromSourcePresentation) {
	utility::string_t paramName = utils->getTestValue("postCopyMasterSlideFromSourcePresentation", "name");
	utility::string_t paramCloneFrom = utils->getTestValue("postCopyMasterSlideFromSourcePresentation", "cloneFrom");
	int32_t paramCloneFromPosition = utils->getIntTestValue("postCopyMasterSlideFromSourcePresentation", "cloneFromPosition");
	utility::string_t paramCloneFromPassword = utils->getTestValue("postCopyMasterSlideFromSourcePresentation", "cloneFromPassword");
	utility::string_t paramCloneFromStorage = utils->getTestValue("postCopyMasterSlideFromSourcePresentation", "cloneFromStorage");
	auto paramApplyToAll = utils->getOptionalBoolTestValue("postCopyMasterSlideFromSourcePresentation", "applyToAll");
	utility::string_t paramPassword = utils->getTestValue("postCopyMasterSlideFromSourcePresentation", "password");
	utility::string_t paramFolder = utils->getTestValue("postCopyMasterSlideFromSourcePresentation", "folder");
	utility::string_t paramStorage = utils->getTestValue("postCopyMasterSlideFromSourcePresentation", "storage");
	utils->initialize("postCopyMasterSlideFromSourcePresentation", "");
	std::shared_ptr<MasterSlide> result = api->copyMasterSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramApplyToAll, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, postCopyMasterSlideFromSourcePresentationInvalidName) {
	utility::string_t paramName = utils->getTestValue("postCopyMasterSlideFromSourcePresentation", "name");
	utility::string_t paramCloneFrom = utils->getTestValue("postCopyMasterSlideFromSourcePresentation", "cloneFrom");
	int32_t paramCloneFromPosition = utils->getIntTestValue("postCopyMasterSlideFromSourcePresentation", "cloneFromPosition");
	utility::string_t paramCloneFromPassword = utils->getTestValue("postCopyMasterSlideFromSourcePresentation", "cloneFromPassword");
	utility::string_t paramCloneFromStorage = utils->getTestValue("postCopyMasterSlideFromSourcePresentation", "cloneFromStorage");
	auto paramApplyToAll = utils->getOptionalBoolTestValue("postCopyMasterSlideFromSourcePresentation", "applyToAll");
	utility::string_t paramPassword = utils->getTestValue("postCopyMasterSlideFromSourcePresentation", "password");
	utility::string_t paramFolder = utils->getTestValue("postCopyMasterSlideFromSourcePresentation", "folder");
	utility::string_t paramStorage = utils->getTestValue("postCopyMasterSlideFromSourcePresentation", "storage");
	paramName = utils->getInvalidTestValue("postCopyMasterSlideFromSourcePresentation", "name", paramName);
	utils->initialize("postCopyMasterSlideFromSourcePresentation", "name", paramName);

	bool failed = true;
	try
	{
		api->copyMasterSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramApplyToAll, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postCopyMasterSlideFromSourcePresentation", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postCopyMasterSlideFromSourcePresentation", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postCopyMasterSlideFromSourcePresentation", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postCopyMasterSlideFromSourcePresentation", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postCopyMasterSlideFromSourcePresentation", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postCopyMasterSlideFromSourcePresentationInvalidCloneFrom) {
	utility::string_t paramName = utils->getTestValue("postCopyMasterSlideFromSourcePresentation", "name");
	utility::string_t paramCloneFrom = utils->getTestValue("postCopyMasterSlideFromSourcePresentation", "cloneFrom");
	int32_t paramCloneFromPosition = utils->getIntTestValue("postCopyMasterSlideFromSourcePresentation", "cloneFromPosition");
	utility::string_t paramCloneFromPassword = utils->getTestValue("postCopyMasterSlideFromSourcePresentation", "cloneFromPassword");
	utility::string_t paramCloneFromStorage = utils->getTestValue("postCopyMasterSlideFromSourcePresentation", "cloneFromStorage");
	auto paramApplyToAll = utils->getOptionalBoolTestValue("postCopyMasterSlideFromSourcePresentation", "applyToAll");
	utility::string_t paramPassword = utils->getTestValue("postCopyMasterSlideFromSourcePresentation", "password");
	utility::string_t paramFolder = utils->getTestValue("postCopyMasterSlideFromSourcePresentation", "folder");
	utility::string_t paramStorage = utils->getTestValue("postCopyMasterSlideFromSourcePresentation", "storage");
	paramCloneFrom = utils->getInvalidTestValue("postCopyMasterSlideFromSourcePresentation", "cloneFrom", paramCloneFrom);
	utils->initialize("postCopyMasterSlideFromSourcePresentation", "cloneFrom", paramCloneFrom);

	bool failed = true;
	try
	{
		api->copyMasterSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramApplyToAll, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postCopyMasterSlideFromSourcePresentation", "cloneFrom");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postCopyMasterSlideFromSourcePresentation", "cloneFrom", paramCloneFrom);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postCopyMasterSlideFromSourcePresentation", "cloneFrom");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postCopyMasterSlideFromSourcePresentation", "cloneFrom", paramCloneFrom);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postCopyMasterSlideFromSourcePresentation", "cloneFrom"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postCopyMasterSlideFromSourcePresentationInvalidCloneFromPosition) {
	utility::string_t paramName = utils->getTestValue("postCopyMasterSlideFromSourcePresentation", "name");
	utility::string_t paramCloneFrom = utils->getTestValue("postCopyMasterSlideFromSourcePresentation", "cloneFrom");
	int32_t paramCloneFromPosition = utils->getIntTestValue("postCopyMasterSlideFromSourcePresentation", "cloneFromPosition");
	utility::string_t paramCloneFromPassword = utils->getTestValue("postCopyMasterSlideFromSourcePresentation", "cloneFromPassword");
	utility::string_t paramCloneFromStorage = utils->getTestValue("postCopyMasterSlideFromSourcePresentation", "cloneFromStorage");
	auto paramApplyToAll = utils->getOptionalBoolTestValue("postCopyMasterSlideFromSourcePresentation", "applyToAll");
	utility::string_t paramPassword = utils->getTestValue("postCopyMasterSlideFromSourcePresentation", "password");
	utility::string_t paramFolder = utils->getTestValue("postCopyMasterSlideFromSourcePresentation", "folder");
	utility::string_t paramStorage = utils->getTestValue("postCopyMasterSlideFromSourcePresentation", "storage");
	paramCloneFromPosition = utils->getInvalidIntTestValue("postCopyMasterSlideFromSourcePresentation", "cloneFromPosition", paramCloneFromPosition).value();
	utils->initialize("postCopyMasterSlideFromSourcePresentation", "cloneFromPosition", paramCloneFromPosition);

	bool failed = true;
	try
	{
		api->copyMasterSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramApplyToAll, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postCopyMasterSlideFromSourcePresentation", "cloneFromPosition");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postCopyMasterSlideFromSourcePresentation", "cloneFromPosition", paramCloneFromPosition);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postCopyMasterSlideFromSourcePresentation", "cloneFromPosition");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postCopyMasterSlideFromSourcePresentation", "cloneFromPosition", paramCloneFromPosition);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postCopyMasterSlideFromSourcePresentation", "cloneFromPosition"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postCopyMasterSlideFromSourcePresentationInvalidCloneFromPassword) {
	utility::string_t paramName = utils->getTestValue("postCopyMasterSlideFromSourcePresentation", "name");
	utility::string_t paramCloneFrom = utils->getTestValue("postCopyMasterSlideFromSourcePresentation", "cloneFrom");
	int32_t paramCloneFromPosition = utils->getIntTestValue("postCopyMasterSlideFromSourcePresentation", "cloneFromPosition");
	utility::string_t paramCloneFromPassword = utils->getTestValue("postCopyMasterSlideFromSourcePresentation", "cloneFromPassword");
	utility::string_t paramCloneFromStorage = utils->getTestValue("postCopyMasterSlideFromSourcePresentation", "cloneFromStorage");
	auto paramApplyToAll = utils->getOptionalBoolTestValue("postCopyMasterSlideFromSourcePresentation", "applyToAll");
	utility::string_t paramPassword = utils->getTestValue("postCopyMasterSlideFromSourcePresentation", "password");
	utility::string_t paramFolder = utils->getTestValue("postCopyMasterSlideFromSourcePresentation", "folder");
	utility::string_t paramStorage = utils->getTestValue("postCopyMasterSlideFromSourcePresentation", "storage");
	paramCloneFromPassword = utils->getInvalidTestValue("postCopyMasterSlideFromSourcePresentation", "cloneFromPassword", paramCloneFromPassword);
	utils->initialize("postCopyMasterSlideFromSourcePresentation", "cloneFromPassword", paramCloneFromPassword);

	bool failed = true;
	try
	{
		api->copyMasterSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramApplyToAll, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postCopyMasterSlideFromSourcePresentation", "cloneFromPassword");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postCopyMasterSlideFromSourcePresentation", "cloneFromPassword", paramCloneFromPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postCopyMasterSlideFromSourcePresentation", "cloneFromPassword");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postCopyMasterSlideFromSourcePresentation", "cloneFromPassword", paramCloneFromPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postCopyMasterSlideFromSourcePresentation", "cloneFromPassword"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postCopyMasterSlideFromSourcePresentationInvalidCloneFromStorage) {
	utility::string_t paramName = utils->getTestValue("postCopyMasterSlideFromSourcePresentation", "name");
	utility::string_t paramCloneFrom = utils->getTestValue("postCopyMasterSlideFromSourcePresentation", "cloneFrom");
	int32_t paramCloneFromPosition = utils->getIntTestValue("postCopyMasterSlideFromSourcePresentation", "cloneFromPosition");
	utility::string_t paramCloneFromPassword = utils->getTestValue("postCopyMasterSlideFromSourcePresentation", "cloneFromPassword");
	utility::string_t paramCloneFromStorage = utils->getTestValue("postCopyMasterSlideFromSourcePresentation", "cloneFromStorage");
	auto paramApplyToAll = utils->getOptionalBoolTestValue("postCopyMasterSlideFromSourcePresentation", "applyToAll");
	utility::string_t paramPassword = utils->getTestValue("postCopyMasterSlideFromSourcePresentation", "password");
	utility::string_t paramFolder = utils->getTestValue("postCopyMasterSlideFromSourcePresentation", "folder");
	utility::string_t paramStorage = utils->getTestValue("postCopyMasterSlideFromSourcePresentation", "storage");
	paramCloneFromStorage = utils->getInvalidTestValue("postCopyMasterSlideFromSourcePresentation", "cloneFromStorage", paramCloneFromStorage);
	utils->initialize("postCopyMasterSlideFromSourcePresentation", "cloneFromStorage", paramCloneFromStorage);

	bool failed = true;
	try
	{
		api->copyMasterSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramApplyToAll, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postCopyMasterSlideFromSourcePresentation", "cloneFromStorage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postCopyMasterSlideFromSourcePresentation", "cloneFromStorage", paramCloneFromStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postCopyMasterSlideFromSourcePresentation", "cloneFromStorage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postCopyMasterSlideFromSourcePresentation", "cloneFromStorage", paramCloneFromStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postCopyMasterSlideFromSourcePresentation", "cloneFromStorage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postCopyMasterSlideFromSourcePresentationInvalidApplyToAll) {
	utility::string_t paramName = utils->getTestValue("postCopyMasterSlideFromSourcePresentation", "name");
	utility::string_t paramCloneFrom = utils->getTestValue("postCopyMasterSlideFromSourcePresentation", "cloneFrom");
	int32_t paramCloneFromPosition = utils->getIntTestValue("postCopyMasterSlideFromSourcePresentation", "cloneFromPosition");
	utility::string_t paramCloneFromPassword = utils->getTestValue("postCopyMasterSlideFromSourcePresentation", "cloneFromPassword");
	utility::string_t paramCloneFromStorage = utils->getTestValue("postCopyMasterSlideFromSourcePresentation", "cloneFromStorage");
	auto paramApplyToAll = utils->getOptionalBoolTestValue("postCopyMasterSlideFromSourcePresentation", "applyToAll");
	utility::string_t paramPassword = utils->getTestValue("postCopyMasterSlideFromSourcePresentation", "password");
	utility::string_t paramFolder = utils->getTestValue("postCopyMasterSlideFromSourcePresentation", "folder");
	utility::string_t paramStorage = utils->getTestValue("postCopyMasterSlideFromSourcePresentation", "storage");
	paramApplyToAll = utils->getInvalidBoolTestValue("postCopyMasterSlideFromSourcePresentation", "applyToAll", paramApplyToAll).value();
	utils->initialize("postCopyMasterSlideFromSourcePresentation", "applyToAll", paramApplyToAll);

	bool failed = true;
	try
	{
		api->copyMasterSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramApplyToAll, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postCopyMasterSlideFromSourcePresentation", "applyToAll");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postCopyMasterSlideFromSourcePresentation", "applyToAll", paramApplyToAll);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postCopyMasterSlideFromSourcePresentation", "applyToAll");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postCopyMasterSlideFromSourcePresentation", "applyToAll", paramApplyToAll);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postCopyMasterSlideFromSourcePresentation", "applyToAll"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postCopyMasterSlideFromSourcePresentationInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("postCopyMasterSlideFromSourcePresentation", "name");
	utility::string_t paramCloneFrom = utils->getTestValue("postCopyMasterSlideFromSourcePresentation", "cloneFrom");
	int32_t paramCloneFromPosition = utils->getIntTestValue("postCopyMasterSlideFromSourcePresentation", "cloneFromPosition");
	utility::string_t paramCloneFromPassword = utils->getTestValue("postCopyMasterSlideFromSourcePresentation", "cloneFromPassword");
	utility::string_t paramCloneFromStorage = utils->getTestValue("postCopyMasterSlideFromSourcePresentation", "cloneFromStorage");
	auto paramApplyToAll = utils->getOptionalBoolTestValue("postCopyMasterSlideFromSourcePresentation", "applyToAll");
	utility::string_t paramPassword = utils->getTestValue("postCopyMasterSlideFromSourcePresentation", "password");
	utility::string_t paramFolder = utils->getTestValue("postCopyMasterSlideFromSourcePresentation", "folder");
	utility::string_t paramStorage = utils->getTestValue("postCopyMasterSlideFromSourcePresentation", "storage");
	paramPassword = utils->getInvalidTestValue("postCopyMasterSlideFromSourcePresentation", "password", paramPassword);
	utils->initialize("postCopyMasterSlideFromSourcePresentation", "password", paramPassword);

	bool failed = true;
	try
	{
		api->copyMasterSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramApplyToAll, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postCopyMasterSlideFromSourcePresentation", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postCopyMasterSlideFromSourcePresentation", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postCopyMasterSlideFromSourcePresentation", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postCopyMasterSlideFromSourcePresentation", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postCopyMasterSlideFromSourcePresentation", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postCopyMasterSlideFromSourcePresentationInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("postCopyMasterSlideFromSourcePresentation", "name");
	utility::string_t paramCloneFrom = utils->getTestValue("postCopyMasterSlideFromSourcePresentation", "cloneFrom");
	int32_t paramCloneFromPosition = utils->getIntTestValue("postCopyMasterSlideFromSourcePresentation", "cloneFromPosition");
	utility::string_t paramCloneFromPassword = utils->getTestValue("postCopyMasterSlideFromSourcePresentation", "cloneFromPassword");
	utility::string_t paramCloneFromStorage = utils->getTestValue("postCopyMasterSlideFromSourcePresentation", "cloneFromStorage");
	auto paramApplyToAll = utils->getOptionalBoolTestValue("postCopyMasterSlideFromSourcePresentation", "applyToAll");
	utility::string_t paramPassword = utils->getTestValue("postCopyMasterSlideFromSourcePresentation", "password");
	utility::string_t paramFolder = utils->getTestValue("postCopyMasterSlideFromSourcePresentation", "folder");
	utility::string_t paramStorage = utils->getTestValue("postCopyMasterSlideFromSourcePresentation", "storage");
	paramFolder = utils->getInvalidTestValue("postCopyMasterSlideFromSourcePresentation", "folder", paramFolder);
	utils->initialize("postCopyMasterSlideFromSourcePresentation", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->copyMasterSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramApplyToAll, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postCopyMasterSlideFromSourcePresentation", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postCopyMasterSlideFromSourcePresentation", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postCopyMasterSlideFromSourcePresentation", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postCopyMasterSlideFromSourcePresentation", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postCopyMasterSlideFromSourcePresentation", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postCopyMasterSlideFromSourcePresentationInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("postCopyMasterSlideFromSourcePresentation", "name");
	utility::string_t paramCloneFrom = utils->getTestValue("postCopyMasterSlideFromSourcePresentation", "cloneFrom");
	int32_t paramCloneFromPosition = utils->getIntTestValue("postCopyMasterSlideFromSourcePresentation", "cloneFromPosition");
	utility::string_t paramCloneFromPassword = utils->getTestValue("postCopyMasterSlideFromSourcePresentation", "cloneFromPassword");
	utility::string_t paramCloneFromStorage = utils->getTestValue("postCopyMasterSlideFromSourcePresentation", "cloneFromStorage");
	auto paramApplyToAll = utils->getOptionalBoolTestValue("postCopyMasterSlideFromSourcePresentation", "applyToAll");
	utility::string_t paramPassword = utils->getTestValue("postCopyMasterSlideFromSourcePresentation", "password");
	utility::string_t paramFolder = utils->getTestValue("postCopyMasterSlideFromSourcePresentation", "folder");
	utility::string_t paramStorage = utils->getTestValue("postCopyMasterSlideFromSourcePresentation", "storage");
	paramStorage = utils->getInvalidTestValue("postCopyMasterSlideFromSourcePresentation", "storage", paramStorage);
	utils->initialize("postCopyMasterSlideFromSourcePresentation", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->copyMasterSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramApplyToAll, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postCopyMasterSlideFromSourcePresentation", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postCopyMasterSlideFromSourcePresentation", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postCopyMasterSlideFromSourcePresentation", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postCopyMasterSlideFromSourcePresentation", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postCopyMasterSlideFromSourcePresentation", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postExportImageWithDefaultFormat) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("postExportImageWithDefaultFormat", "document");
	int32_t paramIndex = utils->getIntTestValue("postExportImageWithDefaultFormat", "index");
	utility::string_t paramPassword = utils->getTestValue("postExportImageWithDefaultFormat", "password");
	utils->initialize("postExportImageWithDefaultFormat", "");
	HttpContent result = api->downloadImageDefaultFormatOnline(paramDocument, paramIndex, paramPassword).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, postExportImageWithDefaultFormatInvalidDocument) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("postExportImageWithDefaultFormat", "document");
	int32_t paramIndex = utils->getIntTestValue("postExportImageWithDefaultFormat", "index");
	utility::string_t paramPassword = utils->getTestValue("postExportImageWithDefaultFormat", "password");
	paramDocument = utils->getInvalidBinaryTestValue("postExportImageWithDefaultFormat", "document", paramDocument);
	utils->initialize("postExportImageWithDefaultFormat", "document", paramDocument);

	bool failed = true;
	try
	{
		api->downloadImageDefaultFormatOnline(paramDocument, paramIndex, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postExportImageWithDefaultFormat", "document");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postExportImageWithDefaultFormat", "document", paramDocument);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postExportImageWithDefaultFormat", "document");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postExportImageWithDefaultFormat", "document", paramDocument);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postExportImageWithDefaultFormat", "document"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postExportImageWithDefaultFormatInvalidIndex) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("postExportImageWithDefaultFormat", "document");
	int32_t paramIndex = utils->getIntTestValue("postExportImageWithDefaultFormat", "index");
	utility::string_t paramPassword = utils->getTestValue("postExportImageWithDefaultFormat", "password");
	paramIndex = utils->getInvalidIntTestValue("postExportImageWithDefaultFormat", "index", paramIndex).value();
	utils->initialize("postExportImageWithDefaultFormat", "index", paramIndex);

	bool failed = true;
	try
	{
		api->downloadImageDefaultFormatOnline(paramDocument, paramIndex, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postExportImageWithDefaultFormat", "index");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postExportImageWithDefaultFormat", "index", paramIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postExportImageWithDefaultFormat", "index");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postExportImageWithDefaultFormat", "index", paramIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postExportImageWithDefaultFormat", "index"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postExportImageWithDefaultFormatInvalidPassword) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("postExportImageWithDefaultFormat", "document");
	int32_t paramIndex = utils->getIntTestValue("postExportImageWithDefaultFormat", "index");
	utility::string_t paramPassword = utils->getTestValue("postExportImageWithDefaultFormat", "password");
	paramPassword = utils->getInvalidTestValue("postExportImageWithDefaultFormat", "password", paramPassword);
	utils->initialize("postExportImageWithDefaultFormat", "password", paramPassword);

	bool failed = true;
	try
	{
		api->downloadImageDefaultFormatOnline(paramDocument, paramIndex, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postExportImageWithDefaultFormat", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postExportImageWithDefaultFormat", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postExportImageWithDefaultFormat", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postExportImageWithDefaultFormat", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postExportImageWithDefaultFormat", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postExportImageWithFormat) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("postExportImageWithFormat", "document");
	int32_t paramIndex = utils->getIntTestValue("postExportImageWithFormat", "index");
	utility::string_t paramFormat = utils->getTestValue("postExportImageWithFormat", "format");
	utility::string_t paramPassword = utils->getTestValue("postExportImageWithFormat", "password");
	utils->initialize("postExportImageWithFormat", "");
	HttpContent result = api->downloadImageOnline(paramDocument, paramIndex, paramFormat, paramPassword).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, postExportImageWithFormatInvalidDocument) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("postExportImageWithFormat", "document");
	int32_t paramIndex = utils->getIntTestValue("postExportImageWithFormat", "index");
	utility::string_t paramFormat = utils->getTestValue("postExportImageWithFormat", "format");
	utility::string_t paramPassword = utils->getTestValue("postExportImageWithFormat", "password");
	paramDocument = utils->getInvalidBinaryTestValue("postExportImageWithFormat", "document", paramDocument);
	utils->initialize("postExportImageWithFormat", "document", paramDocument);

	bool failed = true;
	try
	{
		api->downloadImageOnline(paramDocument, paramIndex, paramFormat, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postExportImageWithFormat", "document");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postExportImageWithFormat", "document", paramDocument);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postExportImageWithFormat", "document");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postExportImageWithFormat", "document", paramDocument);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postExportImageWithFormat", "document"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postExportImageWithFormatInvalidIndex) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("postExportImageWithFormat", "document");
	int32_t paramIndex = utils->getIntTestValue("postExportImageWithFormat", "index");
	utility::string_t paramFormat = utils->getTestValue("postExportImageWithFormat", "format");
	utility::string_t paramPassword = utils->getTestValue("postExportImageWithFormat", "password");
	paramIndex = utils->getInvalidIntTestValue("postExportImageWithFormat", "index", paramIndex).value();
	utils->initialize("postExportImageWithFormat", "index", paramIndex);

	bool failed = true;
	try
	{
		api->downloadImageOnline(paramDocument, paramIndex, paramFormat, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postExportImageWithFormat", "index");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postExportImageWithFormat", "index", paramIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postExportImageWithFormat", "index");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postExportImageWithFormat", "index", paramIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postExportImageWithFormat", "index"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postExportImageWithFormatInvalidFormat) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("postExportImageWithFormat", "document");
	int32_t paramIndex = utils->getIntTestValue("postExportImageWithFormat", "index");
	utility::string_t paramFormat = utils->getTestValue("postExportImageWithFormat", "format");
	utility::string_t paramPassword = utils->getTestValue("postExportImageWithFormat", "password");
	paramFormat = utils->getInvalidTestValue("postExportImageWithFormat", "format", paramFormat);
	utils->initialize("postExportImageWithFormat", "format", paramFormat);

	bool failed = true;
	try
	{
		api->downloadImageOnline(paramDocument, paramIndex, paramFormat, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postExportImageWithFormat", "format");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postExportImageWithFormat", "format", paramFormat);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postExportImageWithFormat", "format");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postExportImageWithFormat", "format", paramFormat);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postExportImageWithFormat", "format"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postExportImageWithFormatInvalidPassword) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("postExportImageWithFormat", "document");
	int32_t paramIndex = utils->getIntTestValue("postExportImageWithFormat", "index");
	utility::string_t paramFormat = utils->getTestValue("postExportImageWithFormat", "format");
	utility::string_t paramPassword = utils->getTestValue("postExportImageWithFormat", "password");
	paramPassword = utils->getInvalidTestValue("postExportImageWithFormat", "password", paramPassword);
	utils->initialize("postExportImageWithFormat", "password", paramPassword);

	bool failed = true;
	try
	{
		api->downloadImageOnline(paramDocument, paramIndex, paramFormat, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postExportImageWithFormat", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postExportImageWithFormat", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postExportImageWithFormat", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postExportImageWithFormat", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postExportImageWithFormat", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postExportImagesFromRequestWithFormat) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("postExportImagesFromRequestWithFormat", "document");
	utility::string_t paramFormat = utils->getTestValue("postExportImagesFromRequestWithFormat", "format");
	utility::string_t paramPassword = utils->getTestValue("postExportImagesFromRequestWithFormat", "password");
	utils->initialize("postExportImagesFromRequestWithFormat", "");
	HttpContent result = api->downloadImagesOnline(paramDocument, paramFormat, paramPassword).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, postExportImagesFromRequestWithFormatInvalidDocument) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("postExportImagesFromRequestWithFormat", "document");
	utility::string_t paramFormat = utils->getTestValue("postExportImagesFromRequestWithFormat", "format");
	utility::string_t paramPassword = utils->getTestValue("postExportImagesFromRequestWithFormat", "password");
	paramDocument = utils->getInvalidBinaryTestValue("postExportImagesFromRequestWithFormat", "document", paramDocument);
	utils->initialize("postExportImagesFromRequestWithFormat", "document", paramDocument);

	bool failed = true;
	try
	{
		api->downloadImagesOnline(paramDocument, paramFormat, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postExportImagesFromRequestWithFormat", "document");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postExportImagesFromRequestWithFormat", "document", paramDocument);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postExportImagesFromRequestWithFormat", "document");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postExportImagesFromRequestWithFormat", "document", paramDocument);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postExportImagesFromRequestWithFormat", "document"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postExportImagesFromRequestWithFormatInvalidFormat) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("postExportImagesFromRequestWithFormat", "document");
	utility::string_t paramFormat = utils->getTestValue("postExportImagesFromRequestWithFormat", "format");
	utility::string_t paramPassword = utils->getTestValue("postExportImagesFromRequestWithFormat", "password");
	paramFormat = utils->getInvalidTestValue("postExportImagesFromRequestWithFormat", "format", paramFormat);
	utils->initialize("postExportImagesFromRequestWithFormat", "format", paramFormat);

	bool failed = true;
	try
	{
		api->downloadImagesOnline(paramDocument, paramFormat, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postExportImagesFromRequestWithFormat", "format");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postExportImagesFromRequestWithFormat", "format", paramFormat);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postExportImagesFromRequestWithFormat", "format");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postExportImagesFromRequestWithFormat", "format", paramFormat);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postExportImagesFromRequestWithFormat", "format"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postExportImagesFromRequestWithFormatInvalidPassword) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("postExportImagesFromRequestWithFormat", "document");
	utility::string_t paramFormat = utils->getTestValue("postExportImagesFromRequestWithFormat", "format");
	utility::string_t paramPassword = utils->getTestValue("postExportImagesFromRequestWithFormat", "password");
	paramPassword = utils->getInvalidTestValue("postExportImagesFromRequestWithFormat", "password", paramPassword);
	utils->initialize("postExportImagesFromRequestWithFormat", "password", paramPassword);

	bool failed = true;
	try
	{
		api->downloadImagesOnline(paramDocument, paramFormat, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postExportImagesFromRequestWithFormat", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postExportImagesFromRequestWithFormat", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postExportImagesFromRequestWithFormat", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postExportImagesFromRequestWithFormat", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postExportImagesFromRequestWithFormat", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postExportImagesWithDefaultFormat) {
	utility::string_t paramName = utils->getTestValue("postExportImagesWithDefaultFormat", "name");
	utility::string_t paramPassword = utils->getTestValue("postExportImagesWithDefaultFormat", "password");
	utility::string_t paramFolder = utils->getTestValue("postExportImagesWithDefaultFormat", "folder");
	utility::string_t paramStorage = utils->getTestValue("postExportImagesWithDefaultFormat", "storage");
	utils->initialize("postExportImagesWithDefaultFormat", "");
	HttpContent result = api->downloadImagesDefaultFormat(paramName, paramPassword, paramFolder, paramStorage).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, postExportImagesWithDefaultFormatInvalidName) {
	utility::string_t paramName = utils->getTestValue("postExportImagesWithDefaultFormat", "name");
	utility::string_t paramPassword = utils->getTestValue("postExportImagesWithDefaultFormat", "password");
	utility::string_t paramFolder = utils->getTestValue("postExportImagesWithDefaultFormat", "folder");
	utility::string_t paramStorage = utils->getTestValue("postExportImagesWithDefaultFormat", "storage");
	paramName = utils->getInvalidTestValue("postExportImagesWithDefaultFormat", "name", paramName);
	utils->initialize("postExportImagesWithDefaultFormat", "name", paramName);

	bool failed = true;
	try
	{
		api->downloadImagesDefaultFormat(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postExportImagesWithDefaultFormat", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postExportImagesWithDefaultFormat", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postExportImagesWithDefaultFormat", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postExportImagesWithDefaultFormat", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postExportImagesWithDefaultFormat", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postExportImagesWithDefaultFormatInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("postExportImagesWithDefaultFormat", "name");
	utility::string_t paramPassword = utils->getTestValue("postExportImagesWithDefaultFormat", "password");
	utility::string_t paramFolder = utils->getTestValue("postExportImagesWithDefaultFormat", "folder");
	utility::string_t paramStorage = utils->getTestValue("postExportImagesWithDefaultFormat", "storage");
	paramPassword = utils->getInvalidTestValue("postExportImagesWithDefaultFormat", "password", paramPassword);
	utils->initialize("postExportImagesWithDefaultFormat", "password", paramPassword);

	bool failed = true;
	try
	{
		api->downloadImagesDefaultFormat(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postExportImagesWithDefaultFormat", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postExportImagesWithDefaultFormat", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postExportImagesWithDefaultFormat", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postExportImagesWithDefaultFormat", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postExportImagesWithDefaultFormat", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postExportImagesWithDefaultFormatInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("postExportImagesWithDefaultFormat", "name");
	utility::string_t paramPassword = utils->getTestValue("postExportImagesWithDefaultFormat", "password");
	utility::string_t paramFolder = utils->getTestValue("postExportImagesWithDefaultFormat", "folder");
	utility::string_t paramStorage = utils->getTestValue("postExportImagesWithDefaultFormat", "storage");
	paramFolder = utils->getInvalidTestValue("postExportImagesWithDefaultFormat", "folder", paramFolder);
	utils->initialize("postExportImagesWithDefaultFormat", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->downloadImagesDefaultFormat(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postExportImagesWithDefaultFormat", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postExportImagesWithDefaultFormat", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postExportImagesWithDefaultFormat", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postExportImagesWithDefaultFormat", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postExportImagesWithDefaultFormat", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postExportImagesWithDefaultFormatInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("postExportImagesWithDefaultFormat", "name");
	utility::string_t paramPassword = utils->getTestValue("postExportImagesWithDefaultFormat", "password");
	utility::string_t paramFolder = utils->getTestValue("postExportImagesWithDefaultFormat", "folder");
	utility::string_t paramStorage = utils->getTestValue("postExportImagesWithDefaultFormat", "storage");
	paramStorage = utils->getInvalidTestValue("postExportImagesWithDefaultFormat", "storage", paramStorage);
	utils->initialize("postExportImagesWithDefaultFormat", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->downloadImagesDefaultFormat(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postExportImagesWithDefaultFormat", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postExportImagesWithDefaultFormat", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postExportImagesWithDefaultFormat", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postExportImagesWithDefaultFormat", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postExportImagesWithDefaultFormat", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postExportImagesWithFormat) {
	utility::string_t paramName = utils->getTestValue("postExportImagesWithFormat", "name");
	utility::string_t paramFormat = utils->getTestValue("postExportImagesWithFormat", "format");
	utility::string_t paramPassword = utils->getTestValue("postExportImagesWithFormat", "password");
	utility::string_t paramFolder = utils->getTestValue("postExportImagesWithFormat", "folder");
	utility::string_t paramStorage = utils->getTestValue("postExportImagesWithFormat", "storage");
	utils->initialize("postExportImagesWithFormat", "");
	HttpContent result = api->downloadImages(paramName, paramFormat, paramPassword, paramFolder, paramStorage).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, postExportImagesWithFormatInvalidName) {
	utility::string_t paramName = utils->getTestValue("postExportImagesWithFormat", "name");
	utility::string_t paramFormat = utils->getTestValue("postExportImagesWithFormat", "format");
	utility::string_t paramPassword = utils->getTestValue("postExportImagesWithFormat", "password");
	utility::string_t paramFolder = utils->getTestValue("postExportImagesWithFormat", "folder");
	utility::string_t paramStorage = utils->getTestValue("postExportImagesWithFormat", "storage");
	paramName = utils->getInvalidTestValue("postExportImagesWithFormat", "name", paramName);
	utils->initialize("postExportImagesWithFormat", "name", paramName);

	bool failed = true;
	try
	{
		api->downloadImages(paramName, paramFormat, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postExportImagesWithFormat", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postExportImagesWithFormat", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postExportImagesWithFormat", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postExportImagesWithFormat", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postExportImagesWithFormat", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postExportImagesWithFormatInvalidFormat) {
	utility::string_t paramName = utils->getTestValue("postExportImagesWithFormat", "name");
	utility::string_t paramFormat = utils->getTestValue("postExportImagesWithFormat", "format");
	utility::string_t paramPassword = utils->getTestValue("postExportImagesWithFormat", "password");
	utility::string_t paramFolder = utils->getTestValue("postExportImagesWithFormat", "folder");
	utility::string_t paramStorage = utils->getTestValue("postExportImagesWithFormat", "storage");
	paramFormat = utils->getInvalidTestValue("postExportImagesWithFormat", "format", paramFormat);
	utils->initialize("postExportImagesWithFormat", "format", paramFormat);

	bool failed = true;
	try
	{
		api->downloadImages(paramName, paramFormat, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postExportImagesWithFormat", "format");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postExportImagesWithFormat", "format", paramFormat);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postExportImagesWithFormat", "format");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postExportImagesWithFormat", "format", paramFormat);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postExportImagesWithFormat", "format"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postExportImagesWithFormatInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("postExportImagesWithFormat", "name");
	utility::string_t paramFormat = utils->getTestValue("postExportImagesWithFormat", "format");
	utility::string_t paramPassword = utils->getTestValue("postExportImagesWithFormat", "password");
	utility::string_t paramFolder = utils->getTestValue("postExportImagesWithFormat", "folder");
	utility::string_t paramStorage = utils->getTestValue("postExportImagesWithFormat", "storage");
	paramPassword = utils->getInvalidTestValue("postExportImagesWithFormat", "password", paramPassword);
	utils->initialize("postExportImagesWithFormat", "password", paramPassword);

	bool failed = true;
	try
	{
		api->downloadImages(paramName, paramFormat, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postExportImagesWithFormat", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postExportImagesWithFormat", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postExportImagesWithFormat", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postExportImagesWithFormat", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postExportImagesWithFormat", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postExportImagesWithFormatInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("postExportImagesWithFormat", "name");
	utility::string_t paramFormat = utils->getTestValue("postExportImagesWithFormat", "format");
	utility::string_t paramPassword = utils->getTestValue("postExportImagesWithFormat", "password");
	utility::string_t paramFolder = utils->getTestValue("postExportImagesWithFormat", "folder");
	utility::string_t paramStorage = utils->getTestValue("postExportImagesWithFormat", "storage");
	paramFolder = utils->getInvalidTestValue("postExportImagesWithFormat", "folder", paramFolder);
	utils->initialize("postExportImagesWithFormat", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->downloadImages(paramName, paramFormat, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postExportImagesWithFormat", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postExportImagesWithFormat", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postExportImagesWithFormat", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postExportImagesWithFormat", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postExportImagesWithFormat", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postExportImagesWithFormatInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("postExportImagesWithFormat", "name");
	utility::string_t paramFormat = utils->getTestValue("postExportImagesWithFormat", "format");
	utility::string_t paramPassword = utils->getTestValue("postExportImagesWithFormat", "password");
	utility::string_t paramFolder = utils->getTestValue("postExportImagesWithFormat", "folder");
	utility::string_t paramStorage = utils->getTestValue("postExportImagesWithFormat", "storage");
	paramStorage = utils->getInvalidTestValue("postExportImagesWithFormat", "storage", paramStorage);
	utils->initialize("postExportImagesWithFormat", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->downloadImages(paramName, paramFormat, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postExportImagesWithFormat", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postExportImagesWithFormat", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postExportImagesWithFormat", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postExportImagesWithFormat", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postExportImagesWithFormat", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postExportShape) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("postExportShape", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("postExportShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("postExportShape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("postExportShape", "format");
	utility::string_t paramPassword = utils->getTestValue("postExportShape", "password");
	utility::string_t paramStorage = utils->getTestValue("postExportShape", "storage");
	auto paramScaleX = utils->getOptionalDoubleTestValue("postExportShape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("postExportShape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("postExportShape", "bounds");
	utility::string_t paramFontsFolder = utils->getTestValue("postExportShape", "fontsFolder");
	utils->initialize("postExportShape", "");
	HttpContent result = api->downloadShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramPassword, paramStorage, paramScaleX, paramScaleY, paramBounds, paramFontsFolder).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, postExportShapeInvalidDocument) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("postExportShape", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("postExportShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("postExportShape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("postExportShape", "format");
	utility::string_t paramPassword = utils->getTestValue("postExportShape", "password");
	utility::string_t paramStorage = utils->getTestValue("postExportShape", "storage");
	auto paramScaleX = utils->getOptionalDoubleTestValue("postExportShape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("postExportShape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("postExportShape", "bounds");
	utility::string_t paramFontsFolder = utils->getTestValue("postExportShape", "fontsFolder");
	paramDocument = utils->getInvalidBinaryTestValue("postExportShape", "document", paramDocument);
	utils->initialize("postExportShape", "document", paramDocument);

	bool failed = true;
	try
	{
		api->downloadShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramPassword, paramStorage, paramScaleX, paramScaleY, paramBounds, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postExportShape", "document");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postExportShape", "document", paramDocument);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postExportShape", "document");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postExportShape", "document", paramDocument);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postExportShape", "document"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postExportShapeInvalidSlideIndex) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("postExportShape", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("postExportShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("postExportShape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("postExportShape", "format");
	utility::string_t paramPassword = utils->getTestValue("postExportShape", "password");
	utility::string_t paramStorage = utils->getTestValue("postExportShape", "storage");
	auto paramScaleX = utils->getOptionalDoubleTestValue("postExportShape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("postExportShape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("postExportShape", "bounds");
	utility::string_t paramFontsFolder = utils->getTestValue("postExportShape", "fontsFolder");
	paramSlideIndex = utils->getInvalidIntTestValue("postExportShape", "slideIndex", paramSlideIndex).value();
	utils->initialize("postExportShape", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->downloadShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramPassword, paramStorage, paramScaleX, paramScaleY, paramBounds, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postExportShape", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postExportShape", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postExportShape", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postExportShape", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postExportShape", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postExportShapeInvalidShapeIndex) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("postExportShape", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("postExportShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("postExportShape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("postExportShape", "format");
	utility::string_t paramPassword = utils->getTestValue("postExportShape", "password");
	utility::string_t paramStorage = utils->getTestValue("postExportShape", "storage");
	auto paramScaleX = utils->getOptionalDoubleTestValue("postExportShape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("postExportShape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("postExportShape", "bounds");
	utility::string_t paramFontsFolder = utils->getTestValue("postExportShape", "fontsFolder");
	paramShapeIndex = utils->getInvalidIntTestValue("postExportShape", "shapeIndex", paramShapeIndex).value();
	utils->initialize("postExportShape", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->downloadShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramPassword, paramStorage, paramScaleX, paramScaleY, paramBounds, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postExportShape", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postExportShape", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postExportShape", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postExportShape", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postExportShape", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postExportShapeInvalidFormat) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("postExportShape", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("postExportShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("postExportShape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("postExportShape", "format");
	utility::string_t paramPassword = utils->getTestValue("postExportShape", "password");
	utility::string_t paramStorage = utils->getTestValue("postExportShape", "storage");
	auto paramScaleX = utils->getOptionalDoubleTestValue("postExportShape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("postExportShape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("postExportShape", "bounds");
	utility::string_t paramFontsFolder = utils->getTestValue("postExportShape", "fontsFolder");
	paramFormat = utils->getInvalidTestValue("postExportShape", "format", paramFormat);
	utils->initialize("postExportShape", "format", paramFormat);

	bool failed = true;
	try
	{
		api->downloadShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramPassword, paramStorage, paramScaleX, paramScaleY, paramBounds, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postExportShape", "format");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postExportShape", "format", paramFormat);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postExportShape", "format");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postExportShape", "format", paramFormat);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postExportShape", "format"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postExportShapeInvalidPassword) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("postExportShape", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("postExportShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("postExportShape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("postExportShape", "format");
	utility::string_t paramPassword = utils->getTestValue("postExportShape", "password");
	utility::string_t paramStorage = utils->getTestValue("postExportShape", "storage");
	auto paramScaleX = utils->getOptionalDoubleTestValue("postExportShape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("postExportShape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("postExportShape", "bounds");
	utility::string_t paramFontsFolder = utils->getTestValue("postExportShape", "fontsFolder");
	paramPassword = utils->getInvalidTestValue("postExportShape", "password", paramPassword);
	utils->initialize("postExportShape", "password", paramPassword);

	bool failed = true;
	try
	{
		api->downloadShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramPassword, paramStorage, paramScaleX, paramScaleY, paramBounds, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postExportShape", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postExportShape", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postExportShape", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postExportShape", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postExportShape", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postExportShapeInvalidStorage) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("postExportShape", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("postExportShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("postExportShape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("postExportShape", "format");
	utility::string_t paramPassword = utils->getTestValue("postExportShape", "password");
	utility::string_t paramStorage = utils->getTestValue("postExportShape", "storage");
	auto paramScaleX = utils->getOptionalDoubleTestValue("postExportShape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("postExportShape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("postExportShape", "bounds");
	utility::string_t paramFontsFolder = utils->getTestValue("postExportShape", "fontsFolder");
	paramStorage = utils->getInvalidTestValue("postExportShape", "storage", paramStorage);
	utils->initialize("postExportShape", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->downloadShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramPassword, paramStorage, paramScaleX, paramScaleY, paramBounds, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postExportShape", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postExportShape", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postExportShape", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postExportShape", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postExportShape", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postExportShapeInvalidScaleX) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("postExportShape", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("postExportShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("postExportShape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("postExportShape", "format");
	utility::string_t paramPassword = utils->getTestValue("postExportShape", "password");
	utility::string_t paramStorage = utils->getTestValue("postExportShape", "storage");
	auto paramScaleX = utils->getOptionalDoubleTestValue("postExportShape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("postExportShape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("postExportShape", "bounds");
	utility::string_t paramFontsFolder = utils->getTestValue("postExportShape", "fontsFolder");
	paramScaleX = utils->getInvalidDoubleTestValue("postExportShape", "scaleX", paramScaleX).value();
	utils->initialize("postExportShape", "scaleX", paramScaleX);

	bool failed = true;
	try
	{
		api->downloadShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramPassword, paramStorage, paramScaleX, paramScaleY, paramBounds, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postExportShape", "scaleX");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postExportShape", "scaleX", paramScaleX);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postExportShape", "scaleX");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postExportShape", "scaleX", paramScaleX);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postExportShape", "scaleX"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postExportShapeInvalidScaleY) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("postExportShape", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("postExportShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("postExportShape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("postExportShape", "format");
	utility::string_t paramPassword = utils->getTestValue("postExportShape", "password");
	utility::string_t paramStorage = utils->getTestValue("postExportShape", "storage");
	auto paramScaleX = utils->getOptionalDoubleTestValue("postExportShape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("postExportShape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("postExportShape", "bounds");
	utility::string_t paramFontsFolder = utils->getTestValue("postExportShape", "fontsFolder");
	paramScaleY = utils->getInvalidDoubleTestValue("postExportShape", "scaleY", paramScaleY).value();
	utils->initialize("postExportShape", "scaleY", paramScaleY);

	bool failed = true;
	try
	{
		api->downloadShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramPassword, paramStorage, paramScaleX, paramScaleY, paramBounds, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postExportShape", "scaleY");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postExportShape", "scaleY", paramScaleY);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postExportShape", "scaleY");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postExportShape", "scaleY", paramScaleY);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postExportShape", "scaleY"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postExportShapeInvalidBounds) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("postExportShape", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("postExportShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("postExportShape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("postExportShape", "format");
	utility::string_t paramPassword = utils->getTestValue("postExportShape", "password");
	utility::string_t paramStorage = utils->getTestValue("postExportShape", "storage");
	auto paramScaleX = utils->getOptionalDoubleTestValue("postExportShape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("postExportShape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("postExportShape", "bounds");
	utility::string_t paramFontsFolder = utils->getTestValue("postExportShape", "fontsFolder");
	paramBounds = utils->getInvalidTestValue("postExportShape", "bounds", paramBounds);
	utils->initialize("postExportShape", "bounds", paramBounds);

	bool failed = true;
	try
	{
		api->downloadShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramPassword, paramStorage, paramScaleX, paramScaleY, paramBounds, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postExportShape", "bounds");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postExportShape", "bounds", paramBounds);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postExportShape", "bounds");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postExportShape", "bounds", paramBounds);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postExportShape", "bounds"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postExportShapeInvalidFontsFolder) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("postExportShape", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("postExportShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("postExportShape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("postExportShape", "format");
	utility::string_t paramPassword = utils->getTestValue("postExportShape", "password");
	utility::string_t paramStorage = utils->getTestValue("postExportShape", "storage");
	auto paramScaleX = utils->getOptionalDoubleTestValue("postExportShape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("postExportShape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("postExportShape", "bounds");
	utility::string_t paramFontsFolder = utils->getTestValue("postExportShape", "fontsFolder");
	paramFontsFolder = utils->getInvalidTestValue("postExportShape", "fontsFolder", paramFontsFolder);
	utils->initialize("postExportShape", "fontsFolder", paramFontsFolder);

	bool failed = true;
	try
	{
		api->downloadShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramPassword, paramStorage, paramScaleX, paramScaleY, paramBounds, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postExportShape", "fontsFolder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postExportShape", "fontsFolder", paramFontsFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postExportShape", "fontsFolder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postExportShape", "fontsFolder", paramFontsFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postExportShape", "fontsFolder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postExportSlide) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("postExportSlide", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("postExportSlide", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("postExportSlide", "format");
	auto paramWidth = utils->getOptionalIntTestValue("postExportSlide", "width");
	auto paramHeight = utils->getOptionalIntTestValue("postExportSlide", "height");
	utility::string_t paramPassword = utils->getTestValue("postExportSlide", "password");
	utility::string_t paramStorage = utils->getTestValue("postExportSlide", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("postExportSlide", "fontsFolder");
	utils->initialize("postExportSlide", "");
	HttpContent result = api->downloadSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, postExportSlideInvalidDocument) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("postExportSlide", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("postExportSlide", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("postExportSlide", "format");
	auto paramWidth = utils->getOptionalIntTestValue("postExportSlide", "width");
	auto paramHeight = utils->getOptionalIntTestValue("postExportSlide", "height");
	utility::string_t paramPassword = utils->getTestValue("postExportSlide", "password");
	utility::string_t paramStorage = utils->getTestValue("postExportSlide", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("postExportSlide", "fontsFolder");
	paramDocument = utils->getInvalidBinaryTestValue("postExportSlide", "document", paramDocument);
	utils->initialize("postExportSlide", "document", paramDocument);

	bool failed = true;
	try
	{
		api->downloadSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postExportSlide", "document");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postExportSlide", "document", paramDocument);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postExportSlide", "document");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postExportSlide", "document", paramDocument);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postExportSlide", "document"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postExportSlideInvalidSlideIndex) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("postExportSlide", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("postExportSlide", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("postExportSlide", "format");
	auto paramWidth = utils->getOptionalIntTestValue("postExportSlide", "width");
	auto paramHeight = utils->getOptionalIntTestValue("postExportSlide", "height");
	utility::string_t paramPassword = utils->getTestValue("postExportSlide", "password");
	utility::string_t paramStorage = utils->getTestValue("postExportSlide", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("postExportSlide", "fontsFolder");
	paramSlideIndex = utils->getInvalidIntTestValue("postExportSlide", "slideIndex", paramSlideIndex).value();
	utils->initialize("postExportSlide", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->downloadSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postExportSlide", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postExportSlide", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postExportSlide", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postExportSlide", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postExportSlide", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postExportSlideInvalidFormat) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("postExportSlide", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("postExportSlide", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("postExportSlide", "format");
	auto paramWidth = utils->getOptionalIntTestValue("postExportSlide", "width");
	auto paramHeight = utils->getOptionalIntTestValue("postExportSlide", "height");
	utility::string_t paramPassword = utils->getTestValue("postExportSlide", "password");
	utility::string_t paramStorage = utils->getTestValue("postExportSlide", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("postExportSlide", "fontsFolder");
	paramFormat = utils->getInvalidTestValue("postExportSlide", "format", paramFormat);
	utils->initialize("postExportSlide", "format", paramFormat);

	bool failed = true;
	try
	{
		api->downloadSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postExportSlide", "format");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postExportSlide", "format", paramFormat);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postExportSlide", "format");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postExportSlide", "format", paramFormat);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postExportSlide", "format"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postExportSlideInvalidWidth) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("postExportSlide", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("postExportSlide", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("postExportSlide", "format");
	auto paramWidth = utils->getOptionalIntTestValue("postExportSlide", "width");
	auto paramHeight = utils->getOptionalIntTestValue("postExportSlide", "height");
	utility::string_t paramPassword = utils->getTestValue("postExportSlide", "password");
	utility::string_t paramStorage = utils->getTestValue("postExportSlide", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("postExportSlide", "fontsFolder");
	paramWidth = utils->getInvalidIntTestValue("postExportSlide", "width", paramWidth).value();
	utils->initialize("postExportSlide", "width", paramWidth);

	bool failed = true;
	try
	{
		api->downloadSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postExportSlide", "width");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postExportSlide", "width", paramWidth);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postExportSlide", "width");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postExportSlide", "width", paramWidth);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postExportSlide", "width"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postExportSlideInvalidHeight) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("postExportSlide", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("postExportSlide", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("postExportSlide", "format");
	auto paramWidth = utils->getOptionalIntTestValue("postExportSlide", "width");
	auto paramHeight = utils->getOptionalIntTestValue("postExportSlide", "height");
	utility::string_t paramPassword = utils->getTestValue("postExportSlide", "password");
	utility::string_t paramStorage = utils->getTestValue("postExportSlide", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("postExportSlide", "fontsFolder");
	paramHeight = utils->getInvalidIntTestValue("postExportSlide", "height", paramHeight).value();
	utils->initialize("postExportSlide", "height", paramHeight);

	bool failed = true;
	try
	{
		api->downloadSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postExportSlide", "height");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postExportSlide", "height", paramHeight);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postExportSlide", "height");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postExportSlide", "height", paramHeight);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postExportSlide", "height"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postExportSlideInvalidPassword) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("postExportSlide", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("postExportSlide", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("postExportSlide", "format");
	auto paramWidth = utils->getOptionalIntTestValue("postExportSlide", "width");
	auto paramHeight = utils->getOptionalIntTestValue("postExportSlide", "height");
	utility::string_t paramPassword = utils->getTestValue("postExportSlide", "password");
	utility::string_t paramStorage = utils->getTestValue("postExportSlide", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("postExportSlide", "fontsFolder");
	paramPassword = utils->getInvalidTestValue("postExportSlide", "password", paramPassword);
	utils->initialize("postExportSlide", "password", paramPassword);

	bool failed = true;
	try
	{
		api->downloadSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postExportSlide", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postExportSlide", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postExportSlide", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postExportSlide", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postExportSlide", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postExportSlideInvalidStorage) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("postExportSlide", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("postExportSlide", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("postExportSlide", "format");
	auto paramWidth = utils->getOptionalIntTestValue("postExportSlide", "width");
	auto paramHeight = utils->getOptionalIntTestValue("postExportSlide", "height");
	utility::string_t paramPassword = utils->getTestValue("postExportSlide", "password");
	utility::string_t paramStorage = utils->getTestValue("postExportSlide", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("postExportSlide", "fontsFolder");
	paramStorage = utils->getInvalidTestValue("postExportSlide", "storage", paramStorage);
	utils->initialize("postExportSlide", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->downloadSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postExportSlide", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postExportSlide", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postExportSlide", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postExportSlide", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postExportSlide", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postExportSlideInvalidFontsFolder) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("postExportSlide", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("postExportSlide", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("postExportSlide", "format");
	auto paramWidth = utils->getOptionalIntTestValue("postExportSlide", "width");
	auto paramHeight = utils->getOptionalIntTestValue("postExportSlide", "height");
	utility::string_t paramPassword = utils->getTestValue("postExportSlide", "password");
	utility::string_t paramStorage = utils->getTestValue("postExportSlide", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("postExportSlide", "fontsFolder");
	paramFontsFolder = utils->getInvalidTestValue("postExportSlide", "fontsFolder", paramFontsFolder);
	utils->initialize("postExportSlide", "fontsFolder", paramFontsFolder);

	bool failed = true;
	try
	{
		api->downloadSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postExportSlide", "fontsFolder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postExportSlide", "fontsFolder", paramFontsFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postExportSlide", "fontsFolder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postExportSlide", "fontsFolder", paramFontsFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postExportSlide", "fontsFolder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postGetNotesSlide) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("postGetNotesSlide", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("postGetNotesSlide", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("postGetNotesSlide", "password");
	utils->initialize("postGetNotesSlide", "");
	std::shared_ptr<NotesSlide> result = api->getNotesSlideOnline(paramDocument, paramSlideIndex, paramPassword).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, postGetNotesSlideInvalidDocument) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("postGetNotesSlide", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("postGetNotesSlide", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("postGetNotesSlide", "password");
	paramDocument = utils->getInvalidBinaryTestValue("postGetNotesSlide", "document", paramDocument);
	utils->initialize("postGetNotesSlide", "document", paramDocument);

	bool failed = true;
	try
	{
		api->getNotesSlideOnline(paramDocument, paramSlideIndex, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postGetNotesSlide", "document");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postGetNotesSlide", "document", paramDocument);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postGetNotesSlide", "document");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postGetNotesSlide", "document", paramDocument);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postGetNotesSlide", "document"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postGetNotesSlideInvalidSlideIndex) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("postGetNotesSlide", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("postGetNotesSlide", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("postGetNotesSlide", "password");
	paramSlideIndex = utils->getInvalidIntTestValue("postGetNotesSlide", "slideIndex", paramSlideIndex).value();
	utils->initialize("postGetNotesSlide", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->getNotesSlideOnline(paramDocument, paramSlideIndex, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postGetNotesSlide", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postGetNotesSlide", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postGetNotesSlide", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postGetNotesSlide", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postGetNotesSlide", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postGetNotesSlideInvalidPassword) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("postGetNotesSlide", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("postGetNotesSlide", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("postGetNotesSlide", "password");
	paramPassword = utils->getInvalidTestValue("postGetNotesSlide", "password", paramPassword);
	utils->initialize("postGetNotesSlide", "password", paramPassword);

	bool failed = true;
	try
	{
		api->getNotesSlideOnline(paramDocument, paramSlideIndex, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postGetNotesSlide", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postGetNotesSlide", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postGetNotesSlide", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postGetNotesSlide", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postGetNotesSlide", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postGetNotesSlideExists) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("postGetNotesSlideExists", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("postGetNotesSlideExists", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("postGetNotesSlideExists", "password");
	utils->initialize("postGetNotesSlideExists", "");
	std::shared_ptr<EntityExists> result = api->notesSlideExistsOnline(paramDocument, paramSlideIndex, paramPassword).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, postGetNotesSlideExistsInvalidDocument) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("postGetNotesSlideExists", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("postGetNotesSlideExists", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("postGetNotesSlideExists", "password");
	paramDocument = utils->getInvalidBinaryTestValue("postGetNotesSlideExists", "document", paramDocument);
	utils->initialize("postGetNotesSlideExists", "document", paramDocument);

	bool failed = true;
	try
	{
		api->notesSlideExistsOnline(paramDocument, paramSlideIndex, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postGetNotesSlideExists", "document");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postGetNotesSlideExists", "document", paramDocument);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postGetNotesSlideExists", "document");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postGetNotesSlideExists", "document", paramDocument);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postGetNotesSlideExists", "document"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postGetNotesSlideExistsInvalidSlideIndex) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("postGetNotesSlideExists", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("postGetNotesSlideExists", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("postGetNotesSlideExists", "password");
	paramSlideIndex = utils->getInvalidIntTestValue("postGetNotesSlideExists", "slideIndex", paramSlideIndex).value();
	utils->initialize("postGetNotesSlideExists", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->notesSlideExistsOnline(paramDocument, paramSlideIndex, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postGetNotesSlideExists", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postGetNotesSlideExists", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postGetNotesSlideExists", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postGetNotesSlideExists", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postGetNotesSlideExists", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postGetNotesSlideExistsInvalidPassword) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("postGetNotesSlideExists", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("postGetNotesSlideExists", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("postGetNotesSlideExists", "password");
	paramPassword = utils->getInvalidTestValue("postGetNotesSlideExists", "password", paramPassword);
	utils->initialize("postGetNotesSlideExists", "password", paramPassword);

	bool failed = true;
	try
	{
		api->notesSlideExistsOnline(paramDocument, paramSlideIndex, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postGetNotesSlideExists", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postGetNotesSlideExists", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postGetNotesSlideExists", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postGetNotesSlideExists", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postGetNotesSlideExists", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postGetNotesSlideWithFormat) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("postGetNotesSlideWithFormat", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("postGetNotesSlideWithFormat", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("postGetNotesSlideWithFormat", "format");
	auto paramWidth = utils->getOptionalIntTestValue("postGetNotesSlideWithFormat", "width");
	auto paramHeight = utils->getOptionalIntTestValue("postGetNotesSlideWithFormat", "height");
	utility::string_t paramPassword = utils->getTestValue("postGetNotesSlideWithFormat", "password");
	utility::string_t paramFontsFolder = utils->getTestValue("postGetNotesSlideWithFormat", "fontsFolder");
	utils->initialize("postGetNotesSlideWithFormat", "");
	HttpContent result = api->downloadNotesSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFontsFolder).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, postGetNotesSlideWithFormatInvalidDocument) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("postGetNotesSlideWithFormat", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("postGetNotesSlideWithFormat", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("postGetNotesSlideWithFormat", "format");
	auto paramWidth = utils->getOptionalIntTestValue("postGetNotesSlideWithFormat", "width");
	auto paramHeight = utils->getOptionalIntTestValue("postGetNotesSlideWithFormat", "height");
	utility::string_t paramPassword = utils->getTestValue("postGetNotesSlideWithFormat", "password");
	utility::string_t paramFontsFolder = utils->getTestValue("postGetNotesSlideWithFormat", "fontsFolder");
	paramDocument = utils->getInvalidBinaryTestValue("postGetNotesSlideWithFormat", "document", paramDocument);
	utils->initialize("postGetNotesSlideWithFormat", "document", paramDocument);

	bool failed = true;
	try
	{
		api->downloadNotesSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postGetNotesSlideWithFormat", "document");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postGetNotesSlideWithFormat", "document", paramDocument);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postGetNotesSlideWithFormat", "document");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postGetNotesSlideWithFormat", "document", paramDocument);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postGetNotesSlideWithFormat", "document"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postGetNotesSlideWithFormatInvalidSlideIndex) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("postGetNotesSlideWithFormat", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("postGetNotesSlideWithFormat", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("postGetNotesSlideWithFormat", "format");
	auto paramWidth = utils->getOptionalIntTestValue("postGetNotesSlideWithFormat", "width");
	auto paramHeight = utils->getOptionalIntTestValue("postGetNotesSlideWithFormat", "height");
	utility::string_t paramPassword = utils->getTestValue("postGetNotesSlideWithFormat", "password");
	utility::string_t paramFontsFolder = utils->getTestValue("postGetNotesSlideWithFormat", "fontsFolder");
	paramSlideIndex = utils->getInvalidIntTestValue("postGetNotesSlideWithFormat", "slideIndex", paramSlideIndex).value();
	utils->initialize("postGetNotesSlideWithFormat", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->downloadNotesSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postGetNotesSlideWithFormat", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postGetNotesSlideWithFormat", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postGetNotesSlideWithFormat", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postGetNotesSlideWithFormat", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postGetNotesSlideWithFormat", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postGetNotesSlideWithFormatInvalidFormat) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("postGetNotesSlideWithFormat", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("postGetNotesSlideWithFormat", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("postGetNotesSlideWithFormat", "format");
	auto paramWidth = utils->getOptionalIntTestValue("postGetNotesSlideWithFormat", "width");
	auto paramHeight = utils->getOptionalIntTestValue("postGetNotesSlideWithFormat", "height");
	utility::string_t paramPassword = utils->getTestValue("postGetNotesSlideWithFormat", "password");
	utility::string_t paramFontsFolder = utils->getTestValue("postGetNotesSlideWithFormat", "fontsFolder");
	paramFormat = utils->getInvalidTestValue("postGetNotesSlideWithFormat", "format", paramFormat);
	utils->initialize("postGetNotesSlideWithFormat", "format", paramFormat);

	bool failed = true;
	try
	{
		api->downloadNotesSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postGetNotesSlideWithFormat", "format");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postGetNotesSlideWithFormat", "format", paramFormat);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postGetNotesSlideWithFormat", "format");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postGetNotesSlideWithFormat", "format", paramFormat);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postGetNotesSlideWithFormat", "format"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postGetNotesSlideWithFormatInvalidWidth) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("postGetNotesSlideWithFormat", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("postGetNotesSlideWithFormat", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("postGetNotesSlideWithFormat", "format");
	auto paramWidth = utils->getOptionalIntTestValue("postGetNotesSlideWithFormat", "width");
	auto paramHeight = utils->getOptionalIntTestValue("postGetNotesSlideWithFormat", "height");
	utility::string_t paramPassword = utils->getTestValue("postGetNotesSlideWithFormat", "password");
	utility::string_t paramFontsFolder = utils->getTestValue("postGetNotesSlideWithFormat", "fontsFolder");
	paramWidth = utils->getInvalidIntTestValue("postGetNotesSlideWithFormat", "width", paramWidth).value();
	utils->initialize("postGetNotesSlideWithFormat", "width", paramWidth);

	bool failed = true;
	try
	{
		api->downloadNotesSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postGetNotesSlideWithFormat", "width");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postGetNotesSlideWithFormat", "width", paramWidth);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postGetNotesSlideWithFormat", "width");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postGetNotesSlideWithFormat", "width", paramWidth);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postGetNotesSlideWithFormat", "width"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postGetNotesSlideWithFormatInvalidHeight) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("postGetNotesSlideWithFormat", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("postGetNotesSlideWithFormat", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("postGetNotesSlideWithFormat", "format");
	auto paramWidth = utils->getOptionalIntTestValue("postGetNotesSlideWithFormat", "width");
	auto paramHeight = utils->getOptionalIntTestValue("postGetNotesSlideWithFormat", "height");
	utility::string_t paramPassword = utils->getTestValue("postGetNotesSlideWithFormat", "password");
	utility::string_t paramFontsFolder = utils->getTestValue("postGetNotesSlideWithFormat", "fontsFolder");
	paramHeight = utils->getInvalidIntTestValue("postGetNotesSlideWithFormat", "height", paramHeight).value();
	utils->initialize("postGetNotesSlideWithFormat", "height", paramHeight);

	bool failed = true;
	try
	{
		api->downloadNotesSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postGetNotesSlideWithFormat", "height");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postGetNotesSlideWithFormat", "height", paramHeight);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postGetNotesSlideWithFormat", "height");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postGetNotesSlideWithFormat", "height", paramHeight);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postGetNotesSlideWithFormat", "height"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postGetNotesSlideWithFormatInvalidPassword) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("postGetNotesSlideWithFormat", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("postGetNotesSlideWithFormat", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("postGetNotesSlideWithFormat", "format");
	auto paramWidth = utils->getOptionalIntTestValue("postGetNotesSlideWithFormat", "width");
	auto paramHeight = utils->getOptionalIntTestValue("postGetNotesSlideWithFormat", "height");
	utility::string_t paramPassword = utils->getTestValue("postGetNotesSlideWithFormat", "password");
	utility::string_t paramFontsFolder = utils->getTestValue("postGetNotesSlideWithFormat", "fontsFolder");
	paramPassword = utils->getInvalidTestValue("postGetNotesSlideWithFormat", "password", paramPassword);
	utils->initialize("postGetNotesSlideWithFormat", "password", paramPassword);

	bool failed = true;
	try
	{
		api->downloadNotesSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postGetNotesSlideWithFormat", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postGetNotesSlideWithFormat", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postGetNotesSlideWithFormat", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postGetNotesSlideWithFormat", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postGetNotesSlideWithFormat", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postGetNotesSlideWithFormatInvalidFontsFolder) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("postGetNotesSlideWithFormat", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("postGetNotesSlideWithFormat", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("postGetNotesSlideWithFormat", "format");
	auto paramWidth = utils->getOptionalIntTestValue("postGetNotesSlideWithFormat", "width");
	auto paramHeight = utils->getOptionalIntTestValue("postGetNotesSlideWithFormat", "height");
	utility::string_t paramPassword = utils->getTestValue("postGetNotesSlideWithFormat", "password");
	utility::string_t paramFontsFolder = utils->getTestValue("postGetNotesSlideWithFormat", "fontsFolder");
	paramFontsFolder = utils->getInvalidTestValue("postGetNotesSlideWithFormat", "fontsFolder", paramFontsFolder);
	utils->initialize("postGetNotesSlideWithFormat", "fontsFolder", paramFontsFolder);

	bool failed = true;
	try
	{
		api->downloadNotesSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postGetNotesSlideWithFormat", "fontsFolder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postGetNotesSlideWithFormat", "fontsFolder", paramFontsFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postGetNotesSlideWithFormat", "fontsFolder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postGetNotesSlideWithFormat", "fontsFolder", paramFontsFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postGetNotesSlideWithFormat", "fontsFolder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postImagesFromRequestWithDefaultFormat) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("postImagesFromRequestWithDefaultFormat", "document");
	utility::string_t paramPassword = utils->getTestValue("postImagesFromRequestWithDefaultFormat", "password");
	utils->initialize("postImagesFromRequestWithDefaultFormat", "");
	HttpContent result = api->downloadImagesDefaultFormatOnline(paramDocument, paramPassword).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, postImagesFromRequestWithDefaultFormatInvalidDocument) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("postImagesFromRequestWithDefaultFormat", "document");
	utility::string_t paramPassword = utils->getTestValue("postImagesFromRequestWithDefaultFormat", "password");
	paramDocument = utils->getInvalidBinaryTestValue("postImagesFromRequestWithDefaultFormat", "document", paramDocument);
	utils->initialize("postImagesFromRequestWithDefaultFormat", "document", paramDocument);

	bool failed = true;
	try
	{
		api->downloadImagesDefaultFormatOnline(paramDocument, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postImagesFromRequestWithDefaultFormat", "document");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postImagesFromRequestWithDefaultFormat", "document", paramDocument);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postImagesFromRequestWithDefaultFormat", "document");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postImagesFromRequestWithDefaultFormat", "document", paramDocument);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postImagesFromRequestWithDefaultFormat", "document"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postImagesFromRequestWithDefaultFormatInvalidPassword) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("postImagesFromRequestWithDefaultFormat", "document");
	utility::string_t paramPassword = utils->getTestValue("postImagesFromRequestWithDefaultFormat", "password");
	paramPassword = utils->getInvalidTestValue("postImagesFromRequestWithDefaultFormat", "password", paramPassword);
	utils->initialize("postImagesFromRequestWithDefaultFormat", "password", paramPassword);

	bool failed = true;
	try
	{
		api->downloadImagesDefaultFormatOnline(paramDocument, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postImagesFromRequestWithDefaultFormat", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postImagesFromRequestWithDefaultFormat", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postImagesFromRequestWithDefaultFormat", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postImagesFromRequestWithDefaultFormat", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postImagesFromRequestWithDefaultFormat", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postNotesSlideAddNewParagraph) {
	utility::string_t paramName = utils->getTestValue("postNotesSlideAddNewParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postNotesSlideAddNewParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("postNotesSlideAddNewParagraph", "shapeIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("postNotesSlideAddNewParagraph", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("postNotesSlideAddNewParagraph", "position");
	utility::string_t paramPassword = utils->getTestValue("postNotesSlideAddNewParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("postNotesSlideAddNewParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("postNotesSlideAddNewParagraph", "storage");
	utils->initialize("postNotesSlideAddNewParagraph", "");
	std::shared_ptr<Paragraph> result = api->createNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, postNotesSlideAddNewParagraphInvalidName) {
	utility::string_t paramName = utils->getTestValue("postNotesSlideAddNewParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postNotesSlideAddNewParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("postNotesSlideAddNewParagraph", "shapeIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("postNotesSlideAddNewParagraph", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("postNotesSlideAddNewParagraph", "position");
	utility::string_t paramPassword = utils->getTestValue("postNotesSlideAddNewParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("postNotesSlideAddNewParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("postNotesSlideAddNewParagraph", "storage");
	paramName = utils->getInvalidTestValue("postNotesSlideAddNewParagraph", "name", paramName);
	utils->initialize("postNotesSlideAddNewParagraph", "name", paramName);

	bool failed = true;
	try
	{
		api->createNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postNotesSlideAddNewParagraph", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postNotesSlideAddNewParagraph", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postNotesSlideAddNewParagraph", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postNotesSlideAddNewParagraph", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postNotesSlideAddNewParagraph", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postNotesSlideAddNewParagraphInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("postNotesSlideAddNewParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postNotesSlideAddNewParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("postNotesSlideAddNewParagraph", "shapeIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("postNotesSlideAddNewParagraph", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("postNotesSlideAddNewParagraph", "position");
	utility::string_t paramPassword = utils->getTestValue("postNotesSlideAddNewParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("postNotesSlideAddNewParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("postNotesSlideAddNewParagraph", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("postNotesSlideAddNewParagraph", "slideIndex", paramSlideIndex).value();
	utils->initialize("postNotesSlideAddNewParagraph", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->createNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postNotesSlideAddNewParagraph", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postNotesSlideAddNewParagraph", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postNotesSlideAddNewParagraph", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postNotesSlideAddNewParagraph", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postNotesSlideAddNewParagraph", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postNotesSlideAddNewParagraphInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("postNotesSlideAddNewParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postNotesSlideAddNewParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("postNotesSlideAddNewParagraph", "shapeIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("postNotesSlideAddNewParagraph", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("postNotesSlideAddNewParagraph", "position");
	utility::string_t paramPassword = utils->getTestValue("postNotesSlideAddNewParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("postNotesSlideAddNewParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("postNotesSlideAddNewParagraph", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("postNotesSlideAddNewParagraph", "shapeIndex", paramShapeIndex).value();
	utils->initialize("postNotesSlideAddNewParagraph", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->createNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postNotesSlideAddNewParagraph", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postNotesSlideAddNewParagraph", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postNotesSlideAddNewParagraph", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postNotesSlideAddNewParagraph", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postNotesSlideAddNewParagraph", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postNotesSlideAddNewParagraphInvalidDto) {
	utility::string_t paramName = utils->getTestValue("postNotesSlideAddNewParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postNotesSlideAddNewParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("postNotesSlideAddNewParagraph", "shapeIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("postNotesSlideAddNewParagraph", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("postNotesSlideAddNewParagraph", "position");
	utility::string_t paramPassword = utils->getTestValue("postNotesSlideAddNewParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("postNotesSlideAddNewParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("postNotesSlideAddNewParagraph", "storage");
	paramDto = utils->getInvalidTestValueForClass<>("postNotesSlideAddNewParagraph", "dto", paramDto);
	utils->initialize("postNotesSlideAddNewParagraph", "dto", paramDto);

	bool failed = true;
	try
	{
		api->createNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postNotesSlideAddNewParagraph", "dto");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postNotesSlideAddNewParagraph", "dto", paramDto);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postNotesSlideAddNewParagraph", "dto");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postNotesSlideAddNewParagraph", "dto", paramDto);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postNotesSlideAddNewParagraph", "dto"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postNotesSlideAddNewParagraphInvalidPosition) {
	utility::string_t paramName = utils->getTestValue("postNotesSlideAddNewParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postNotesSlideAddNewParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("postNotesSlideAddNewParagraph", "shapeIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("postNotesSlideAddNewParagraph", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("postNotesSlideAddNewParagraph", "position");
	utility::string_t paramPassword = utils->getTestValue("postNotesSlideAddNewParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("postNotesSlideAddNewParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("postNotesSlideAddNewParagraph", "storage");
	paramPosition = utils->getInvalidIntTestValue("postNotesSlideAddNewParagraph", "position", paramPosition).value();
	utils->initialize("postNotesSlideAddNewParagraph", "position", paramPosition);

	bool failed = true;
	try
	{
		api->createNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postNotesSlideAddNewParagraph", "position");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postNotesSlideAddNewParagraph", "position", paramPosition);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postNotesSlideAddNewParagraph", "position");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postNotesSlideAddNewParagraph", "position", paramPosition);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postNotesSlideAddNewParagraph", "position"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postNotesSlideAddNewParagraphInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("postNotesSlideAddNewParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postNotesSlideAddNewParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("postNotesSlideAddNewParagraph", "shapeIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("postNotesSlideAddNewParagraph", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("postNotesSlideAddNewParagraph", "position");
	utility::string_t paramPassword = utils->getTestValue("postNotesSlideAddNewParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("postNotesSlideAddNewParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("postNotesSlideAddNewParagraph", "storage");
	paramPassword = utils->getInvalidTestValue("postNotesSlideAddNewParagraph", "password", paramPassword);
	utils->initialize("postNotesSlideAddNewParagraph", "password", paramPassword);

	bool failed = true;
	try
	{
		api->createNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postNotesSlideAddNewParagraph", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postNotesSlideAddNewParagraph", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postNotesSlideAddNewParagraph", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postNotesSlideAddNewParagraph", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postNotesSlideAddNewParagraph", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postNotesSlideAddNewParagraphInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("postNotesSlideAddNewParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postNotesSlideAddNewParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("postNotesSlideAddNewParagraph", "shapeIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("postNotesSlideAddNewParagraph", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("postNotesSlideAddNewParagraph", "position");
	utility::string_t paramPassword = utils->getTestValue("postNotesSlideAddNewParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("postNotesSlideAddNewParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("postNotesSlideAddNewParagraph", "storage");
	paramFolder = utils->getInvalidTestValue("postNotesSlideAddNewParagraph", "folder", paramFolder);
	utils->initialize("postNotesSlideAddNewParagraph", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->createNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postNotesSlideAddNewParagraph", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postNotesSlideAddNewParagraph", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postNotesSlideAddNewParagraph", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postNotesSlideAddNewParagraph", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postNotesSlideAddNewParagraph", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postNotesSlideAddNewParagraphInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("postNotesSlideAddNewParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postNotesSlideAddNewParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("postNotesSlideAddNewParagraph", "shapeIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("postNotesSlideAddNewParagraph", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("postNotesSlideAddNewParagraph", "position");
	utility::string_t paramPassword = utils->getTestValue("postNotesSlideAddNewParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("postNotesSlideAddNewParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("postNotesSlideAddNewParagraph", "storage");
	paramStorage = utils->getInvalidTestValue("postNotesSlideAddNewParagraph", "storage", paramStorage);
	utils->initialize("postNotesSlideAddNewParagraph", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->createNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postNotesSlideAddNewParagraph", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postNotesSlideAddNewParagraph", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postNotesSlideAddNewParagraph", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postNotesSlideAddNewParagraph", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postNotesSlideAddNewParagraph", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postNotesSlideAddNewPortion) {
	utility::string_t paramName = utils->getTestValue("postNotesSlideAddNewPortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postNotesSlideAddNewPortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("postNotesSlideAddNewPortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("postNotesSlideAddNewPortion", "paragraphIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("postNotesSlideAddNewPortion", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("postNotesSlideAddNewPortion", "position");
	utility::string_t paramPassword = utils->getTestValue("postNotesSlideAddNewPortion", "password");
	utility::string_t paramFolder = utils->getTestValue("postNotesSlideAddNewPortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("postNotesSlideAddNewPortion", "storage");
	utils->initialize("postNotesSlideAddNewPortion", "");
	std::shared_ptr<Portion> result = api->createNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, postNotesSlideAddNewPortionInvalidName) {
	utility::string_t paramName = utils->getTestValue("postNotesSlideAddNewPortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postNotesSlideAddNewPortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("postNotesSlideAddNewPortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("postNotesSlideAddNewPortion", "paragraphIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("postNotesSlideAddNewPortion", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("postNotesSlideAddNewPortion", "position");
	utility::string_t paramPassword = utils->getTestValue("postNotesSlideAddNewPortion", "password");
	utility::string_t paramFolder = utils->getTestValue("postNotesSlideAddNewPortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("postNotesSlideAddNewPortion", "storage");
	paramName = utils->getInvalidTestValue("postNotesSlideAddNewPortion", "name", paramName);
	utils->initialize("postNotesSlideAddNewPortion", "name", paramName);

	bool failed = true;
	try
	{
		api->createNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postNotesSlideAddNewPortion", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postNotesSlideAddNewPortion", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postNotesSlideAddNewPortion", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postNotesSlideAddNewPortion", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postNotesSlideAddNewPortion", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postNotesSlideAddNewPortionInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("postNotesSlideAddNewPortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postNotesSlideAddNewPortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("postNotesSlideAddNewPortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("postNotesSlideAddNewPortion", "paragraphIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("postNotesSlideAddNewPortion", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("postNotesSlideAddNewPortion", "position");
	utility::string_t paramPassword = utils->getTestValue("postNotesSlideAddNewPortion", "password");
	utility::string_t paramFolder = utils->getTestValue("postNotesSlideAddNewPortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("postNotesSlideAddNewPortion", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("postNotesSlideAddNewPortion", "slideIndex", paramSlideIndex).value();
	utils->initialize("postNotesSlideAddNewPortion", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->createNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postNotesSlideAddNewPortion", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postNotesSlideAddNewPortion", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postNotesSlideAddNewPortion", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postNotesSlideAddNewPortion", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postNotesSlideAddNewPortion", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postNotesSlideAddNewPortionInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("postNotesSlideAddNewPortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postNotesSlideAddNewPortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("postNotesSlideAddNewPortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("postNotesSlideAddNewPortion", "paragraphIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("postNotesSlideAddNewPortion", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("postNotesSlideAddNewPortion", "position");
	utility::string_t paramPassword = utils->getTestValue("postNotesSlideAddNewPortion", "password");
	utility::string_t paramFolder = utils->getTestValue("postNotesSlideAddNewPortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("postNotesSlideAddNewPortion", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("postNotesSlideAddNewPortion", "shapeIndex", paramShapeIndex).value();
	utils->initialize("postNotesSlideAddNewPortion", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->createNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postNotesSlideAddNewPortion", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postNotesSlideAddNewPortion", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postNotesSlideAddNewPortion", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postNotesSlideAddNewPortion", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postNotesSlideAddNewPortion", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postNotesSlideAddNewPortionInvalidParagraphIndex) {
	utility::string_t paramName = utils->getTestValue("postNotesSlideAddNewPortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postNotesSlideAddNewPortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("postNotesSlideAddNewPortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("postNotesSlideAddNewPortion", "paragraphIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("postNotesSlideAddNewPortion", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("postNotesSlideAddNewPortion", "position");
	utility::string_t paramPassword = utils->getTestValue("postNotesSlideAddNewPortion", "password");
	utility::string_t paramFolder = utils->getTestValue("postNotesSlideAddNewPortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("postNotesSlideAddNewPortion", "storage");
	paramParagraphIndex = utils->getInvalidIntTestValue("postNotesSlideAddNewPortion", "paragraphIndex", paramParagraphIndex).value();
	utils->initialize("postNotesSlideAddNewPortion", "paragraphIndex", paramParagraphIndex);

	bool failed = true;
	try
	{
		api->createNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postNotesSlideAddNewPortion", "paragraphIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postNotesSlideAddNewPortion", "paragraphIndex", paramParagraphIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postNotesSlideAddNewPortion", "paragraphIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postNotesSlideAddNewPortion", "paragraphIndex", paramParagraphIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postNotesSlideAddNewPortion", "paragraphIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postNotesSlideAddNewPortionInvalidDto) {
	utility::string_t paramName = utils->getTestValue("postNotesSlideAddNewPortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postNotesSlideAddNewPortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("postNotesSlideAddNewPortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("postNotesSlideAddNewPortion", "paragraphIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("postNotesSlideAddNewPortion", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("postNotesSlideAddNewPortion", "position");
	utility::string_t paramPassword = utils->getTestValue("postNotesSlideAddNewPortion", "password");
	utility::string_t paramFolder = utils->getTestValue("postNotesSlideAddNewPortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("postNotesSlideAddNewPortion", "storage");
	paramDto = utils->getInvalidTestValueForClass<>("postNotesSlideAddNewPortion", "dto", paramDto);
	utils->initialize("postNotesSlideAddNewPortion", "dto", paramDto);

	bool failed = true;
	try
	{
		api->createNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postNotesSlideAddNewPortion", "dto");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postNotesSlideAddNewPortion", "dto", paramDto);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postNotesSlideAddNewPortion", "dto");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postNotesSlideAddNewPortion", "dto", paramDto);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postNotesSlideAddNewPortion", "dto"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postNotesSlideAddNewPortionInvalidPosition) {
	utility::string_t paramName = utils->getTestValue("postNotesSlideAddNewPortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postNotesSlideAddNewPortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("postNotesSlideAddNewPortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("postNotesSlideAddNewPortion", "paragraphIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("postNotesSlideAddNewPortion", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("postNotesSlideAddNewPortion", "position");
	utility::string_t paramPassword = utils->getTestValue("postNotesSlideAddNewPortion", "password");
	utility::string_t paramFolder = utils->getTestValue("postNotesSlideAddNewPortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("postNotesSlideAddNewPortion", "storage");
	paramPosition = utils->getInvalidIntTestValue("postNotesSlideAddNewPortion", "position", paramPosition).value();
	utils->initialize("postNotesSlideAddNewPortion", "position", paramPosition);

	bool failed = true;
	try
	{
		api->createNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postNotesSlideAddNewPortion", "position");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postNotesSlideAddNewPortion", "position", paramPosition);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postNotesSlideAddNewPortion", "position");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postNotesSlideAddNewPortion", "position", paramPosition);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postNotesSlideAddNewPortion", "position"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postNotesSlideAddNewPortionInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("postNotesSlideAddNewPortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postNotesSlideAddNewPortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("postNotesSlideAddNewPortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("postNotesSlideAddNewPortion", "paragraphIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("postNotesSlideAddNewPortion", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("postNotesSlideAddNewPortion", "position");
	utility::string_t paramPassword = utils->getTestValue("postNotesSlideAddNewPortion", "password");
	utility::string_t paramFolder = utils->getTestValue("postNotesSlideAddNewPortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("postNotesSlideAddNewPortion", "storage");
	paramPassword = utils->getInvalidTestValue("postNotesSlideAddNewPortion", "password", paramPassword);
	utils->initialize("postNotesSlideAddNewPortion", "password", paramPassword);

	bool failed = true;
	try
	{
		api->createNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postNotesSlideAddNewPortion", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postNotesSlideAddNewPortion", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postNotesSlideAddNewPortion", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postNotesSlideAddNewPortion", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postNotesSlideAddNewPortion", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postNotesSlideAddNewPortionInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("postNotesSlideAddNewPortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postNotesSlideAddNewPortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("postNotesSlideAddNewPortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("postNotesSlideAddNewPortion", "paragraphIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("postNotesSlideAddNewPortion", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("postNotesSlideAddNewPortion", "position");
	utility::string_t paramPassword = utils->getTestValue("postNotesSlideAddNewPortion", "password");
	utility::string_t paramFolder = utils->getTestValue("postNotesSlideAddNewPortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("postNotesSlideAddNewPortion", "storage");
	paramFolder = utils->getInvalidTestValue("postNotesSlideAddNewPortion", "folder", paramFolder);
	utils->initialize("postNotesSlideAddNewPortion", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->createNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postNotesSlideAddNewPortion", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postNotesSlideAddNewPortion", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postNotesSlideAddNewPortion", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postNotesSlideAddNewPortion", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postNotesSlideAddNewPortion", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postNotesSlideAddNewPortionInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("postNotesSlideAddNewPortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postNotesSlideAddNewPortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("postNotesSlideAddNewPortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("postNotesSlideAddNewPortion", "paragraphIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("postNotesSlideAddNewPortion", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("postNotesSlideAddNewPortion", "position");
	utility::string_t paramPassword = utils->getTestValue("postNotesSlideAddNewPortion", "password");
	utility::string_t paramFolder = utils->getTestValue("postNotesSlideAddNewPortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("postNotesSlideAddNewPortion", "storage");
	paramStorage = utils->getInvalidTestValue("postNotesSlideAddNewPortion", "storage", paramStorage);
	utils->initialize("postNotesSlideAddNewPortion", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->createNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postNotesSlideAddNewPortion", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postNotesSlideAddNewPortion", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postNotesSlideAddNewPortion", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postNotesSlideAddNewPortion", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postNotesSlideAddNewPortion", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postNotesSlideAddNewShape) {
	utility::string_t paramName = utils->getTestValue("postNotesSlideAddNewShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postNotesSlideAddNewShape", "slideIndex");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("postNotesSlideAddNewShape", "dto");
	auto paramShapeToClone = utils->getOptionalIntTestValue("postNotesSlideAddNewShape", "shapeToClone");
	auto paramPosition = utils->getOptionalIntTestValue("postNotesSlideAddNewShape", "position");
	utility::string_t paramPassword = utils->getTestValue("postNotesSlideAddNewShape", "password");
	utility::string_t paramFolder = utils->getTestValue("postNotesSlideAddNewShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("postNotesSlideAddNewShape", "storage");
	utils->initialize("postNotesSlideAddNewShape", "");
	std::shared_ptr<ShapeBase> result = api->createNotesSlideShape(paramName, paramSlideIndex, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, postNotesSlideAddNewShapeInvalidName) {
	utility::string_t paramName = utils->getTestValue("postNotesSlideAddNewShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postNotesSlideAddNewShape", "slideIndex");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("postNotesSlideAddNewShape", "dto");
	auto paramShapeToClone = utils->getOptionalIntTestValue("postNotesSlideAddNewShape", "shapeToClone");
	auto paramPosition = utils->getOptionalIntTestValue("postNotesSlideAddNewShape", "position");
	utility::string_t paramPassword = utils->getTestValue("postNotesSlideAddNewShape", "password");
	utility::string_t paramFolder = utils->getTestValue("postNotesSlideAddNewShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("postNotesSlideAddNewShape", "storage");
	paramName = utils->getInvalidTestValue("postNotesSlideAddNewShape", "name", paramName);
	utils->initialize("postNotesSlideAddNewShape", "name", paramName);

	bool failed = true;
	try
	{
		api->createNotesSlideShape(paramName, paramSlideIndex, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postNotesSlideAddNewShape", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postNotesSlideAddNewShape", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postNotesSlideAddNewShape", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postNotesSlideAddNewShape", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postNotesSlideAddNewShape", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postNotesSlideAddNewShapeInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("postNotesSlideAddNewShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postNotesSlideAddNewShape", "slideIndex");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("postNotesSlideAddNewShape", "dto");
	auto paramShapeToClone = utils->getOptionalIntTestValue("postNotesSlideAddNewShape", "shapeToClone");
	auto paramPosition = utils->getOptionalIntTestValue("postNotesSlideAddNewShape", "position");
	utility::string_t paramPassword = utils->getTestValue("postNotesSlideAddNewShape", "password");
	utility::string_t paramFolder = utils->getTestValue("postNotesSlideAddNewShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("postNotesSlideAddNewShape", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("postNotesSlideAddNewShape", "slideIndex", paramSlideIndex).value();
	utils->initialize("postNotesSlideAddNewShape", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->createNotesSlideShape(paramName, paramSlideIndex, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postNotesSlideAddNewShape", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postNotesSlideAddNewShape", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postNotesSlideAddNewShape", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postNotesSlideAddNewShape", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postNotesSlideAddNewShape", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postNotesSlideAddNewShapeInvalidDto) {
	utility::string_t paramName = utils->getTestValue("postNotesSlideAddNewShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postNotesSlideAddNewShape", "slideIndex");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("postNotesSlideAddNewShape", "dto");
	auto paramShapeToClone = utils->getOptionalIntTestValue("postNotesSlideAddNewShape", "shapeToClone");
	auto paramPosition = utils->getOptionalIntTestValue("postNotesSlideAddNewShape", "position");
	utility::string_t paramPassword = utils->getTestValue("postNotesSlideAddNewShape", "password");
	utility::string_t paramFolder = utils->getTestValue("postNotesSlideAddNewShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("postNotesSlideAddNewShape", "storage");
	paramDto = utils->getInvalidTestValueForClass<>("postNotesSlideAddNewShape", "dto", paramDto);
	utils->initialize("postNotesSlideAddNewShape", "dto", paramDto);

	bool failed = true;
	try
	{
		api->createNotesSlideShape(paramName, paramSlideIndex, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postNotesSlideAddNewShape", "dto");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postNotesSlideAddNewShape", "dto", paramDto);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postNotesSlideAddNewShape", "dto");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postNotesSlideAddNewShape", "dto", paramDto);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postNotesSlideAddNewShape", "dto"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postNotesSlideAddNewShapeInvalidShapeToClone) {
	utility::string_t paramName = utils->getTestValue("postNotesSlideAddNewShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postNotesSlideAddNewShape", "slideIndex");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("postNotesSlideAddNewShape", "dto");
	auto paramShapeToClone = utils->getOptionalIntTestValue("postNotesSlideAddNewShape", "shapeToClone");
	auto paramPosition = utils->getOptionalIntTestValue("postNotesSlideAddNewShape", "position");
	utility::string_t paramPassword = utils->getTestValue("postNotesSlideAddNewShape", "password");
	utility::string_t paramFolder = utils->getTestValue("postNotesSlideAddNewShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("postNotesSlideAddNewShape", "storage");
	paramShapeToClone = utils->getInvalidIntTestValue("postNotesSlideAddNewShape", "shapeToClone", paramShapeToClone).value();
	utils->initialize("postNotesSlideAddNewShape", "shapeToClone", paramShapeToClone);

	bool failed = true;
	try
	{
		api->createNotesSlideShape(paramName, paramSlideIndex, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postNotesSlideAddNewShape", "shapeToClone");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postNotesSlideAddNewShape", "shapeToClone", paramShapeToClone);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postNotesSlideAddNewShape", "shapeToClone");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postNotesSlideAddNewShape", "shapeToClone", paramShapeToClone);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postNotesSlideAddNewShape", "shapeToClone"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postNotesSlideAddNewShapeInvalidPosition) {
	utility::string_t paramName = utils->getTestValue("postNotesSlideAddNewShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postNotesSlideAddNewShape", "slideIndex");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("postNotesSlideAddNewShape", "dto");
	auto paramShapeToClone = utils->getOptionalIntTestValue("postNotesSlideAddNewShape", "shapeToClone");
	auto paramPosition = utils->getOptionalIntTestValue("postNotesSlideAddNewShape", "position");
	utility::string_t paramPassword = utils->getTestValue("postNotesSlideAddNewShape", "password");
	utility::string_t paramFolder = utils->getTestValue("postNotesSlideAddNewShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("postNotesSlideAddNewShape", "storage");
	paramPosition = utils->getInvalidIntTestValue("postNotesSlideAddNewShape", "position", paramPosition).value();
	utils->initialize("postNotesSlideAddNewShape", "position", paramPosition);

	bool failed = true;
	try
	{
		api->createNotesSlideShape(paramName, paramSlideIndex, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postNotesSlideAddNewShape", "position");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postNotesSlideAddNewShape", "position", paramPosition);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postNotesSlideAddNewShape", "position");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postNotesSlideAddNewShape", "position", paramPosition);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postNotesSlideAddNewShape", "position"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postNotesSlideAddNewShapeInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("postNotesSlideAddNewShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postNotesSlideAddNewShape", "slideIndex");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("postNotesSlideAddNewShape", "dto");
	auto paramShapeToClone = utils->getOptionalIntTestValue("postNotesSlideAddNewShape", "shapeToClone");
	auto paramPosition = utils->getOptionalIntTestValue("postNotesSlideAddNewShape", "position");
	utility::string_t paramPassword = utils->getTestValue("postNotesSlideAddNewShape", "password");
	utility::string_t paramFolder = utils->getTestValue("postNotesSlideAddNewShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("postNotesSlideAddNewShape", "storage");
	paramPassword = utils->getInvalidTestValue("postNotesSlideAddNewShape", "password", paramPassword);
	utils->initialize("postNotesSlideAddNewShape", "password", paramPassword);

	bool failed = true;
	try
	{
		api->createNotesSlideShape(paramName, paramSlideIndex, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postNotesSlideAddNewShape", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postNotesSlideAddNewShape", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postNotesSlideAddNewShape", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postNotesSlideAddNewShape", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postNotesSlideAddNewShape", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postNotesSlideAddNewShapeInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("postNotesSlideAddNewShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postNotesSlideAddNewShape", "slideIndex");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("postNotesSlideAddNewShape", "dto");
	auto paramShapeToClone = utils->getOptionalIntTestValue("postNotesSlideAddNewShape", "shapeToClone");
	auto paramPosition = utils->getOptionalIntTestValue("postNotesSlideAddNewShape", "position");
	utility::string_t paramPassword = utils->getTestValue("postNotesSlideAddNewShape", "password");
	utility::string_t paramFolder = utils->getTestValue("postNotesSlideAddNewShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("postNotesSlideAddNewShape", "storage");
	paramFolder = utils->getInvalidTestValue("postNotesSlideAddNewShape", "folder", paramFolder);
	utils->initialize("postNotesSlideAddNewShape", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->createNotesSlideShape(paramName, paramSlideIndex, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postNotesSlideAddNewShape", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postNotesSlideAddNewShape", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postNotesSlideAddNewShape", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postNotesSlideAddNewShape", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postNotesSlideAddNewShape", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postNotesSlideAddNewShapeInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("postNotesSlideAddNewShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postNotesSlideAddNewShape", "slideIndex");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("postNotesSlideAddNewShape", "dto");
	auto paramShapeToClone = utils->getOptionalIntTestValue("postNotesSlideAddNewShape", "shapeToClone");
	auto paramPosition = utils->getOptionalIntTestValue("postNotesSlideAddNewShape", "position");
	utility::string_t paramPassword = utils->getTestValue("postNotesSlideAddNewShape", "password");
	utility::string_t paramFolder = utils->getTestValue("postNotesSlideAddNewShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("postNotesSlideAddNewShape", "storage");
	paramStorage = utils->getInvalidTestValue("postNotesSlideAddNewShape", "storage", paramStorage);
	utils->initialize("postNotesSlideAddNewShape", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->createNotesSlideShape(paramName, paramSlideIndex, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postNotesSlideAddNewShape", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postNotesSlideAddNewShape", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postNotesSlideAddNewShape", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postNotesSlideAddNewShape", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postNotesSlideAddNewShape", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postNotesSlideShapeSaveAs) {
	utility::string_t paramName = utils->getTestValue("postNotesSlideShapeSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postNotesSlideShapeSaveAs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("postNotesSlideShapeSaveAs", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("postNotesSlideShapeSaveAs", "format");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("postNotesSlideShapeSaveAs", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("postNotesSlideShapeSaveAs", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("postNotesSlideShapeSaveAs", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("postNotesSlideShapeSaveAs", "bounds");
	utility::string_t paramPassword = utils->getTestValue("postNotesSlideShapeSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("postNotesSlideShapeSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("postNotesSlideShapeSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("postNotesSlideShapeSaveAs", "fontsFolder");
	utils->initialize("postNotesSlideShapeSaveAs", "");
	HttpContent result = api->downloadNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, postNotesSlideShapeSaveAsInvalidName) {
	utility::string_t paramName = utils->getTestValue("postNotesSlideShapeSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postNotesSlideShapeSaveAs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("postNotesSlideShapeSaveAs", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("postNotesSlideShapeSaveAs", "format");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("postNotesSlideShapeSaveAs", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("postNotesSlideShapeSaveAs", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("postNotesSlideShapeSaveAs", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("postNotesSlideShapeSaveAs", "bounds");
	utility::string_t paramPassword = utils->getTestValue("postNotesSlideShapeSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("postNotesSlideShapeSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("postNotesSlideShapeSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("postNotesSlideShapeSaveAs", "fontsFolder");
	paramName = utils->getInvalidTestValue("postNotesSlideShapeSaveAs", "name", paramName);
	utils->initialize("postNotesSlideShapeSaveAs", "name", paramName);

	bool failed = true;
	try
	{
		api->downloadNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postNotesSlideShapeSaveAs", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postNotesSlideShapeSaveAs", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postNotesSlideShapeSaveAs", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postNotesSlideShapeSaveAs", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postNotesSlideShapeSaveAs", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postNotesSlideShapeSaveAsInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("postNotesSlideShapeSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postNotesSlideShapeSaveAs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("postNotesSlideShapeSaveAs", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("postNotesSlideShapeSaveAs", "format");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("postNotesSlideShapeSaveAs", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("postNotesSlideShapeSaveAs", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("postNotesSlideShapeSaveAs", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("postNotesSlideShapeSaveAs", "bounds");
	utility::string_t paramPassword = utils->getTestValue("postNotesSlideShapeSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("postNotesSlideShapeSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("postNotesSlideShapeSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("postNotesSlideShapeSaveAs", "fontsFolder");
	paramSlideIndex = utils->getInvalidIntTestValue("postNotesSlideShapeSaveAs", "slideIndex", paramSlideIndex).value();
	utils->initialize("postNotesSlideShapeSaveAs", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->downloadNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postNotesSlideShapeSaveAs", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postNotesSlideShapeSaveAs", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postNotesSlideShapeSaveAs", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postNotesSlideShapeSaveAs", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postNotesSlideShapeSaveAs", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postNotesSlideShapeSaveAsInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("postNotesSlideShapeSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postNotesSlideShapeSaveAs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("postNotesSlideShapeSaveAs", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("postNotesSlideShapeSaveAs", "format");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("postNotesSlideShapeSaveAs", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("postNotesSlideShapeSaveAs", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("postNotesSlideShapeSaveAs", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("postNotesSlideShapeSaveAs", "bounds");
	utility::string_t paramPassword = utils->getTestValue("postNotesSlideShapeSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("postNotesSlideShapeSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("postNotesSlideShapeSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("postNotesSlideShapeSaveAs", "fontsFolder");
	paramShapeIndex = utils->getInvalidIntTestValue("postNotesSlideShapeSaveAs", "shapeIndex", paramShapeIndex).value();
	utils->initialize("postNotesSlideShapeSaveAs", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->downloadNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postNotesSlideShapeSaveAs", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postNotesSlideShapeSaveAs", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postNotesSlideShapeSaveAs", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postNotesSlideShapeSaveAs", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postNotesSlideShapeSaveAs", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postNotesSlideShapeSaveAsInvalidFormat) {
	utility::string_t paramName = utils->getTestValue("postNotesSlideShapeSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postNotesSlideShapeSaveAs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("postNotesSlideShapeSaveAs", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("postNotesSlideShapeSaveAs", "format");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("postNotesSlideShapeSaveAs", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("postNotesSlideShapeSaveAs", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("postNotesSlideShapeSaveAs", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("postNotesSlideShapeSaveAs", "bounds");
	utility::string_t paramPassword = utils->getTestValue("postNotesSlideShapeSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("postNotesSlideShapeSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("postNotesSlideShapeSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("postNotesSlideShapeSaveAs", "fontsFolder");
	paramFormat = utils->getInvalidTestValue("postNotesSlideShapeSaveAs", "format", paramFormat);
	utils->initialize("postNotesSlideShapeSaveAs", "format", paramFormat);

	bool failed = true;
	try
	{
		api->downloadNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postNotesSlideShapeSaveAs", "format");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postNotesSlideShapeSaveAs", "format", paramFormat);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postNotesSlideShapeSaveAs", "format");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postNotesSlideShapeSaveAs", "format", paramFormat);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postNotesSlideShapeSaveAs", "format"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postNotesSlideShapeSaveAsInvalidOptions) {
	utility::string_t paramName = utils->getTestValue("postNotesSlideShapeSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postNotesSlideShapeSaveAs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("postNotesSlideShapeSaveAs", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("postNotesSlideShapeSaveAs", "format");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("postNotesSlideShapeSaveAs", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("postNotesSlideShapeSaveAs", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("postNotesSlideShapeSaveAs", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("postNotesSlideShapeSaveAs", "bounds");
	utility::string_t paramPassword = utils->getTestValue("postNotesSlideShapeSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("postNotesSlideShapeSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("postNotesSlideShapeSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("postNotesSlideShapeSaveAs", "fontsFolder");
	paramOptions = utils->getInvalidTestValueForClass<>("postNotesSlideShapeSaveAs", "options", paramOptions);
	utils->initialize("postNotesSlideShapeSaveAs", "options", paramOptions);

	bool failed = true;
	try
	{
		api->downloadNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postNotesSlideShapeSaveAs", "options");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postNotesSlideShapeSaveAs", "options", paramOptions);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postNotesSlideShapeSaveAs", "options");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postNotesSlideShapeSaveAs", "options", paramOptions);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postNotesSlideShapeSaveAs", "options"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postNotesSlideShapeSaveAsInvalidScaleX) {
	utility::string_t paramName = utils->getTestValue("postNotesSlideShapeSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postNotesSlideShapeSaveAs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("postNotesSlideShapeSaveAs", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("postNotesSlideShapeSaveAs", "format");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("postNotesSlideShapeSaveAs", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("postNotesSlideShapeSaveAs", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("postNotesSlideShapeSaveAs", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("postNotesSlideShapeSaveAs", "bounds");
	utility::string_t paramPassword = utils->getTestValue("postNotesSlideShapeSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("postNotesSlideShapeSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("postNotesSlideShapeSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("postNotesSlideShapeSaveAs", "fontsFolder");
	paramScaleX = utils->getInvalidDoubleTestValue("postNotesSlideShapeSaveAs", "scaleX", paramScaleX).value();
	utils->initialize("postNotesSlideShapeSaveAs", "scaleX", paramScaleX);

	bool failed = true;
	try
	{
		api->downloadNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postNotesSlideShapeSaveAs", "scaleX");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postNotesSlideShapeSaveAs", "scaleX", paramScaleX);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postNotesSlideShapeSaveAs", "scaleX");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postNotesSlideShapeSaveAs", "scaleX", paramScaleX);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postNotesSlideShapeSaveAs", "scaleX"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postNotesSlideShapeSaveAsInvalidScaleY) {
	utility::string_t paramName = utils->getTestValue("postNotesSlideShapeSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postNotesSlideShapeSaveAs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("postNotesSlideShapeSaveAs", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("postNotesSlideShapeSaveAs", "format");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("postNotesSlideShapeSaveAs", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("postNotesSlideShapeSaveAs", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("postNotesSlideShapeSaveAs", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("postNotesSlideShapeSaveAs", "bounds");
	utility::string_t paramPassword = utils->getTestValue("postNotesSlideShapeSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("postNotesSlideShapeSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("postNotesSlideShapeSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("postNotesSlideShapeSaveAs", "fontsFolder");
	paramScaleY = utils->getInvalidDoubleTestValue("postNotesSlideShapeSaveAs", "scaleY", paramScaleY).value();
	utils->initialize("postNotesSlideShapeSaveAs", "scaleY", paramScaleY);

	bool failed = true;
	try
	{
		api->downloadNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postNotesSlideShapeSaveAs", "scaleY");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postNotesSlideShapeSaveAs", "scaleY", paramScaleY);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postNotesSlideShapeSaveAs", "scaleY");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postNotesSlideShapeSaveAs", "scaleY", paramScaleY);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postNotesSlideShapeSaveAs", "scaleY"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postNotesSlideShapeSaveAsInvalidBounds) {
	utility::string_t paramName = utils->getTestValue("postNotesSlideShapeSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postNotesSlideShapeSaveAs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("postNotesSlideShapeSaveAs", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("postNotesSlideShapeSaveAs", "format");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("postNotesSlideShapeSaveAs", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("postNotesSlideShapeSaveAs", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("postNotesSlideShapeSaveAs", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("postNotesSlideShapeSaveAs", "bounds");
	utility::string_t paramPassword = utils->getTestValue("postNotesSlideShapeSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("postNotesSlideShapeSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("postNotesSlideShapeSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("postNotesSlideShapeSaveAs", "fontsFolder");
	paramBounds = utils->getInvalidTestValue("postNotesSlideShapeSaveAs", "bounds", paramBounds);
	utils->initialize("postNotesSlideShapeSaveAs", "bounds", paramBounds);

	bool failed = true;
	try
	{
		api->downloadNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postNotesSlideShapeSaveAs", "bounds");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postNotesSlideShapeSaveAs", "bounds", paramBounds);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postNotesSlideShapeSaveAs", "bounds");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postNotesSlideShapeSaveAs", "bounds", paramBounds);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postNotesSlideShapeSaveAs", "bounds"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postNotesSlideShapeSaveAsInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("postNotesSlideShapeSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postNotesSlideShapeSaveAs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("postNotesSlideShapeSaveAs", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("postNotesSlideShapeSaveAs", "format");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("postNotesSlideShapeSaveAs", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("postNotesSlideShapeSaveAs", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("postNotesSlideShapeSaveAs", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("postNotesSlideShapeSaveAs", "bounds");
	utility::string_t paramPassword = utils->getTestValue("postNotesSlideShapeSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("postNotesSlideShapeSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("postNotesSlideShapeSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("postNotesSlideShapeSaveAs", "fontsFolder");
	paramPassword = utils->getInvalidTestValue("postNotesSlideShapeSaveAs", "password", paramPassword);
	utils->initialize("postNotesSlideShapeSaveAs", "password", paramPassword);

	bool failed = true;
	try
	{
		api->downloadNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postNotesSlideShapeSaveAs", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postNotesSlideShapeSaveAs", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postNotesSlideShapeSaveAs", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postNotesSlideShapeSaveAs", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postNotesSlideShapeSaveAs", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postNotesSlideShapeSaveAsInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("postNotesSlideShapeSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postNotesSlideShapeSaveAs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("postNotesSlideShapeSaveAs", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("postNotesSlideShapeSaveAs", "format");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("postNotesSlideShapeSaveAs", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("postNotesSlideShapeSaveAs", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("postNotesSlideShapeSaveAs", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("postNotesSlideShapeSaveAs", "bounds");
	utility::string_t paramPassword = utils->getTestValue("postNotesSlideShapeSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("postNotesSlideShapeSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("postNotesSlideShapeSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("postNotesSlideShapeSaveAs", "fontsFolder");
	paramFolder = utils->getInvalidTestValue("postNotesSlideShapeSaveAs", "folder", paramFolder);
	utils->initialize("postNotesSlideShapeSaveAs", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->downloadNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postNotesSlideShapeSaveAs", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postNotesSlideShapeSaveAs", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postNotesSlideShapeSaveAs", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postNotesSlideShapeSaveAs", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postNotesSlideShapeSaveAs", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postNotesSlideShapeSaveAsInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("postNotesSlideShapeSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postNotesSlideShapeSaveAs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("postNotesSlideShapeSaveAs", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("postNotesSlideShapeSaveAs", "format");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("postNotesSlideShapeSaveAs", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("postNotesSlideShapeSaveAs", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("postNotesSlideShapeSaveAs", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("postNotesSlideShapeSaveAs", "bounds");
	utility::string_t paramPassword = utils->getTestValue("postNotesSlideShapeSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("postNotesSlideShapeSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("postNotesSlideShapeSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("postNotesSlideShapeSaveAs", "fontsFolder");
	paramStorage = utils->getInvalidTestValue("postNotesSlideShapeSaveAs", "storage", paramStorage);
	utils->initialize("postNotesSlideShapeSaveAs", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->downloadNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postNotesSlideShapeSaveAs", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postNotesSlideShapeSaveAs", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postNotesSlideShapeSaveAs", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postNotesSlideShapeSaveAs", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postNotesSlideShapeSaveAs", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postNotesSlideShapeSaveAsInvalidFontsFolder) {
	utility::string_t paramName = utils->getTestValue("postNotesSlideShapeSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postNotesSlideShapeSaveAs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("postNotesSlideShapeSaveAs", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("postNotesSlideShapeSaveAs", "format");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("postNotesSlideShapeSaveAs", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("postNotesSlideShapeSaveAs", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("postNotesSlideShapeSaveAs", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("postNotesSlideShapeSaveAs", "bounds");
	utility::string_t paramPassword = utils->getTestValue("postNotesSlideShapeSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("postNotesSlideShapeSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("postNotesSlideShapeSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("postNotesSlideShapeSaveAs", "fontsFolder");
	paramFontsFolder = utils->getInvalidTestValue("postNotesSlideShapeSaveAs", "fontsFolder", paramFontsFolder);
	utils->initialize("postNotesSlideShapeSaveAs", "fontsFolder", paramFontsFolder);

	bool failed = true;
	try
	{
		api->downloadNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postNotesSlideShapeSaveAs", "fontsFolder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postNotesSlideShapeSaveAs", "fontsFolder", paramFontsFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postNotesSlideShapeSaveAs", "fontsFolder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postNotesSlideShapeSaveAs", "fontsFolder", paramFontsFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postNotesSlideShapeSaveAs", "fontsFolder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postPresentationMerge) {
	utility::string_t paramName = utils->getTestValue("postPresentationMerge", "name");
	std::shared_ptr<PresentationsMergeRequest> paramRequest = utils->getTestValueForClass<PresentationsMergeRequest>("postPresentationMerge", "request");
	utility::string_t paramPassword = utils->getTestValue("postPresentationMerge", "password");
	utility::string_t paramFolder = utils->getTestValue("postPresentationMerge", "folder");
	utility::string_t paramStorage = utils->getTestValue("postPresentationMerge", "storage");
	utils->initialize("postPresentationMerge", "");
	std::shared_ptr<Document> result = api->merge(paramName, paramRequest, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, postPresentationMergeInvalidName) {
	utility::string_t paramName = utils->getTestValue("postPresentationMerge", "name");
	std::shared_ptr<PresentationsMergeRequest> paramRequest = utils->getTestValueForClass<PresentationsMergeRequest>("postPresentationMerge", "request");
	utility::string_t paramPassword = utils->getTestValue("postPresentationMerge", "password");
	utility::string_t paramFolder = utils->getTestValue("postPresentationMerge", "folder");
	utility::string_t paramStorage = utils->getTestValue("postPresentationMerge", "storage");
	paramName = utils->getInvalidTestValue("postPresentationMerge", "name", paramName);
	utils->initialize("postPresentationMerge", "name", paramName);

	bool failed = true;
	try
	{
		api->merge(paramName, paramRequest, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postPresentationMerge", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postPresentationMerge", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postPresentationMerge", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postPresentationMerge", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postPresentationMerge", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postPresentationMergeInvalidRequest) {
	utility::string_t paramName = utils->getTestValue("postPresentationMerge", "name");
	std::shared_ptr<PresentationsMergeRequest> paramRequest = utils->getTestValueForClass<PresentationsMergeRequest>("postPresentationMerge", "request");
	utility::string_t paramPassword = utils->getTestValue("postPresentationMerge", "password");
	utility::string_t paramFolder = utils->getTestValue("postPresentationMerge", "folder");
	utility::string_t paramStorage = utils->getTestValue("postPresentationMerge", "storage");
	paramRequest = utils->getInvalidTestValueForClass<>("postPresentationMerge", "request", paramRequest);
	utils->initialize("postPresentationMerge", "request", paramRequest);

	bool failed = true;
	try
	{
		api->merge(paramName, paramRequest, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postPresentationMerge", "request");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postPresentationMerge", "request", paramRequest);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postPresentationMerge", "request");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postPresentationMerge", "request", paramRequest);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postPresentationMerge", "request"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postPresentationMergeInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("postPresentationMerge", "name");
	std::shared_ptr<PresentationsMergeRequest> paramRequest = utils->getTestValueForClass<PresentationsMergeRequest>("postPresentationMerge", "request");
	utility::string_t paramPassword = utils->getTestValue("postPresentationMerge", "password");
	utility::string_t paramFolder = utils->getTestValue("postPresentationMerge", "folder");
	utility::string_t paramStorage = utils->getTestValue("postPresentationMerge", "storage");
	paramPassword = utils->getInvalidTestValue("postPresentationMerge", "password", paramPassword);
	utils->initialize("postPresentationMerge", "password", paramPassword);

	bool failed = true;
	try
	{
		api->merge(paramName, paramRequest, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postPresentationMerge", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postPresentationMerge", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postPresentationMerge", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postPresentationMerge", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postPresentationMerge", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postPresentationMergeInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("postPresentationMerge", "name");
	std::shared_ptr<PresentationsMergeRequest> paramRequest = utils->getTestValueForClass<PresentationsMergeRequest>("postPresentationMerge", "request");
	utility::string_t paramPassword = utils->getTestValue("postPresentationMerge", "password");
	utility::string_t paramFolder = utils->getTestValue("postPresentationMerge", "folder");
	utility::string_t paramStorage = utils->getTestValue("postPresentationMerge", "storage");
	paramFolder = utils->getInvalidTestValue("postPresentationMerge", "folder", paramFolder);
	utils->initialize("postPresentationMerge", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->merge(paramName, paramRequest, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postPresentationMerge", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postPresentationMerge", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postPresentationMerge", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postPresentationMerge", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postPresentationMerge", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postPresentationMergeInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("postPresentationMerge", "name");
	std::shared_ptr<PresentationsMergeRequest> paramRequest = utils->getTestValueForClass<PresentationsMergeRequest>("postPresentationMerge", "request");
	utility::string_t paramPassword = utils->getTestValue("postPresentationMerge", "password");
	utility::string_t paramFolder = utils->getTestValue("postPresentationMerge", "folder");
	utility::string_t paramStorage = utils->getTestValue("postPresentationMerge", "storage");
	paramStorage = utils->getInvalidTestValue("postPresentationMerge", "storage", paramStorage);
	utils->initialize("postPresentationMerge", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->merge(paramName, paramRequest, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postPresentationMerge", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postPresentationMerge", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postPresentationMerge", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postPresentationMerge", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postPresentationMerge", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postPresentationReplaceText) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("postPresentationReplaceText", "document");
	utility::string_t paramOldValue = utils->getTestValue("postPresentationReplaceText", "oldValue");
	utility::string_t paramNewValue = utils->getTestValue("postPresentationReplaceText", "newValue");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("postPresentationReplaceText", "ignoreCase");
	utility::string_t paramPassword = utils->getTestValue("postPresentationReplaceText", "password");
	utils->initialize("postPresentationReplaceText", "");
	HttpContent result = api->replacePresentationTextOnline(paramDocument, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, postPresentationReplaceTextInvalidDocument) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("postPresentationReplaceText", "document");
	utility::string_t paramOldValue = utils->getTestValue("postPresentationReplaceText", "oldValue");
	utility::string_t paramNewValue = utils->getTestValue("postPresentationReplaceText", "newValue");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("postPresentationReplaceText", "ignoreCase");
	utility::string_t paramPassword = utils->getTestValue("postPresentationReplaceText", "password");
	paramDocument = utils->getInvalidBinaryTestValue("postPresentationReplaceText", "document", paramDocument);
	utils->initialize("postPresentationReplaceText", "document", paramDocument);

	bool failed = true;
	try
	{
		api->replacePresentationTextOnline(paramDocument, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postPresentationReplaceText", "document");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postPresentationReplaceText", "document", paramDocument);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postPresentationReplaceText", "document");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postPresentationReplaceText", "document", paramDocument);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postPresentationReplaceText", "document"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postPresentationReplaceTextInvalidOldValue) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("postPresentationReplaceText", "document");
	utility::string_t paramOldValue = utils->getTestValue("postPresentationReplaceText", "oldValue");
	utility::string_t paramNewValue = utils->getTestValue("postPresentationReplaceText", "newValue");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("postPresentationReplaceText", "ignoreCase");
	utility::string_t paramPassword = utils->getTestValue("postPresentationReplaceText", "password");
	paramOldValue = utils->getInvalidTestValue("postPresentationReplaceText", "oldValue", paramOldValue);
	utils->initialize("postPresentationReplaceText", "oldValue", paramOldValue);

	bool failed = true;
	try
	{
		api->replacePresentationTextOnline(paramDocument, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postPresentationReplaceText", "oldValue");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postPresentationReplaceText", "oldValue", paramOldValue);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postPresentationReplaceText", "oldValue");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postPresentationReplaceText", "oldValue", paramOldValue);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postPresentationReplaceText", "oldValue"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postPresentationReplaceTextInvalidNewValue) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("postPresentationReplaceText", "document");
	utility::string_t paramOldValue = utils->getTestValue("postPresentationReplaceText", "oldValue");
	utility::string_t paramNewValue = utils->getTestValue("postPresentationReplaceText", "newValue");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("postPresentationReplaceText", "ignoreCase");
	utility::string_t paramPassword = utils->getTestValue("postPresentationReplaceText", "password");
	paramNewValue = utils->getInvalidTestValue("postPresentationReplaceText", "newValue", paramNewValue);
	utils->initialize("postPresentationReplaceText", "newValue", paramNewValue);

	bool failed = true;
	try
	{
		api->replacePresentationTextOnline(paramDocument, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postPresentationReplaceText", "newValue");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postPresentationReplaceText", "newValue", paramNewValue);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postPresentationReplaceText", "newValue");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postPresentationReplaceText", "newValue", paramNewValue);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postPresentationReplaceText", "newValue"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postPresentationReplaceTextInvalidIgnoreCase) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("postPresentationReplaceText", "document");
	utility::string_t paramOldValue = utils->getTestValue("postPresentationReplaceText", "oldValue");
	utility::string_t paramNewValue = utils->getTestValue("postPresentationReplaceText", "newValue");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("postPresentationReplaceText", "ignoreCase");
	utility::string_t paramPassword = utils->getTestValue("postPresentationReplaceText", "password");
	paramIgnoreCase = utils->getInvalidBoolTestValue("postPresentationReplaceText", "ignoreCase", paramIgnoreCase).value();
	utils->initialize("postPresentationReplaceText", "ignoreCase", paramIgnoreCase);

	bool failed = true;
	try
	{
		api->replacePresentationTextOnline(paramDocument, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postPresentationReplaceText", "ignoreCase");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postPresentationReplaceText", "ignoreCase", paramIgnoreCase);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postPresentationReplaceText", "ignoreCase");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postPresentationReplaceText", "ignoreCase", paramIgnoreCase);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postPresentationReplaceText", "ignoreCase"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postPresentationReplaceTextInvalidPassword) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("postPresentationReplaceText", "document");
	utility::string_t paramOldValue = utils->getTestValue("postPresentationReplaceText", "oldValue");
	utility::string_t paramNewValue = utils->getTestValue("postPresentationReplaceText", "newValue");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("postPresentationReplaceText", "ignoreCase");
	utility::string_t paramPassword = utils->getTestValue("postPresentationReplaceText", "password");
	paramPassword = utils->getInvalidTestValue("postPresentationReplaceText", "password", paramPassword);
	utils->initialize("postPresentationReplaceText", "password", paramPassword);

	bool failed = true;
	try
	{
		api->replacePresentationTextOnline(paramDocument, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postPresentationReplaceText", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postPresentationReplaceText", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postPresentationReplaceText", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postPresentationReplaceText", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postPresentationReplaceText", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postPresentationSplit) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("postPresentationSplit", "document");
	utility::string_t paramFormat = utils->getTestValue("postPresentationSplit", "format");
	auto paramWidth = utils->getOptionalIntTestValue("postPresentationSplit", "width");
	auto paramHeight = utils->getOptionalIntTestValue("postPresentationSplit", "height");
	auto paramFrom = utils->getOptionalIntTestValue("postPresentationSplit", "from");
	auto paramTo = utils->getOptionalIntTestValue("postPresentationSplit", "to");
	utility::string_t paramPassword = utils->getTestValue("postPresentationSplit", "password");
	utility::string_t paramStorage = utils->getTestValue("postPresentationSplit", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("postPresentationSplit", "fontsFolder");
	utils->initialize("postPresentationSplit", "");
	HttpContent result = api->splitOnline(paramDocument, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, postPresentationSplitInvalidDocument) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("postPresentationSplit", "document");
	utility::string_t paramFormat = utils->getTestValue("postPresentationSplit", "format");
	auto paramWidth = utils->getOptionalIntTestValue("postPresentationSplit", "width");
	auto paramHeight = utils->getOptionalIntTestValue("postPresentationSplit", "height");
	auto paramFrom = utils->getOptionalIntTestValue("postPresentationSplit", "from");
	auto paramTo = utils->getOptionalIntTestValue("postPresentationSplit", "to");
	utility::string_t paramPassword = utils->getTestValue("postPresentationSplit", "password");
	utility::string_t paramStorage = utils->getTestValue("postPresentationSplit", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("postPresentationSplit", "fontsFolder");
	paramDocument = utils->getInvalidBinaryTestValue("postPresentationSplit", "document", paramDocument);
	utils->initialize("postPresentationSplit", "document", paramDocument);

	bool failed = true;
	try
	{
		api->splitOnline(paramDocument, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postPresentationSplit", "document");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postPresentationSplit", "document", paramDocument);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postPresentationSplit", "document");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postPresentationSplit", "document", paramDocument);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postPresentationSplit", "document"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postPresentationSplitInvalidFormat) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("postPresentationSplit", "document");
	utility::string_t paramFormat = utils->getTestValue("postPresentationSplit", "format");
	auto paramWidth = utils->getOptionalIntTestValue("postPresentationSplit", "width");
	auto paramHeight = utils->getOptionalIntTestValue("postPresentationSplit", "height");
	auto paramFrom = utils->getOptionalIntTestValue("postPresentationSplit", "from");
	auto paramTo = utils->getOptionalIntTestValue("postPresentationSplit", "to");
	utility::string_t paramPassword = utils->getTestValue("postPresentationSplit", "password");
	utility::string_t paramStorage = utils->getTestValue("postPresentationSplit", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("postPresentationSplit", "fontsFolder");
	paramFormat = utils->getInvalidTestValue("postPresentationSplit", "format", paramFormat);
	utils->initialize("postPresentationSplit", "format", paramFormat);

	bool failed = true;
	try
	{
		api->splitOnline(paramDocument, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postPresentationSplit", "format");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postPresentationSplit", "format", paramFormat);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postPresentationSplit", "format");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postPresentationSplit", "format", paramFormat);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postPresentationSplit", "format"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postPresentationSplitInvalidWidth) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("postPresentationSplit", "document");
	utility::string_t paramFormat = utils->getTestValue("postPresentationSplit", "format");
	auto paramWidth = utils->getOptionalIntTestValue("postPresentationSplit", "width");
	auto paramHeight = utils->getOptionalIntTestValue("postPresentationSplit", "height");
	auto paramFrom = utils->getOptionalIntTestValue("postPresentationSplit", "from");
	auto paramTo = utils->getOptionalIntTestValue("postPresentationSplit", "to");
	utility::string_t paramPassword = utils->getTestValue("postPresentationSplit", "password");
	utility::string_t paramStorage = utils->getTestValue("postPresentationSplit", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("postPresentationSplit", "fontsFolder");
	paramWidth = utils->getInvalidIntTestValue("postPresentationSplit", "width", paramWidth).value();
	utils->initialize("postPresentationSplit", "width", paramWidth);

	bool failed = true;
	try
	{
		api->splitOnline(paramDocument, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postPresentationSplit", "width");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postPresentationSplit", "width", paramWidth);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postPresentationSplit", "width");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postPresentationSplit", "width", paramWidth);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postPresentationSplit", "width"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postPresentationSplitInvalidHeight) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("postPresentationSplit", "document");
	utility::string_t paramFormat = utils->getTestValue("postPresentationSplit", "format");
	auto paramWidth = utils->getOptionalIntTestValue("postPresentationSplit", "width");
	auto paramHeight = utils->getOptionalIntTestValue("postPresentationSplit", "height");
	auto paramFrom = utils->getOptionalIntTestValue("postPresentationSplit", "from");
	auto paramTo = utils->getOptionalIntTestValue("postPresentationSplit", "to");
	utility::string_t paramPassword = utils->getTestValue("postPresentationSplit", "password");
	utility::string_t paramStorage = utils->getTestValue("postPresentationSplit", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("postPresentationSplit", "fontsFolder");
	paramHeight = utils->getInvalidIntTestValue("postPresentationSplit", "height", paramHeight).value();
	utils->initialize("postPresentationSplit", "height", paramHeight);

	bool failed = true;
	try
	{
		api->splitOnline(paramDocument, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postPresentationSplit", "height");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postPresentationSplit", "height", paramHeight);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postPresentationSplit", "height");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postPresentationSplit", "height", paramHeight);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postPresentationSplit", "height"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postPresentationSplitInvalidFrom) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("postPresentationSplit", "document");
	utility::string_t paramFormat = utils->getTestValue("postPresentationSplit", "format");
	auto paramWidth = utils->getOptionalIntTestValue("postPresentationSplit", "width");
	auto paramHeight = utils->getOptionalIntTestValue("postPresentationSplit", "height");
	auto paramFrom = utils->getOptionalIntTestValue("postPresentationSplit", "from");
	auto paramTo = utils->getOptionalIntTestValue("postPresentationSplit", "to");
	utility::string_t paramPassword = utils->getTestValue("postPresentationSplit", "password");
	utility::string_t paramStorage = utils->getTestValue("postPresentationSplit", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("postPresentationSplit", "fontsFolder");
	paramFrom = utils->getInvalidIntTestValue("postPresentationSplit", "from", paramFrom).value();
	utils->initialize("postPresentationSplit", "from", paramFrom);

	bool failed = true;
	try
	{
		api->splitOnline(paramDocument, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postPresentationSplit", "from");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postPresentationSplit", "from", paramFrom);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postPresentationSplit", "from");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postPresentationSplit", "from", paramFrom);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postPresentationSplit", "from"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postPresentationSplitInvalidTo) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("postPresentationSplit", "document");
	utility::string_t paramFormat = utils->getTestValue("postPresentationSplit", "format");
	auto paramWidth = utils->getOptionalIntTestValue("postPresentationSplit", "width");
	auto paramHeight = utils->getOptionalIntTestValue("postPresentationSplit", "height");
	auto paramFrom = utils->getOptionalIntTestValue("postPresentationSplit", "from");
	auto paramTo = utils->getOptionalIntTestValue("postPresentationSplit", "to");
	utility::string_t paramPassword = utils->getTestValue("postPresentationSplit", "password");
	utility::string_t paramStorage = utils->getTestValue("postPresentationSplit", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("postPresentationSplit", "fontsFolder");
	paramTo = utils->getInvalidIntTestValue("postPresentationSplit", "to", paramTo).value();
	utils->initialize("postPresentationSplit", "to", paramTo);

	bool failed = true;
	try
	{
		api->splitOnline(paramDocument, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postPresentationSplit", "to");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postPresentationSplit", "to", paramTo);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postPresentationSplit", "to");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postPresentationSplit", "to", paramTo);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postPresentationSplit", "to"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postPresentationSplitInvalidPassword) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("postPresentationSplit", "document");
	utility::string_t paramFormat = utils->getTestValue("postPresentationSplit", "format");
	auto paramWidth = utils->getOptionalIntTestValue("postPresentationSplit", "width");
	auto paramHeight = utils->getOptionalIntTestValue("postPresentationSplit", "height");
	auto paramFrom = utils->getOptionalIntTestValue("postPresentationSplit", "from");
	auto paramTo = utils->getOptionalIntTestValue("postPresentationSplit", "to");
	utility::string_t paramPassword = utils->getTestValue("postPresentationSplit", "password");
	utility::string_t paramStorage = utils->getTestValue("postPresentationSplit", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("postPresentationSplit", "fontsFolder");
	paramPassword = utils->getInvalidTestValue("postPresentationSplit", "password", paramPassword);
	utils->initialize("postPresentationSplit", "password", paramPassword);

	bool failed = true;
	try
	{
		api->splitOnline(paramDocument, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postPresentationSplit", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postPresentationSplit", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postPresentationSplit", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postPresentationSplit", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postPresentationSplit", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postPresentationSplitInvalidStorage) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("postPresentationSplit", "document");
	utility::string_t paramFormat = utils->getTestValue("postPresentationSplit", "format");
	auto paramWidth = utils->getOptionalIntTestValue("postPresentationSplit", "width");
	auto paramHeight = utils->getOptionalIntTestValue("postPresentationSplit", "height");
	auto paramFrom = utils->getOptionalIntTestValue("postPresentationSplit", "from");
	auto paramTo = utils->getOptionalIntTestValue("postPresentationSplit", "to");
	utility::string_t paramPassword = utils->getTestValue("postPresentationSplit", "password");
	utility::string_t paramStorage = utils->getTestValue("postPresentationSplit", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("postPresentationSplit", "fontsFolder");
	paramStorage = utils->getInvalidTestValue("postPresentationSplit", "storage", paramStorage);
	utils->initialize("postPresentationSplit", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->splitOnline(paramDocument, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postPresentationSplit", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postPresentationSplit", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postPresentationSplit", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postPresentationSplit", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postPresentationSplit", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postPresentationSplitInvalidFontsFolder) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("postPresentationSplit", "document");
	utility::string_t paramFormat = utils->getTestValue("postPresentationSplit", "format");
	auto paramWidth = utils->getOptionalIntTestValue("postPresentationSplit", "width");
	auto paramHeight = utils->getOptionalIntTestValue("postPresentationSplit", "height");
	auto paramFrom = utils->getOptionalIntTestValue("postPresentationSplit", "from");
	auto paramTo = utils->getOptionalIntTestValue("postPresentationSplit", "to");
	utility::string_t paramPassword = utils->getTestValue("postPresentationSplit", "password");
	utility::string_t paramStorage = utils->getTestValue("postPresentationSplit", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("postPresentationSplit", "fontsFolder");
	paramFontsFolder = utils->getInvalidTestValue("postPresentationSplit", "fontsFolder", paramFontsFolder);
	utils->initialize("postPresentationSplit", "fontsFolder", paramFontsFolder);

	bool failed = true;
	try
	{
		api->splitOnline(paramDocument, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postPresentationSplit", "fontsFolder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postPresentationSplit", "fontsFolder", paramFontsFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postPresentationSplit", "fontsFolder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postPresentationSplit", "fontsFolder", paramFontsFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postPresentationSplit", "fontsFolder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSection) {
	utility::string_t paramName = utils->getTestValue("postSection", "name");
	utility::string_t paramSectionName = utils->getTestValue("postSection", "sectionName");
	int32_t paramSlideIndex = utils->getIntTestValue("postSection", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("postSection", "password");
	utility::string_t paramFolder = utils->getTestValue("postSection", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSection", "storage");
	utils->initialize("postSection", "");
	std::shared_ptr<Sections> result = api->createSection(paramName, paramSectionName, paramSlideIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, postSectionInvalidName) {
	utility::string_t paramName = utils->getTestValue("postSection", "name");
	utility::string_t paramSectionName = utils->getTestValue("postSection", "sectionName");
	int32_t paramSlideIndex = utils->getIntTestValue("postSection", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("postSection", "password");
	utility::string_t paramFolder = utils->getTestValue("postSection", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSection", "storage");
	paramName = utils->getInvalidTestValue("postSection", "name", paramName);
	utils->initialize("postSection", "name", paramName);

	bool failed = true;
	try
	{
		api->createSection(paramName, paramSectionName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSection", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSection", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSection", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSection", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSection", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSectionInvalidSectionName) {
	utility::string_t paramName = utils->getTestValue("postSection", "name");
	utility::string_t paramSectionName = utils->getTestValue("postSection", "sectionName");
	int32_t paramSlideIndex = utils->getIntTestValue("postSection", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("postSection", "password");
	utility::string_t paramFolder = utils->getTestValue("postSection", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSection", "storage");
	paramSectionName = utils->getInvalidTestValue("postSection", "sectionName", paramSectionName);
	utils->initialize("postSection", "sectionName", paramSectionName);

	bool failed = true;
	try
	{
		api->createSection(paramName, paramSectionName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSection", "sectionName");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSection", "sectionName", paramSectionName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSection", "sectionName");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSection", "sectionName", paramSectionName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSection", "sectionName"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSectionInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("postSection", "name");
	utility::string_t paramSectionName = utils->getTestValue("postSection", "sectionName");
	int32_t paramSlideIndex = utils->getIntTestValue("postSection", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("postSection", "password");
	utility::string_t paramFolder = utils->getTestValue("postSection", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSection", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("postSection", "slideIndex", paramSlideIndex).value();
	utils->initialize("postSection", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->createSection(paramName, paramSectionName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSection", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSection", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSection", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSection", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSection", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSectionInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("postSection", "name");
	utility::string_t paramSectionName = utils->getTestValue("postSection", "sectionName");
	int32_t paramSlideIndex = utils->getIntTestValue("postSection", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("postSection", "password");
	utility::string_t paramFolder = utils->getTestValue("postSection", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSection", "storage");
	paramPassword = utils->getInvalidTestValue("postSection", "password", paramPassword);
	utils->initialize("postSection", "password", paramPassword);

	bool failed = true;
	try
	{
		api->createSection(paramName, paramSectionName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSection", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSection", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSection", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSection", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSection", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSectionInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("postSection", "name");
	utility::string_t paramSectionName = utils->getTestValue("postSection", "sectionName");
	int32_t paramSlideIndex = utils->getIntTestValue("postSection", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("postSection", "password");
	utility::string_t paramFolder = utils->getTestValue("postSection", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSection", "storage");
	paramFolder = utils->getInvalidTestValue("postSection", "folder", paramFolder);
	utils->initialize("postSection", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->createSection(paramName, paramSectionName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSection", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSection", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSection", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSection", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSection", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSectionInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("postSection", "name");
	utility::string_t paramSectionName = utils->getTestValue("postSection", "sectionName");
	int32_t paramSlideIndex = utils->getIntTestValue("postSection", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("postSection", "password");
	utility::string_t paramFolder = utils->getTestValue("postSection", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSection", "storage");
	paramStorage = utils->getInvalidTestValue("postSection", "storage", paramStorage);
	utils->initialize("postSection", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->createSection(paramName, paramSectionName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSection", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSection", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSection", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSection", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSection", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSectionMove) {
	utility::string_t paramName = utils->getTestValue("postSectionMove", "name");
	int32_t paramSectionIndex = utils->getIntTestValue("postSectionMove", "sectionIndex");
	int32_t paramNewPosition = utils->getIntTestValue("postSectionMove", "newPosition");
	utility::string_t paramPassword = utils->getTestValue("postSectionMove", "password");
	utility::string_t paramFolder = utils->getTestValue("postSectionMove", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSectionMove", "storage");
	utils->initialize("postSectionMove", "");
	std::shared_ptr<Sections> result = api->moveSection(paramName, paramSectionIndex, paramNewPosition, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, postSectionMoveInvalidName) {
	utility::string_t paramName = utils->getTestValue("postSectionMove", "name");
	int32_t paramSectionIndex = utils->getIntTestValue("postSectionMove", "sectionIndex");
	int32_t paramNewPosition = utils->getIntTestValue("postSectionMove", "newPosition");
	utility::string_t paramPassword = utils->getTestValue("postSectionMove", "password");
	utility::string_t paramFolder = utils->getTestValue("postSectionMove", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSectionMove", "storage");
	paramName = utils->getInvalidTestValue("postSectionMove", "name", paramName);
	utils->initialize("postSectionMove", "name", paramName);

	bool failed = true;
	try
	{
		api->moveSection(paramName, paramSectionIndex, paramNewPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSectionMove", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSectionMove", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSectionMove", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSectionMove", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSectionMove", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSectionMoveInvalidSectionIndex) {
	utility::string_t paramName = utils->getTestValue("postSectionMove", "name");
	int32_t paramSectionIndex = utils->getIntTestValue("postSectionMove", "sectionIndex");
	int32_t paramNewPosition = utils->getIntTestValue("postSectionMove", "newPosition");
	utility::string_t paramPassword = utils->getTestValue("postSectionMove", "password");
	utility::string_t paramFolder = utils->getTestValue("postSectionMove", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSectionMove", "storage");
	paramSectionIndex = utils->getInvalidIntTestValue("postSectionMove", "sectionIndex", paramSectionIndex).value();
	utils->initialize("postSectionMove", "sectionIndex", paramSectionIndex);

	bool failed = true;
	try
	{
		api->moveSection(paramName, paramSectionIndex, paramNewPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSectionMove", "sectionIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSectionMove", "sectionIndex", paramSectionIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSectionMove", "sectionIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSectionMove", "sectionIndex", paramSectionIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSectionMove", "sectionIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSectionMoveInvalidNewPosition) {
	utility::string_t paramName = utils->getTestValue("postSectionMove", "name");
	int32_t paramSectionIndex = utils->getIntTestValue("postSectionMove", "sectionIndex");
	int32_t paramNewPosition = utils->getIntTestValue("postSectionMove", "newPosition");
	utility::string_t paramPassword = utils->getTestValue("postSectionMove", "password");
	utility::string_t paramFolder = utils->getTestValue("postSectionMove", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSectionMove", "storage");
	paramNewPosition = utils->getInvalidIntTestValue("postSectionMove", "newPosition", paramNewPosition).value();
	utils->initialize("postSectionMove", "newPosition", paramNewPosition);

	bool failed = true;
	try
	{
		api->moveSection(paramName, paramSectionIndex, paramNewPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSectionMove", "newPosition");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSectionMove", "newPosition", paramNewPosition);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSectionMove", "newPosition");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSectionMove", "newPosition", paramNewPosition);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSectionMove", "newPosition"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSectionMoveInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("postSectionMove", "name");
	int32_t paramSectionIndex = utils->getIntTestValue("postSectionMove", "sectionIndex");
	int32_t paramNewPosition = utils->getIntTestValue("postSectionMove", "newPosition");
	utility::string_t paramPassword = utils->getTestValue("postSectionMove", "password");
	utility::string_t paramFolder = utils->getTestValue("postSectionMove", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSectionMove", "storage");
	paramPassword = utils->getInvalidTestValue("postSectionMove", "password", paramPassword);
	utils->initialize("postSectionMove", "password", paramPassword);

	bool failed = true;
	try
	{
		api->moveSection(paramName, paramSectionIndex, paramNewPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSectionMove", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSectionMove", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSectionMove", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSectionMove", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSectionMove", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSectionMoveInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("postSectionMove", "name");
	int32_t paramSectionIndex = utils->getIntTestValue("postSectionMove", "sectionIndex");
	int32_t paramNewPosition = utils->getIntTestValue("postSectionMove", "newPosition");
	utility::string_t paramPassword = utils->getTestValue("postSectionMove", "password");
	utility::string_t paramFolder = utils->getTestValue("postSectionMove", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSectionMove", "storage");
	paramFolder = utils->getInvalidTestValue("postSectionMove", "folder", paramFolder);
	utils->initialize("postSectionMove", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->moveSection(paramName, paramSectionIndex, paramNewPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSectionMove", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSectionMove", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSectionMove", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSectionMove", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSectionMove", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSectionMoveInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("postSectionMove", "name");
	int32_t paramSectionIndex = utils->getIntTestValue("postSectionMove", "sectionIndex");
	int32_t paramNewPosition = utils->getIntTestValue("postSectionMove", "newPosition");
	utility::string_t paramPassword = utils->getTestValue("postSectionMove", "password");
	utility::string_t paramFolder = utils->getTestValue("postSectionMove", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSectionMove", "storage");
	paramStorage = utils->getInvalidTestValue("postSectionMove", "storage", paramStorage);
	utils->initialize("postSectionMove", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->moveSection(paramName, paramSectionIndex, paramNewPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSectionMove", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSectionMove", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSectionMove", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSectionMove", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSectionMove", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postShapeSaveAs) {
	utility::string_t paramName = utils->getTestValue("postShapeSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postShapeSaveAs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("postShapeSaveAs", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("postShapeSaveAs", "format");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("postShapeSaveAs", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("postShapeSaveAs", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("postShapeSaveAs", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("postShapeSaveAs", "bounds");
	utility::string_t paramPassword = utils->getTestValue("postShapeSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("postShapeSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("postShapeSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("postShapeSaveAs", "fontsFolder");
	utils->initialize("postShapeSaveAs", "");
	HttpContent result = api->downloadShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, postShapeSaveAsInvalidName) {
	utility::string_t paramName = utils->getTestValue("postShapeSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postShapeSaveAs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("postShapeSaveAs", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("postShapeSaveAs", "format");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("postShapeSaveAs", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("postShapeSaveAs", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("postShapeSaveAs", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("postShapeSaveAs", "bounds");
	utility::string_t paramPassword = utils->getTestValue("postShapeSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("postShapeSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("postShapeSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("postShapeSaveAs", "fontsFolder");
	paramName = utils->getInvalidTestValue("postShapeSaveAs", "name", paramName);
	utils->initialize("postShapeSaveAs", "name", paramName);

	bool failed = true;
	try
	{
		api->downloadShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postShapeSaveAs", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postShapeSaveAs", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postShapeSaveAs", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postShapeSaveAs", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postShapeSaveAs", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postShapeSaveAsInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("postShapeSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postShapeSaveAs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("postShapeSaveAs", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("postShapeSaveAs", "format");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("postShapeSaveAs", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("postShapeSaveAs", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("postShapeSaveAs", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("postShapeSaveAs", "bounds");
	utility::string_t paramPassword = utils->getTestValue("postShapeSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("postShapeSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("postShapeSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("postShapeSaveAs", "fontsFolder");
	paramSlideIndex = utils->getInvalidIntTestValue("postShapeSaveAs", "slideIndex", paramSlideIndex).value();
	utils->initialize("postShapeSaveAs", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->downloadShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postShapeSaveAs", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postShapeSaveAs", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postShapeSaveAs", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postShapeSaveAs", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postShapeSaveAs", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postShapeSaveAsInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("postShapeSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postShapeSaveAs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("postShapeSaveAs", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("postShapeSaveAs", "format");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("postShapeSaveAs", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("postShapeSaveAs", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("postShapeSaveAs", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("postShapeSaveAs", "bounds");
	utility::string_t paramPassword = utils->getTestValue("postShapeSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("postShapeSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("postShapeSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("postShapeSaveAs", "fontsFolder");
	paramShapeIndex = utils->getInvalidIntTestValue("postShapeSaveAs", "shapeIndex", paramShapeIndex).value();
	utils->initialize("postShapeSaveAs", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->downloadShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postShapeSaveAs", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postShapeSaveAs", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postShapeSaveAs", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postShapeSaveAs", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postShapeSaveAs", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postShapeSaveAsInvalidFormat) {
	utility::string_t paramName = utils->getTestValue("postShapeSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postShapeSaveAs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("postShapeSaveAs", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("postShapeSaveAs", "format");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("postShapeSaveAs", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("postShapeSaveAs", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("postShapeSaveAs", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("postShapeSaveAs", "bounds");
	utility::string_t paramPassword = utils->getTestValue("postShapeSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("postShapeSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("postShapeSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("postShapeSaveAs", "fontsFolder");
	paramFormat = utils->getInvalidTestValue("postShapeSaveAs", "format", paramFormat);
	utils->initialize("postShapeSaveAs", "format", paramFormat);

	bool failed = true;
	try
	{
		api->downloadShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postShapeSaveAs", "format");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postShapeSaveAs", "format", paramFormat);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postShapeSaveAs", "format");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postShapeSaveAs", "format", paramFormat);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postShapeSaveAs", "format"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postShapeSaveAsInvalidOptions) {
	utility::string_t paramName = utils->getTestValue("postShapeSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postShapeSaveAs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("postShapeSaveAs", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("postShapeSaveAs", "format");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("postShapeSaveAs", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("postShapeSaveAs", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("postShapeSaveAs", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("postShapeSaveAs", "bounds");
	utility::string_t paramPassword = utils->getTestValue("postShapeSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("postShapeSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("postShapeSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("postShapeSaveAs", "fontsFolder");
	paramOptions = utils->getInvalidTestValueForClass<>("postShapeSaveAs", "options", paramOptions);
	utils->initialize("postShapeSaveAs", "options", paramOptions);

	bool failed = true;
	try
	{
		api->downloadShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postShapeSaveAs", "options");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postShapeSaveAs", "options", paramOptions);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postShapeSaveAs", "options");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postShapeSaveAs", "options", paramOptions);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postShapeSaveAs", "options"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postShapeSaveAsInvalidScaleX) {
	utility::string_t paramName = utils->getTestValue("postShapeSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postShapeSaveAs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("postShapeSaveAs", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("postShapeSaveAs", "format");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("postShapeSaveAs", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("postShapeSaveAs", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("postShapeSaveAs", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("postShapeSaveAs", "bounds");
	utility::string_t paramPassword = utils->getTestValue("postShapeSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("postShapeSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("postShapeSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("postShapeSaveAs", "fontsFolder");
	paramScaleX = utils->getInvalidDoubleTestValue("postShapeSaveAs", "scaleX", paramScaleX).value();
	utils->initialize("postShapeSaveAs", "scaleX", paramScaleX);

	bool failed = true;
	try
	{
		api->downloadShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postShapeSaveAs", "scaleX");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postShapeSaveAs", "scaleX", paramScaleX);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postShapeSaveAs", "scaleX");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postShapeSaveAs", "scaleX", paramScaleX);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postShapeSaveAs", "scaleX"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postShapeSaveAsInvalidScaleY) {
	utility::string_t paramName = utils->getTestValue("postShapeSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postShapeSaveAs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("postShapeSaveAs", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("postShapeSaveAs", "format");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("postShapeSaveAs", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("postShapeSaveAs", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("postShapeSaveAs", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("postShapeSaveAs", "bounds");
	utility::string_t paramPassword = utils->getTestValue("postShapeSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("postShapeSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("postShapeSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("postShapeSaveAs", "fontsFolder");
	paramScaleY = utils->getInvalidDoubleTestValue("postShapeSaveAs", "scaleY", paramScaleY).value();
	utils->initialize("postShapeSaveAs", "scaleY", paramScaleY);

	bool failed = true;
	try
	{
		api->downloadShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postShapeSaveAs", "scaleY");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postShapeSaveAs", "scaleY", paramScaleY);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postShapeSaveAs", "scaleY");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postShapeSaveAs", "scaleY", paramScaleY);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postShapeSaveAs", "scaleY"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postShapeSaveAsInvalidBounds) {
	utility::string_t paramName = utils->getTestValue("postShapeSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postShapeSaveAs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("postShapeSaveAs", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("postShapeSaveAs", "format");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("postShapeSaveAs", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("postShapeSaveAs", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("postShapeSaveAs", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("postShapeSaveAs", "bounds");
	utility::string_t paramPassword = utils->getTestValue("postShapeSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("postShapeSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("postShapeSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("postShapeSaveAs", "fontsFolder");
	paramBounds = utils->getInvalidTestValue("postShapeSaveAs", "bounds", paramBounds);
	utils->initialize("postShapeSaveAs", "bounds", paramBounds);

	bool failed = true;
	try
	{
		api->downloadShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postShapeSaveAs", "bounds");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postShapeSaveAs", "bounds", paramBounds);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postShapeSaveAs", "bounds");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postShapeSaveAs", "bounds", paramBounds);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postShapeSaveAs", "bounds"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postShapeSaveAsInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("postShapeSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postShapeSaveAs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("postShapeSaveAs", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("postShapeSaveAs", "format");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("postShapeSaveAs", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("postShapeSaveAs", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("postShapeSaveAs", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("postShapeSaveAs", "bounds");
	utility::string_t paramPassword = utils->getTestValue("postShapeSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("postShapeSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("postShapeSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("postShapeSaveAs", "fontsFolder");
	paramPassword = utils->getInvalidTestValue("postShapeSaveAs", "password", paramPassword);
	utils->initialize("postShapeSaveAs", "password", paramPassword);

	bool failed = true;
	try
	{
		api->downloadShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postShapeSaveAs", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postShapeSaveAs", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postShapeSaveAs", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postShapeSaveAs", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postShapeSaveAs", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postShapeSaveAsInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("postShapeSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postShapeSaveAs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("postShapeSaveAs", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("postShapeSaveAs", "format");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("postShapeSaveAs", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("postShapeSaveAs", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("postShapeSaveAs", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("postShapeSaveAs", "bounds");
	utility::string_t paramPassword = utils->getTestValue("postShapeSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("postShapeSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("postShapeSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("postShapeSaveAs", "fontsFolder");
	paramFolder = utils->getInvalidTestValue("postShapeSaveAs", "folder", paramFolder);
	utils->initialize("postShapeSaveAs", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->downloadShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postShapeSaveAs", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postShapeSaveAs", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postShapeSaveAs", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postShapeSaveAs", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postShapeSaveAs", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postShapeSaveAsInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("postShapeSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postShapeSaveAs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("postShapeSaveAs", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("postShapeSaveAs", "format");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("postShapeSaveAs", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("postShapeSaveAs", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("postShapeSaveAs", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("postShapeSaveAs", "bounds");
	utility::string_t paramPassword = utils->getTestValue("postShapeSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("postShapeSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("postShapeSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("postShapeSaveAs", "fontsFolder");
	paramStorage = utils->getInvalidTestValue("postShapeSaveAs", "storage", paramStorage);
	utils->initialize("postShapeSaveAs", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->downloadShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postShapeSaveAs", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postShapeSaveAs", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postShapeSaveAs", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postShapeSaveAs", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postShapeSaveAs", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postShapeSaveAsInvalidFontsFolder) {
	utility::string_t paramName = utils->getTestValue("postShapeSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postShapeSaveAs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("postShapeSaveAs", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("postShapeSaveAs", "format");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("postShapeSaveAs", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("postShapeSaveAs", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("postShapeSaveAs", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("postShapeSaveAs", "bounds");
	utility::string_t paramPassword = utils->getTestValue("postShapeSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("postShapeSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("postShapeSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("postShapeSaveAs", "fontsFolder");
	paramFontsFolder = utils->getInvalidTestValue("postShapeSaveAs", "fontsFolder", paramFontsFolder);
	utils->initialize("postShapeSaveAs", "fontsFolder", paramFontsFolder);

	bool failed = true;
	try
	{
		api->downloadShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postShapeSaveAs", "fontsFolder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postShapeSaveAs", "fontsFolder", paramFontsFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postShapeSaveAs", "fontsFolder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postShapeSaveAs", "fontsFolder", paramFontsFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postShapeSaveAs", "fontsFolder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlideAnimationEffect) {
	utility::string_t paramName = utils->getTestValue("postSlideAnimationEffect", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postSlideAnimationEffect", "slideIndex");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("postSlideAnimationEffect", "effect");
	utility::string_t paramPassword = utils->getTestValue("postSlideAnimationEffect", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlideAnimationEffect", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlideAnimationEffect", "storage");
	utils->initialize("postSlideAnimationEffect", "");
	std::shared_ptr<SlideAnimation> result = api->createAnimationEffect(paramName, paramSlideIndex, paramEffect, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, postSlideAnimationEffectInvalidName) {
	utility::string_t paramName = utils->getTestValue("postSlideAnimationEffect", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postSlideAnimationEffect", "slideIndex");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("postSlideAnimationEffect", "effect");
	utility::string_t paramPassword = utils->getTestValue("postSlideAnimationEffect", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlideAnimationEffect", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlideAnimationEffect", "storage");
	paramName = utils->getInvalidTestValue("postSlideAnimationEffect", "name", paramName);
	utils->initialize("postSlideAnimationEffect", "name", paramName);

	bool failed = true;
	try
	{
		api->createAnimationEffect(paramName, paramSlideIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlideAnimationEffect", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlideAnimationEffect", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlideAnimationEffect", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlideAnimationEffect", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlideAnimationEffect", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlideAnimationEffectInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("postSlideAnimationEffect", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postSlideAnimationEffect", "slideIndex");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("postSlideAnimationEffect", "effect");
	utility::string_t paramPassword = utils->getTestValue("postSlideAnimationEffect", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlideAnimationEffect", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlideAnimationEffect", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("postSlideAnimationEffect", "slideIndex", paramSlideIndex).value();
	utils->initialize("postSlideAnimationEffect", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->createAnimationEffect(paramName, paramSlideIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlideAnimationEffect", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlideAnimationEffect", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlideAnimationEffect", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlideAnimationEffect", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlideAnimationEffect", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlideAnimationEffectInvalidEffect) {
	utility::string_t paramName = utils->getTestValue("postSlideAnimationEffect", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postSlideAnimationEffect", "slideIndex");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("postSlideAnimationEffect", "effect");
	utility::string_t paramPassword = utils->getTestValue("postSlideAnimationEffect", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlideAnimationEffect", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlideAnimationEffect", "storage");
	paramEffect = utils->getInvalidTestValueForClass<>("postSlideAnimationEffect", "effect", paramEffect);
	utils->initialize("postSlideAnimationEffect", "effect", paramEffect);

	bool failed = true;
	try
	{
		api->createAnimationEffect(paramName, paramSlideIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlideAnimationEffect", "effect");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlideAnimationEffect", "effect", paramEffect);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlideAnimationEffect", "effect");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlideAnimationEffect", "effect", paramEffect);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlideAnimationEffect", "effect"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlideAnimationEffectInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("postSlideAnimationEffect", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postSlideAnimationEffect", "slideIndex");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("postSlideAnimationEffect", "effect");
	utility::string_t paramPassword = utils->getTestValue("postSlideAnimationEffect", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlideAnimationEffect", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlideAnimationEffect", "storage");
	paramPassword = utils->getInvalidTestValue("postSlideAnimationEffect", "password", paramPassword);
	utils->initialize("postSlideAnimationEffect", "password", paramPassword);

	bool failed = true;
	try
	{
		api->createAnimationEffect(paramName, paramSlideIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlideAnimationEffect", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlideAnimationEffect", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlideAnimationEffect", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlideAnimationEffect", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlideAnimationEffect", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlideAnimationEffectInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("postSlideAnimationEffect", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postSlideAnimationEffect", "slideIndex");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("postSlideAnimationEffect", "effect");
	utility::string_t paramPassword = utils->getTestValue("postSlideAnimationEffect", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlideAnimationEffect", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlideAnimationEffect", "storage");
	paramFolder = utils->getInvalidTestValue("postSlideAnimationEffect", "folder", paramFolder);
	utils->initialize("postSlideAnimationEffect", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->createAnimationEffect(paramName, paramSlideIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlideAnimationEffect", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlideAnimationEffect", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlideAnimationEffect", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlideAnimationEffect", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlideAnimationEffect", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlideAnimationEffectInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("postSlideAnimationEffect", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postSlideAnimationEffect", "slideIndex");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("postSlideAnimationEffect", "effect");
	utility::string_t paramPassword = utils->getTestValue("postSlideAnimationEffect", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlideAnimationEffect", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlideAnimationEffect", "storage");
	paramStorage = utils->getInvalidTestValue("postSlideAnimationEffect", "storage", paramStorage);
	utils->initialize("postSlideAnimationEffect", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->createAnimationEffect(paramName, paramSlideIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlideAnimationEffect", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlideAnimationEffect", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlideAnimationEffect", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlideAnimationEffect", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlideAnimationEffect", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlideAnimationInteractiveSequence) {
	utility::string_t paramName = utils->getTestValue("postSlideAnimationInteractiveSequence", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postSlideAnimationInteractiveSequence", "slideIndex");
	std::shared_ptr<InteractiveSequence> paramSequence = utils->getTestValueForClass<InteractiveSequence>("postSlideAnimationInteractiveSequence", "sequence");
	utility::string_t paramPassword = utils->getTestValue("postSlideAnimationInteractiveSequence", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlideAnimationInteractiveSequence", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlideAnimationInteractiveSequence", "storage");
	utils->initialize("postSlideAnimationInteractiveSequence", "");
	std::shared_ptr<SlideAnimation> result = api->createAnimationInteractiveSequence(paramName, paramSlideIndex, paramSequence, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, postSlideAnimationInteractiveSequenceInvalidName) {
	utility::string_t paramName = utils->getTestValue("postSlideAnimationInteractiveSequence", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postSlideAnimationInteractiveSequence", "slideIndex");
	std::shared_ptr<InteractiveSequence> paramSequence = utils->getTestValueForClass<InteractiveSequence>("postSlideAnimationInteractiveSequence", "sequence");
	utility::string_t paramPassword = utils->getTestValue("postSlideAnimationInteractiveSequence", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlideAnimationInteractiveSequence", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlideAnimationInteractiveSequence", "storage");
	paramName = utils->getInvalidTestValue("postSlideAnimationInteractiveSequence", "name", paramName);
	utils->initialize("postSlideAnimationInteractiveSequence", "name", paramName);

	bool failed = true;
	try
	{
		api->createAnimationInteractiveSequence(paramName, paramSlideIndex, paramSequence, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlideAnimationInteractiveSequence", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlideAnimationInteractiveSequence", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlideAnimationInteractiveSequence", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlideAnimationInteractiveSequence", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlideAnimationInteractiveSequence", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlideAnimationInteractiveSequenceInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("postSlideAnimationInteractiveSequence", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postSlideAnimationInteractiveSequence", "slideIndex");
	std::shared_ptr<InteractiveSequence> paramSequence = utils->getTestValueForClass<InteractiveSequence>("postSlideAnimationInteractiveSequence", "sequence");
	utility::string_t paramPassword = utils->getTestValue("postSlideAnimationInteractiveSequence", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlideAnimationInteractiveSequence", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlideAnimationInteractiveSequence", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("postSlideAnimationInteractiveSequence", "slideIndex", paramSlideIndex).value();
	utils->initialize("postSlideAnimationInteractiveSequence", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->createAnimationInteractiveSequence(paramName, paramSlideIndex, paramSequence, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlideAnimationInteractiveSequence", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlideAnimationInteractiveSequence", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlideAnimationInteractiveSequence", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlideAnimationInteractiveSequence", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlideAnimationInteractiveSequence", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlideAnimationInteractiveSequenceInvalidSequence) {
	utility::string_t paramName = utils->getTestValue("postSlideAnimationInteractiveSequence", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postSlideAnimationInteractiveSequence", "slideIndex");
	std::shared_ptr<InteractiveSequence> paramSequence = utils->getTestValueForClass<InteractiveSequence>("postSlideAnimationInteractiveSequence", "sequence");
	utility::string_t paramPassword = utils->getTestValue("postSlideAnimationInteractiveSequence", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlideAnimationInteractiveSequence", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlideAnimationInteractiveSequence", "storage");
	paramSequence = utils->getInvalidTestValueForClass<>("postSlideAnimationInteractiveSequence", "sequence", paramSequence);
	utils->initialize("postSlideAnimationInteractiveSequence", "sequence", paramSequence);

	bool failed = true;
	try
	{
		api->createAnimationInteractiveSequence(paramName, paramSlideIndex, paramSequence, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlideAnimationInteractiveSequence", "sequence");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlideAnimationInteractiveSequence", "sequence", paramSequence);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlideAnimationInteractiveSequence", "sequence");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlideAnimationInteractiveSequence", "sequence", paramSequence);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlideAnimationInteractiveSequence", "sequence"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlideAnimationInteractiveSequenceInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("postSlideAnimationInteractiveSequence", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postSlideAnimationInteractiveSequence", "slideIndex");
	std::shared_ptr<InteractiveSequence> paramSequence = utils->getTestValueForClass<InteractiveSequence>("postSlideAnimationInteractiveSequence", "sequence");
	utility::string_t paramPassword = utils->getTestValue("postSlideAnimationInteractiveSequence", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlideAnimationInteractiveSequence", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlideAnimationInteractiveSequence", "storage");
	paramPassword = utils->getInvalidTestValue("postSlideAnimationInteractiveSequence", "password", paramPassword);
	utils->initialize("postSlideAnimationInteractiveSequence", "password", paramPassword);

	bool failed = true;
	try
	{
		api->createAnimationInteractiveSequence(paramName, paramSlideIndex, paramSequence, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlideAnimationInteractiveSequence", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlideAnimationInteractiveSequence", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlideAnimationInteractiveSequence", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlideAnimationInteractiveSequence", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlideAnimationInteractiveSequence", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlideAnimationInteractiveSequenceInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("postSlideAnimationInteractiveSequence", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postSlideAnimationInteractiveSequence", "slideIndex");
	std::shared_ptr<InteractiveSequence> paramSequence = utils->getTestValueForClass<InteractiveSequence>("postSlideAnimationInteractiveSequence", "sequence");
	utility::string_t paramPassword = utils->getTestValue("postSlideAnimationInteractiveSequence", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlideAnimationInteractiveSequence", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlideAnimationInteractiveSequence", "storage");
	paramFolder = utils->getInvalidTestValue("postSlideAnimationInteractiveSequence", "folder", paramFolder);
	utils->initialize("postSlideAnimationInteractiveSequence", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->createAnimationInteractiveSequence(paramName, paramSlideIndex, paramSequence, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlideAnimationInteractiveSequence", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlideAnimationInteractiveSequence", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlideAnimationInteractiveSequence", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlideAnimationInteractiveSequence", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlideAnimationInteractiveSequence", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlideAnimationInteractiveSequenceInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("postSlideAnimationInteractiveSequence", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postSlideAnimationInteractiveSequence", "slideIndex");
	std::shared_ptr<InteractiveSequence> paramSequence = utils->getTestValueForClass<InteractiveSequence>("postSlideAnimationInteractiveSequence", "sequence");
	utility::string_t paramPassword = utils->getTestValue("postSlideAnimationInteractiveSequence", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlideAnimationInteractiveSequence", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlideAnimationInteractiveSequence", "storage");
	paramStorage = utils->getInvalidTestValue("postSlideAnimationInteractiveSequence", "storage", paramStorage);
	utils->initialize("postSlideAnimationInteractiveSequence", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->createAnimationInteractiveSequence(paramName, paramSlideIndex, paramSequence, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlideAnimationInteractiveSequence", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlideAnimationInteractiveSequence", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlideAnimationInteractiveSequence", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlideAnimationInteractiveSequence", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlideAnimationInteractiveSequence", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlideAnimationInteractiveSequenceEffect) {
	utility::string_t paramName = utils->getTestValue("postSlideAnimationInteractiveSequenceEffect", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postSlideAnimationInteractiveSequenceEffect", "slideIndex");
	int32_t paramSequenceIndex = utils->getIntTestValue("postSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("postSlideAnimationInteractiveSequenceEffect", "effect");
	utility::string_t paramPassword = utils->getTestValue("postSlideAnimationInteractiveSequenceEffect", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlideAnimationInteractiveSequenceEffect", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlideAnimationInteractiveSequenceEffect", "storage");
	utils->initialize("postSlideAnimationInteractiveSequenceEffect", "");
	std::shared_ptr<SlideAnimation> result = api->createAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffect, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, postSlideAnimationInteractiveSequenceEffectInvalidName) {
	utility::string_t paramName = utils->getTestValue("postSlideAnimationInteractiveSequenceEffect", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postSlideAnimationInteractiveSequenceEffect", "slideIndex");
	int32_t paramSequenceIndex = utils->getIntTestValue("postSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("postSlideAnimationInteractiveSequenceEffect", "effect");
	utility::string_t paramPassword = utils->getTestValue("postSlideAnimationInteractiveSequenceEffect", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlideAnimationInteractiveSequenceEffect", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlideAnimationInteractiveSequenceEffect", "storage");
	paramName = utils->getInvalidTestValue("postSlideAnimationInteractiveSequenceEffect", "name", paramName);
	utils->initialize("postSlideAnimationInteractiveSequenceEffect", "name", paramName);

	bool failed = true;
	try
	{
		api->createAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlideAnimationInteractiveSequenceEffect", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlideAnimationInteractiveSequenceEffect", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlideAnimationInteractiveSequenceEffect", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlideAnimationInteractiveSequenceEffect", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlideAnimationInteractiveSequenceEffect", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlideAnimationInteractiveSequenceEffectInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("postSlideAnimationInteractiveSequenceEffect", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postSlideAnimationInteractiveSequenceEffect", "slideIndex");
	int32_t paramSequenceIndex = utils->getIntTestValue("postSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("postSlideAnimationInteractiveSequenceEffect", "effect");
	utility::string_t paramPassword = utils->getTestValue("postSlideAnimationInteractiveSequenceEffect", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlideAnimationInteractiveSequenceEffect", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlideAnimationInteractiveSequenceEffect", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("postSlideAnimationInteractiveSequenceEffect", "slideIndex", paramSlideIndex).value();
	utils->initialize("postSlideAnimationInteractiveSequenceEffect", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->createAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlideAnimationInteractiveSequenceEffect", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlideAnimationInteractiveSequenceEffect", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlideAnimationInteractiveSequenceEffect", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlideAnimationInteractiveSequenceEffect", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlideAnimationInteractiveSequenceEffect", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlideAnimationInteractiveSequenceEffectInvalidSequenceIndex) {
	utility::string_t paramName = utils->getTestValue("postSlideAnimationInteractiveSequenceEffect", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postSlideAnimationInteractiveSequenceEffect", "slideIndex");
	int32_t paramSequenceIndex = utils->getIntTestValue("postSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("postSlideAnimationInteractiveSequenceEffect", "effect");
	utility::string_t paramPassword = utils->getTestValue("postSlideAnimationInteractiveSequenceEffect", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlideAnimationInteractiveSequenceEffect", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlideAnimationInteractiveSequenceEffect", "storage");
	paramSequenceIndex = utils->getInvalidIntTestValue("postSlideAnimationInteractiveSequenceEffect", "sequenceIndex", paramSequenceIndex).value();
	utils->initialize("postSlideAnimationInteractiveSequenceEffect", "sequenceIndex", paramSequenceIndex);

	bool failed = true;
	try
	{
		api->createAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlideAnimationInteractiveSequenceEffect", "sequenceIndex", paramSequenceIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlideAnimationInteractiveSequenceEffect", "sequenceIndex", paramSequenceIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlideAnimationInteractiveSequenceEffect", "sequenceIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlideAnimationInteractiveSequenceEffectInvalidEffect) {
	utility::string_t paramName = utils->getTestValue("postSlideAnimationInteractiveSequenceEffect", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postSlideAnimationInteractiveSequenceEffect", "slideIndex");
	int32_t paramSequenceIndex = utils->getIntTestValue("postSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("postSlideAnimationInteractiveSequenceEffect", "effect");
	utility::string_t paramPassword = utils->getTestValue("postSlideAnimationInteractiveSequenceEffect", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlideAnimationInteractiveSequenceEffect", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlideAnimationInteractiveSequenceEffect", "storage");
	paramEffect = utils->getInvalidTestValueForClass<>("postSlideAnimationInteractiveSequenceEffect", "effect", paramEffect);
	utils->initialize("postSlideAnimationInteractiveSequenceEffect", "effect", paramEffect);

	bool failed = true;
	try
	{
		api->createAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlideAnimationInteractiveSequenceEffect", "effect");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlideAnimationInteractiveSequenceEffect", "effect", paramEffect);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlideAnimationInteractiveSequenceEffect", "effect");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlideAnimationInteractiveSequenceEffect", "effect", paramEffect);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlideAnimationInteractiveSequenceEffect", "effect"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlideAnimationInteractiveSequenceEffectInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("postSlideAnimationInteractiveSequenceEffect", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postSlideAnimationInteractiveSequenceEffect", "slideIndex");
	int32_t paramSequenceIndex = utils->getIntTestValue("postSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("postSlideAnimationInteractiveSequenceEffect", "effect");
	utility::string_t paramPassword = utils->getTestValue("postSlideAnimationInteractiveSequenceEffect", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlideAnimationInteractiveSequenceEffect", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlideAnimationInteractiveSequenceEffect", "storage");
	paramPassword = utils->getInvalidTestValue("postSlideAnimationInteractiveSequenceEffect", "password", paramPassword);
	utils->initialize("postSlideAnimationInteractiveSequenceEffect", "password", paramPassword);

	bool failed = true;
	try
	{
		api->createAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlideAnimationInteractiveSequenceEffect", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlideAnimationInteractiveSequenceEffect", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlideAnimationInteractiveSequenceEffect", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlideAnimationInteractiveSequenceEffect", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlideAnimationInteractiveSequenceEffect", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlideAnimationInteractiveSequenceEffectInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("postSlideAnimationInteractiveSequenceEffect", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postSlideAnimationInteractiveSequenceEffect", "slideIndex");
	int32_t paramSequenceIndex = utils->getIntTestValue("postSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("postSlideAnimationInteractiveSequenceEffect", "effect");
	utility::string_t paramPassword = utils->getTestValue("postSlideAnimationInteractiveSequenceEffect", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlideAnimationInteractiveSequenceEffect", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlideAnimationInteractiveSequenceEffect", "storage");
	paramFolder = utils->getInvalidTestValue("postSlideAnimationInteractiveSequenceEffect", "folder", paramFolder);
	utils->initialize("postSlideAnimationInteractiveSequenceEffect", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->createAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlideAnimationInteractiveSequenceEffect", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlideAnimationInteractiveSequenceEffect", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlideAnimationInteractiveSequenceEffect", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlideAnimationInteractiveSequenceEffect", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlideAnimationInteractiveSequenceEffect", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlideAnimationInteractiveSequenceEffectInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("postSlideAnimationInteractiveSequenceEffect", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postSlideAnimationInteractiveSequenceEffect", "slideIndex");
	int32_t paramSequenceIndex = utils->getIntTestValue("postSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("postSlideAnimationInteractiveSequenceEffect", "effect");
	utility::string_t paramPassword = utils->getTestValue("postSlideAnimationInteractiveSequenceEffect", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlideAnimationInteractiveSequenceEffect", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlideAnimationInteractiveSequenceEffect", "storage");
	paramStorage = utils->getInvalidTestValue("postSlideAnimationInteractiveSequenceEffect", "storage", paramStorage);
	utils->initialize("postSlideAnimationInteractiveSequenceEffect", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->createAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlideAnimationInteractiveSequenceEffect", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlideAnimationInteractiveSequenceEffect", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlideAnimationInteractiveSequenceEffect", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlideAnimationInteractiveSequenceEffect", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlideAnimationInteractiveSequenceEffect", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlideReplaceText) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("postSlideReplaceText", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("postSlideReplaceText", "slideIndex");
	utility::string_t paramOldValue = utils->getTestValue("postSlideReplaceText", "oldValue");
	utility::string_t paramNewValue = utils->getTestValue("postSlideReplaceText", "newValue");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("postSlideReplaceText", "ignoreCase");
	utility::string_t paramPassword = utils->getTestValue("postSlideReplaceText", "password");
	utils->initialize("postSlideReplaceText", "");
	HttpContent result = api->replaceSlideTextOnline(paramDocument, paramSlideIndex, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, postSlideReplaceTextInvalidDocument) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("postSlideReplaceText", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("postSlideReplaceText", "slideIndex");
	utility::string_t paramOldValue = utils->getTestValue("postSlideReplaceText", "oldValue");
	utility::string_t paramNewValue = utils->getTestValue("postSlideReplaceText", "newValue");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("postSlideReplaceText", "ignoreCase");
	utility::string_t paramPassword = utils->getTestValue("postSlideReplaceText", "password");
	paramDocument = utils->getInvalidBinaryTestValue("postSlideReplaceText", "document", paramDocument);
	utils->initialize("postSlideReplaceText", "document", paramDocument);

	bool failed = true;
	try
	{
		api->replaceSlideTextOnline(paramDocument, paramSlideIndex, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlideReplaceText", "document");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlideReplaceText", "document", paramDocument);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlideReplaceText", "document");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlideReplaceText", "document", paramDocument);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlideReplaceText", "document"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlideReplaceTextInvalidSlideIndex) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("postSlideReplaceText", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("postSlideReplaceText", "slideIndex");
	utility::string_t paramOldValue = utils->getTestValue("postSlideReplaceText", "oldValue");
	utility::string_t paramNewValue = utils->getTestValue("postSlideReplaceText", "newValue");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("postSlideReplaceText", "ignoreCase");
	utility::string_t paramPassword = utils->getTestValue("postSlideReplaceText", "password");
	paramSlideIndex = utils->getInvalidIntTestValue("postSlideReplaceText", "slideIndex", paramSlideIndex).value();
	utils->initialize("postSlideReplaceText", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->replaceSlideTextOnline(paramDocument, paramSlideIndex, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlideReplaceText", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlideReplaceText", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlideReplaceText", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlideReplaceText", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlideReplaceText", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlideReplaceTextInvalidOldValue) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("postSlideReplaceText", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("postSlideReplaceText", "slideIndex");
	utility::string_t paramOldValue = utils->getTestValue("postSlideReplaceText", "oldValue");
	utility::string_t paramNewValue = utils->getTestValue("postSlideReplaceText", "newValue");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("postSlideReplaceText", "ignoreCase");
	utility::string_t paramPassword = utils->getTestValue("postSlideReplaceText", "password");
	paramOldValue = utils->getInvalidTestValue("postSlideReplaceText", "oldValue", paramOldValue);
	utils->initialize("postSlideReplaceText", "oldValue", paramOldValue);

	bool failed = true;
	try
	{
		api->replaceSlideTextOnline(paramDocument, paramSlideIndex, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlideReplaceText", "oldValue");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlideReplaceText", "oldValue", paramOldValue);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlideReplaceText", "oldValue");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlideReplaceText", "oldValue", paramOldValue);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlideReplaceText", "oldValue"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlideReplaceTextInvalidNewValue) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("postSlideReplaceText", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("postSlideReplaceText", "slideIndex");
	utility::string_t paramOldValue = utils->getTestValue("postSlideReplaceText", "oldValue");
	utility::string_t paramNewValue = utils->getTestValue("postSlideReplaceText", "newValue");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("postSlideReplaceText", "ignoreCase");
	utility::string_t paramPassword = utils->getTestValue("postSlideReplaceText", "password");
	paramNewValue = utils->getInvalidTestValue("postSlideReplaceText", "newValue", paramNewValue);
	utils->initialize("postSlideReplaceText", "newValue", paramNewValue);

	bool failed = true;
	try
	{
		api->replaceSlideTextOnline(paramDocument, paramSlideIndex, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlideReplaceText", "newValue");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlideReplaceText", "newValue", paramNewValue);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlideReplaceText", "newValue");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlideReplaceText", "newValue", paramNewValue);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlideReplaceText", "newValue"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlideReplaceTextInvalidIgnoreCase) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("postSlideReplaceText", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("postSlideReplaceText", "slideIndex");
	utility::string_t paramOldValue = utils->getTestValue("postSlideReplaceText", "oldValue");
	utility::string_t paramNewValue = utils->getTestValue("postSlideReplaceText", "newValue");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("postSlideReplaceText", "ignoreCase");
	utility::string_t paramPassword = utils->getTestValue("postSlideReplaceText", "password");
	paramIgnoreCase = utils->getInvalidBoolTestValue("postSlideReplaceText", "ignoreCase", paramIgnoreCase).value();
	utils->initialize("postSlideReplaceText", "ignoreCase", paramIgnoreCase);

	bool failed = true;
	try
	{
		api->replaceSlideTextOnline(paramDocument, paramSlideIndex, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlideReplaceText", "ignoreCase");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlideReplaceText", "ignoreCase", paramIgnoreCase);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlideReplaceText", "ignoreCase");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlideReplaceText", "ignoreCase", paramIgnoreCase);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlideReplaceText", "ignoreCase"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlideReplaceTextInvalidPassword) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("postSlideReplaceText", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("postSlideReplaceText", "slideIndex");
	utility::string_t paramOldValue = utils->getTestValue("postSlideReplaceText", "oldValue");
	utility::string_t paramNewValue = utils->getTestValue("postSlideReplaceText", "newValue");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("postSlideReplaceText", "ignoreCase");
	utility::string_t paramPassword = utils->getTestValue("postSlideReplaceText", "password");
	paramPassword = utils->getInvalidTestValue("postSlideReplaceText", "password", paramPassword);
	utils->initialize("postSlideReplaceText", "password", paramPassword);

	bool failed = true;
	try
	{
		api->replaceSlideTextOnline(paramDocument, paramSlideIndex, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlideReplaceText", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlideReplaceText", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlideReplaceText", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlideReplaceText", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlideReplaceText", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlideSaveAs) {
	utility::string_t paramName = utils->getTestValue("postSlideSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postSlideSaveAs", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("postSlideSaveAs", "format");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("postSlideSaveAs", "options");
	auto paramWidth = utils->getOptionalIntTestValue("postSlideSaveAs", "width");
	auto paramHeight = utils->getOptionalIntTestValue("postSlideSaveAs", "height");
	utility::string_t paramPassword = utils->getTestValue("postSlideSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlideSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlideSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("postSlideSaveAs", "fontsFolder");
	utils->initialize("postSlideSaveAs", "");
	HttpContent result = api->downloadSlide(paramName, paramSlideIndex, paramFormat, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, postSlideSaveAsInvalidName) {
	utility::string_t paramName = utils->getTestValue("postSlideSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postSlideSaveAs", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("postSlideSaveAs", "format");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("postSlideSaveAs", "options");
	auto paramWidth = utils->getOptionalIntTestValue("postSlideSaveAs", "width");
	auto paramHeight = utils->getOptionalIntTestValue("postSlideSaveAs", "height");
	utility::string_t paramPassword = utils->getTestValue("postSlideSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlideSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlideSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("postSlideSaveAs", "fontsFolder");
	paramName = utils->getInvalidTestValue("postSlideSaveAs", "name", paramName);
	utils->initialize("postSlideSaveAs", "name", paramName);

	bool failed = true;
	try
	{
		api->downloadSlide(paramName, paramSlideIndex, paramFormat, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlideSaveAs", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlideSaveAs", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlideSaveAs", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlideSaveAs", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlideSaveAs", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlideSaveAsInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("postSlideSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postSlideSaveAs", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("postSlideSaveAs", "format");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("postSlideSaveAs", "options");
	auto paramWidth = utils->getOptionalIntTestValue("postSlideSaveAs", "width");
	auto paramHeight = utils->getOptionalIntTestValue("postSlideSaveAs", "height");
	utility::string_t paramPassword = utils->getTestValue("postSlideSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlideSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlideSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("postSlideSaveAs", "fontsFolder");
	paramSlideIndex = utils->getInvalidIntTestValue("postSlideSaveAs", "slideIndex", paramSlideIndex).value();
	utils->initialize("postSlideSaveAs", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->downloadSlide(paramName, paramSlideIndex, paramFormat, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlideSaveAs", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlideSaveAs", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlideSaveAs", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlideSaveAs", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlideSaveAs", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlideSaveAsInvalidFormat) {
	utility::string_t paramName = utils->getTestValue("postSlideSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postSlideSaveAs", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("postSlideSaveAs", "format");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("postSlideSaveAs", "options");
	auto paramWidth = utils->getOptionalIntTestValue("postSlideSaveAs", "width");
	auto paramHeight = utils->getOptionalIntTestValue("postSlideSaveAs", "height");
	utility::string_t paramPassword = utils->getTestValue("postSlideSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlideSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlideSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("postSlideSaveAs", "fontsFolder");
	paramFormat = utils->getInvalidTestValue("postSlideSaveAs", "format", paramFormat);
	utils->initialize("postSlideSaveAs", "format", paramFormat);

	bool failed = true;
	try
	{
		api->downloadSlide(paramName, paramSlideIndex, paramFormat, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlideSaveAs", "format");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlideSaveAs", "format", paramFormat);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlideSaveAs", "format");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlideSaveAs", "format", paramFormat);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlideSaveAs", "format"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlideSaveAsInvalidOptions) {
	utility::string_t paramName = utils->getTestValue("postSlideSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postSlideSaveAs", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("postSlideSaveAs", "format");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("postSlideSaveAs", "options");
	auto paramWidth = utils->getOptionalIntTestValue("postSlideSaveAs", "width");
	auto paramHeight = utils->getOptionalIntTestValue("postSlideSaveAs", "height");
	utility::string_t paramPassword = utils->getTestValue("postSlideSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlideSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlideSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("postSlideSaveAs", "fontsFolder");
	paramOptions = utils->getInvalidTestValueForClass<>("postSlideSaveAs", "options", paramOptions);
	utils->initialize("postSlideSaveAs", "options", paramOptions);

	bool failed = true;
	try
	{
		api->downloadSlide(paramName, paramSlideIndex, paramFormat, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlideSaveAs", "options");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlideSaveAs", "options", paramOptions);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlideSaveAs", "options");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlideSaveAs", "options", paramOptions);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlideSaveAs", "options"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlideSaveAsInvalidWidth) {
	utility::string_t paramName = utils->getTestValue("postSlideSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postSlideSaveAs", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("postSlideSaveAs", "format");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("postSlideSaveAs", "options");
	auto paramWidth = utils->getOptionalIntTestValue("postSlideSaveAs", "width");
	auto paramHeight = utils->getOptionalIntTestValue("postSlideSaveAs", "height");
	utility::string_t paramPassword = utils->getTestValue("postSlideSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlideSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlideSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("postSlideSaveAs", "fontsFolder");
	paramWidth = utils->getInvalidIntTestValue("postSlideSaveAs", "width", paramWidth).value();
	utils->initialize("postSlideSaveAs", "width", paramWidth);

	bool failed = true;
	try
	{
		api->downloadSlide(paramName, paramSlideIndex, paramFormat, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlideSaveAs", "width");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlideSaveAs", "width", paramWidth);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlideSaveAs", "width");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlideSaveAs", "width", paramWidth);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlideSaveAs", "width"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlideSaveAsInvalidHeight) {
	utility::string_t paramName = utils->getTestValue("postSlideSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postSlideSaveAs", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("postSlideSaveAs", "format");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("postSlideSaveAs", "options");
	auto paramWidth = utils->getOptionalIntTestValue("postSlideSaveAs", "width");
	auto paramHeight = utils->getOptionalIntTestValue("postSlideSaveAs", "height");
	utility::string_t paramPassword = utils->getTestValue("postSlideSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlideSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlideSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("postSlideSaveAs", "fontsFolder");
	paramHeight = utils->getInvalidIntTestValue("postSlideSaveAs", "height", paramHeight).value();
	utils->initialize("postSlideSaveAs", "height", paramHeight);

	bool failed = true;
	try
	{
		api->downloadSlide(paramName, paramSlideIndex, paramFormat, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlideSaveAs", "height");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlideSaveAs", "height", paramHeight);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlideSaveAs", "height");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlideSaveAs", "height", paramHeight);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlideSaveAs", "height"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlideSaveAsInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("postSlideSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postSlideSaveAs", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("postSlideSaveAs", "format");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("postSlideSaveAs", "options");
	auto paramWidth = utils->getOptionalIntTestValue("postSlideSaveAs", "width");
	auto paramHeight = utils->getOptionalIntTestValue("postSlideSaveAs", "height");
	utility::string_t paramPassword = utils->getTestValue("postSlideSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlideSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlideSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("postSlideSaveAs", "fontsFolder");
	paramPassword = utils->getInvalidTestValue("postSlideSaveAs", "password", paramPassword);
	utils->initialize("postSlideSaveAs", "password", paramPassword);

	bool failed = true;
	try
	{
		api->downloadSlide(paramName, paramSlideIndex, paramFormat, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlideSaveAs", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlideSaveAs", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlideSaveAs", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlideSaveAs", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlideSaveAs", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlideSaveAsInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("postSlideSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postSlideSaveAs", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("postSlideSaveAs", "format");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("postSlideSaveAs", "options");
	auto paramWidth = utils->getOptionalIntTestValue("postSlideSaveAs", "width");
	auto paramHeight = utils->getOptionalIntTestValue("postSlideSaveAs", "height");
	utility::string_t paramPassword = utils->getTestValue("postSlideSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlideSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlideSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("postSlideSaveAs", "fontsFolder");
	paramFolder = utils->getInvalidTestValue("postSlideSaveAs", "folder", paramFolder);
	utils->initialize("postSlideSaveAs", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->downloadSlide(paramName, paramSlideIndex, paramFormat, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlideSaveAs", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlideSaveAs", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlideSaveAs", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlideSaveAs", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlideSaveAs", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlideSaveAsInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("postSlideSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postSlideSaveAs", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("postSlideSaveAs", "format");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("postSlideSaveAs", "options");
	auto paramWidth = utils->getOptionalIntTestValue("postSlideSaveAs", "width");
	auto paramHeight = utils->getOptionalIntTestValue("postSlideSaveAs", "height");
	utility::string_t paramPassword = utils->getTestValue("postSlideSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlideSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlideSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("postSlideSaveAs", "fontsFolder");
	paramStorage = utils->getInvalidTestValue("postSlideSaveAs", "storage", paramStorage);
	utils->initialize("postSlideSaveAs", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->downloadSlide(paramName, paramSlideIndex, paramFormat, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlideSaveAs", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlideSaveAs", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlideSaveAs", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlideSaveAs", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlideSaveAs", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlideSaveAsInvalidFontsFolder) {
	utility::string_t paramName = utils->getTestValue("postSlideSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postSlideSaveAs", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("postSlideSaveAs", "format");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("postSlideSaveAs", "options");
	auto paramWidth = utils->getOptionalIntTestValue("postSlideSaveAs", "width");
	auto paramHeight = utils->getOptionalIntTestValue("postSlideSaveAs", "height");
	utility::string_t paramPassword = utils->getTestValue("postSlideSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlideSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlideSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("postSlideSaveAs", "fontsFolder");
	paramFontsFolder = utils->getInvalidTestValue("postSlideSaveAs", "fontsFolder", paramFontsFolder);
	utils->initialize("postSlideSaveAs", "fontsFolder", paramFontsFolder);

	bool failed = true;
	try
	{
		api->downloadSlide(paramName, paramSlideIndex, paramFormat, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlideSaveAs", "fontsFolder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlideSaveAs", "fontsFolder", paramFontsFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlideSaveAs", "fontsFolder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlideSaveAs", "fontsFolder", paramFontsFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlideSaveAs", "fontsFolder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesAdd) {
	utility::string_t paramName = utils->getTestValue("postSlidesAdd", "name");
	utility::string_t paramLayoutAlias = utils->getTestValue("postSlidesAdd", "layoutAlias");
	auto paramPosition = utils->getOptionalIntTestValue("postSlidesAdd", "position");
	utility::string_t paramPassword = utils->getTestValue("postSlidesAdd", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesAdd", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesAdd", "storage");
	utils->initialize("postSlidesAdd", "");
	std::shared_ptr<Slides> result = api->createSlide(paramName, paramLayoutAlias, paramPosition, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, postSlidesAddInvalidName) {
	utility::string_t paramName = utils->getTestValue("postSlidesAdd", "name");
	utility::string_t paramLayoutAlias = utils->getTestValue("postSlidesAdd", "layoutAlias");
	auto paramPosition = utils->getOptionalIntTestValue("postSlidesAdd", "position");
	utility::string_t paramPassword = utils->getTestValue("postSlidesAdd", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesAdd", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesAdd", "storage");
	paramName = utils->getInvalidTestValue("postSlidesAdd", "name", paramName);
	utils->initialize("postSlidesAdd", "name", paramName);

	bool failed = true;
	try
	{
		api->createSlide(paramName, paramLayoutAlias, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesAdd", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesAdd", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesAdd", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesAdd", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesAdd", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesAddInvalidLayoutAlias) {
	utility::string_t paramName = utils->getTestValue("postSlidesAdd", "name");
	utility::string_t paramLayoutAlias = utils->getTestValue("postSlidesAdd", "layoutAlias");
	auto paramPosition = utils->getOptionalIntTestValue("postSlidesAdd", "position");
	utility::string_t paramPassword = utils->getTestValue("postSlidesAdd", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesAdd", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesAdd", "storage");
	paramLayoutAlias = utils->getInvalidTestValue("postSlidesAdd", "layoutAlias", paramLayoutAlias);
	utils->initialize("postSlidesAdd", "layoutAlias", paramLayoutAlias);

	bool failed = true;
	try
	{
		api->createSlide(paramName, paramLayoutAlias, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesAdd", "layoutAlias");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesAdd", "layoutAlias", paramLayoutAlias);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesAdd", "layoutAlias");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesAdd", "layoutAlias", paramLayoutAlias);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesAdd", "layoutAlias"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesAddInvalidPosition) {
	utility::string_t paramName = utils->getTestValue("postSlidesAdd", "name");
	utility::string_t paramLayoutAlias = utils->getTestValue("postSlidesAdd", "layoutAlias");
	auto paramPosition = utils->getOptionalIntTestValue("postSlidesAdd", "position");
	utility::string_t paramPassword = utils->getTestValue("postSlidesAdd", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesAdd", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesAdd", "storage");
	paramPosition = utils->getInvalidIntTestValue("postSlidesAdd", "position", paramPosition).value();
	utils->initialize("postSlidesAdd", "position", paramPosition);

	bool failed = true;
	try
	{
		api->createSlide(paramName, paramLayoutAlias, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesAdd", "position");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesAdd", "position", paramPosition);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesAdd", "position");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesAdd", "position", paramPosition);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesAdd", "position"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesAddInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("postSlidesAdd", "name");
	utility::string_t paramLayoutAlias = utils->getTestValue("postSlidesAdd", "layoutAlias");
	auto paramPosition = utils->getOptionalIntTestValue("postSlidesAdd", "position");
	utility::string_t paramPassword = utils->getTestValue("postSlidesAdd", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesAdd", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesAdd", "storage");
	paramPassword = utils->getInvalidTestValue("postSlidesAdd", "password", paramPassword);
	utils->initialize("postSlidesAdd", "password", paramPassword);

	bool failed = true;
	try
	{
		api->createSlide(paramName, paramLayoutAlias, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesAdd", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesAdd", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesAdd", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesAdd", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesAdd", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesAddInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("postSlidesAdd", "name");
	utility::string_t paramLayoutAlias = utils->getTestValue("postSlidesAdd", "layoutAlias");
	auto paramPosition = utils->getOptionalIntTestValue("postSlidesAdd", "position");
	utility::string_t paramPassword = utils->getTestValue("postSlidesAdd", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesAdd", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesAdd", "storage");
	paramFolder = utils->getInvalidTestValue("postSlidesAdd", "folder", paramFolder);
	utils->initialize("postSlidesAdd", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->createSlide(paramName, paramLayoutAlias, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesAdd", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesAdd", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesAdd", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesAdd", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesAdd", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesAddInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("postSlidesAdd", "name");
	utility::string_t paramLayoutAlias = utils->getTestValue("postSlidesAdd", "layoutAlias");
	auto paramPosition = utils->getOptionalIntTestValue("postSlidesAdd", "position");
	utility::string_t paramPassword = utils->getTestValue("postSlidesAdd", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesAdd", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesAdd", "storage");
	paramStorage = utils->getInvalidTestValue("postSlidesAdd", "storage", paramStorage);
	utils->initialize("postSlidesAdd", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->createSlide(paramName, paramLayoutAlias, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesAdd", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesAdd", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesAdd", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesAdd", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesAdd", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesConvert) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("postSlidesConvert", "document");
	utility::string_t paramFormat = utils->getTestValue("postSlidesConvert", "format");
	utility::string_t paramPassword = utils->getTestValue("postSlidesConvert", "password");
	utility::string_t paramStorage = utils->getTestValue("postSlidesConvert", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("postSlidesConvert", "fontsFolder");
	utils->initialize("postSlidesConvert", "");
	HttpContent result = api->convert(paramDocument, paramFormat, paramPassword, paramStorage, paramFontsFolder).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, postSlidesConvertInvalidDocument) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("postSlidesConvert", "document");
	utility::string_t paramFormat = utils->getTestValue("postSlidesConvert", "format");
	utility::string_t paramPassword = utils->getTestValue("postSlidesConvert", "password");
	utility::string_t paramStorage = utils->getTestValue("postSlidesConvert", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("postSlidesConvert", "fontsFolder");
	paramDocument = utils->getInvalidBinaryTestValue("postSlidesConvert", "document", paramDocument);
	utils->initialize("postSlidesConvert", "document", paramDocument);

	bool failed = true;
	try
	{
		api->convert(paramDocument, paramFormat, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesConvert", "document");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesConvert", "document", paramDocument);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesConvert", "document");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesConvert", "document", paramDocument);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesConvert", "document"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesConvertInvalidFormat) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("postSlidesConvert", "document");
	utility::string_t paramFormat = utils->getTestValue("postSlidesConvert", "format");
	utility::string_t paramPassword = utils->getTestValue("postSlidesConvert", "password");
	utility::string_t paramStorage = utils->getTestValue("postSlidesConvert", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("postSlidesConvert", "fontsFolder");
	paramFormat = utils->getInvalidTestValue("postSlidesConvert", "format", paramFormat);
	utils->initialize("postSlidesConvert", "format", paramFormat);

	bool failed = true;
	try
	{
		api->convert(paramDocument, paramFormat, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesConvert", "format");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesConvert", "format", paramFormat);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesConvert", "format");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesConvert", "format", paramFormat);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesConvert", "format"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesConvertInvalidPassword) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("postSlidesConvert", "document");
	utility::string_t paramFormat = utils->getTestValue("postSlidesConvert", "format");
	utility::string_t paramPassword = utils->getTestValue("postSlidesConvert", "password");
	utility::string_t paramStorage = utils->getTestValue("postSlidesConvert", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("postSlidesConvert", "fontsFolder");
	paramPassword = utils->getInvalidTestValue("postSlidesConvert", "password", paramPassword);
	utils->initialize("postSlidesConvert", "password", paramPassword);

	bool failed = true;
	try
	{
		api->convert(paramDocument, paramFormat, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesConvert", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesConvert", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesConvert", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesConvert", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesConvert", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesConvertInvalidStorage) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("postSlidesConvert", "document");
	utility::string_t paramFormat = utils->getTestValue("postSlidesConvert", "format");
	utility::string_t paramPassword = utils->getTestValue("postSlidesConvert", "password");
	utility::string_t paramStorage = utils->getTestValue("postSlidesConvert", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("postSlidesConvert", "fontsFolder");
	paramStorage = utils->getInvalidTestValue("postSlidesConvert", "storage", paramStorage);
	utils->initialize("postSlidesConvert", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->convert(paramDocument, paramFormat, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesConvert", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesConvert", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesConvert", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesConvert", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesConvert", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesConvertInvalidFontsFolder) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("postSlidesConvert", "document");
	utility::string_t paramFormat = utils->getTestValue("postSlidesConvert", "format");
	utility::string_t paramPassword = utils->getTestValue("postSlidesConvert", "password");
	utility::string_t paramStorage = utils->getTestValue("postSlidesConvert", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("postSlidesConvert", "fontsFolder");
	paramFontsFolder = utils->getInvalidTestValue("postSlidesConvert", "fontsFolder", paramFontsFolder);
	utils->initialize("postSlidesConvert", "fontsFolder", paramFontsFolder);

	bool failed = true;
	try
	{
		api->convert(paramDocument, paramFormat, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesConvert", "fontsFolder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesConvert", "fontsFolder", paramFontsFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesConvert", "fontsFolder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesConvert", "fontsFolder", paramFontsFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesConvert", "fontsFolder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesCopy) {
	utility::string_t paramName = utils->getTestValue("postSlidesCopy", "name");
	int32_t paramSlideToCopy = utils->getIntTestValue("postSlidesCopy", "slideToCopy");
	auto paramPosition = utils->getOptionalIntTestValue("postSlidesCopy", "position");
	utility::string_t paramSource = utils->getTestValue("postSlidesCopy", "source");
	utility::string_t paramSourcePassword = utils->getTestValue("postSlidesCopy", "sourcePassword");
	utility::string_t paramSourceStorage = utils->getTestValue("postSlidesCopy", "sourceStorage");
	utility::string_t paramPassword = utils->getTestValue("postSlidesCopy", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesCopy", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesCopy", "storage");
	utils->initialize("postSlidesCopy", "");
	std::shared_ptr<Slides> result = api->copySlide(paramName, paramSlideToCopy, paramPosition, paramSource, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, postSlidesCopyInvalidName) {
	utility::string_t paramName = utils->getTestValue("postSlidesCopy", "name");
	int32_t paramSlideToCopy = utils->getIntTestValue("postSlidesCopy", "slideToCopy");
	auto paramPosition = utils->getOptionalIntTestValue("postSlidesCopy", "position");
	utility::string_t paramSource = utils->getTestValue("postSlidesCopy", "source");
	utility::string_t paramSourcePassword = utils->getTestValue("postSlidesCopy", "sourcePassword");
	utility::string_t paramSourceStorage = utils->getTestValue("postSlidesCopy", "sourceStorage");
	utility::string_t paramPassword = utils->getTestValue("postSlidesCopy", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesCopy", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesCopy", "storage");
	paramName = utils->getInvalidTestValue("postSlidesCopy", "name", paramName);
	utils->initialize("postSlidesCopy", "name", paramName);

	bool failed = true;
	try
	{
		api->copySlide(paramName, paramSlideToCopy, paramPosition, paramSource, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesCopy", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesCopy", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesCopy", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesCopy", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesCopy", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesCopyInvalidSlideToCopy) {
	utility::string_t paramName = utils->getTestValue("postSlidesCopy", "name");
	int32_t paramSlideToCopy = utils->getIntTestValue("postSlidesCopy", "slideToCopy");
	auto paramPosition = utils->getOptionalIntTestValue("postSlidesCopy", "position");
	utility::string_t paramSource = utils->getTestValue("postSlidesCopy", "source");
	utility::string_t paramSourcePassword = utils->getTestValue("postSlidesCopy", "sourcePassword");
	utility::string_t paramSourceStorage = utils->getTestValue("postSlidesCopy", "sourceStorage");
	utility::string_t paramPassword = utils->getTestValue("postSlidesCopy", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesCopy", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesCopy", "storage");
	paramSlideToCopy = utils->getInvalidIntTestValue("postSlidesCopy", "slideToCopy", paramSlideToCopy).value();
	utils->initialize("postSlidesCopy", "slideToCopy", paramSlideToCopy);

	bool failed = true;
	try
	{
		api->copySlide(paramName, paramSlideToCopy, paramPosition, paramSource, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesCopy", "slideToCopy");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesCopy", "slideToCopy", paramSlideToCopy);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesCopy", "slideToCopy");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesCopy", "slideToCopy", paramSlideToCopy);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesCopy", "slideToCopy"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesCopyInvalidPosition) {
	utility::string_t paramName = utils->getTestValue("postSlidesCopy", "name");
	int32_t paramSlideToCopy = utils->getIntTestValue("postSlidesCopy", "slideToCopy");
	auto paramPosition = utils->getOptionalIntTestValue("postSlidesCopy", "position");
	utility::string_t paramSource = utils->getTestValue("postSlidesCopy", "source");
	utility::string_t paramSourcePassword = utils->getTestValue("postSlidesCopy", "sourcePassword");
	utility::string_t paramSourceStorage = utils->getTestValue("postSlidesCopy", "sourceStorage");
	utility::string_t paramPassword = utils->getTestValue("postSlidesCopy", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesCopy", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesCopy", "storage");
	paramPosition = utils->getInvalidIntTestValue("postSlidesCopy", "position", paramPosition).value();
	utils->initialize("postSlidesCopy", "position", paramPosition);

	bool failed = true;
	try
	{
		api->copySlide(paramName, paramSlideToCopy, paramPosition, paramSource, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesCopy", "position");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesCopy", "position", paramPosition);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesCopy", "position");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesCopy", "position", paramPosition);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesCopy", "position"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesCopyInvalidSource) {
	utility::string_t paramName = utils->getTestValue("postSlidesCopy", "name");
	int32_t paramSlideToCopy = utils->getIntTestValue("postSlidesCopy", "slideToCopy");
	auto paramPosition = utils->getOptionalIntTestValue("postSlidesCopy", "position");
	utility::string_t paramSource = utils->getTestValue("postSlidesCopy", "source");
	utility::string_t paramSourcePassword = utils->getTestValue("postSlidesCopy", "sourcePassword");
	utility::string_t paramSourceStorage = utils->getTestValue("postSlidesCopy", "sourceStorage");
	utility::string_t paramPassword = utils->getTestValue("postSlidesCopy", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesCopy", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesCopy", "storage");
	paramSource = utils->getInvalidTestValue("postSlidesCopy", "source", paramSource);
	utils->initialize("postSlidesCopy", "source", paramSource);

	bool failed = true;
	try
	{
		api->copySlide(paramName, paramSlideToCopy, paramPosition, paramSource, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesCopy", "source");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesCopy", "source", paramSource);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesCopy", "source");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesCopy", "source", paramSource);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesCopy", "source"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesCopyInvalidSourcePassword) {
	utility::string_t paramName = utils->getTestValue("postSlidesCopy", "name");
	int32_t paramSlideToCopy = utils->getIntTestValue("postSlidesCopy", "slideToCopy");
	auto paramPosition = utils->getOptionalIntTestValue("postSlidesCopy", "position");
	utility::string_t paramSource = utils->getTestValue("postSlidesCopy", "source");
	utility::string_t paramSourcePassword = utils->getTestValue("postSlidesCopy", "sourcePassword");
	utility::string_t paramSourceStorage = utils->getTestValue("postSlidesCopy", "sourceStorage");
	utility::string_t paramPassword = utils->getTestValue("postSlidesCopy", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesCopy", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesCopy", "storage");
	paramSourcePassword = utils->getInvalidTestValue("postSlidesCopy", "sourcePassword", paramSourcePassword);
	utils->initialize("postSlidesCopy", "sourcePassword", paramSourcePassword);

	bool failed = true;
	try
	{
		api->copySlide(paramName, paramSlideToCopy, paramPosition, paramSource, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesCopy", "sourcePassword");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesCopy", "sourcePassword", paramSourcePassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesCopy", "sourcePassword");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesCopy", "sourcePassword", paramSourcePassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesCopy", "sourcePassword"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesCopyInvalidSourceStorage) {
	utility::string_t paramName = utils->getTestValue("postSlidesCopy", "name");
	int32_t paramSlideToCopy = utils->getIntTestValue("postSlidesCopy", "slideToCopy");
	auto paramPosition = utils->getOptionalIntTestValue("postSlidesCopy", "position");
	utility::string_t paramSource = utils->getTestValue("postSlidesCopy", "source");
	utility::string_t paramSourcePassword = utils->getTestValue("postSlidesCopy", "sourcePassword");
	utility::string_t paramSourceStorage = utils->getTestValue("postSlidesCopy", "sourceStorage");
	utility::string_t paramPassword = utils->getTestValue("postSlidesCopy", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesCopy", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesCopy", "storage");
	paramSourceStorage = utils->getInvalidTestValue("postSlidesCopy", "sourceStorage", paramSourceStorage);
	utils->initialize("postSlidesCopy", "sourceStorage", paramSourceStorage);

	bool failed = true;
	try
	{
		api->copySlide(paramName, paramSlideToCopy, paramPosition, paramSource, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesCopy", "sourceStorage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesCopy", "sourceStorage", paramSourceStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesCopy", "sourceStorage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesCopy", "sourceStorage", paramSourceStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesCopy", "sourceStorage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesCopyInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("postSlidesCopy", "name");
	int32_t paramSlideToCopy = utils->getIntTestValue("postSlidesCopy", "slideToCopy");
	auto paramPosition = utils->getOptionalIntTestValue("postSlidesCopy", "position");
	utility::string_t paramSource = utils->getTestValue("postSlidesCopy", "source");
	utility::string_t paramSourcePassword = utils->getTestValue("postSlidesCopy", "sourcePassword");
	utility::string_t paramSourceStorage = utils->getTestValue("postSlidesCopy", "sourceStorage");
	utility::string_t paramPassword = utils->getTestValue("postSlidesCopy", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesCopy", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesCopy", "storage");
	paramPassword = utils->getInvalidTestValue("postSlidesCopy", "password", paramPassword);
	utils->initialize("postSlidesCopy", "password", paramPassword);

	bool failed = true;
	try
	{
		api->copySlide(paramName, paramSlideToCopy, paramPosition, paramSource, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesCopy", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesCopy", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesCopy", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesCopy", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesCopy", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesCopyInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("postSlidesCopy", "name");
	int32_t paramSlideToCopy = utils->getIntTestValue("postSlidesCopy", "slideToCopy");
	auto paramPosition = utils->getOptionalIntTestValue("postSlidesCopy", "position");
	utility::string_t paramSource = utils->getTestValue("postSlidesCopy", "source");
	utility::string_t paramSourcePassword = utils->getTestValue("postSlidesCopy", "sourcePassword");
	utility::string_t paramSourceStorage = utils->getTestValue("postSlidesCopy", "sourceStorage");
	utility::string_t paramPassword = utils->getTestValue("postSlidesCopy", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesCopy", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesCopy", "storage");
	paramFolder = utils->getInvalidTestValue("postSlidesCopy", "folder", paramFolder);
	utils->initialize("postSlidesCopy", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->copySlide(paramName, paramSlideToCopy, paramPosition, paramSource, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesCopy", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesCopy", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesCopy", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesCopy", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesCopy", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesCopyInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("postSlidesCopy", "name");
	int32_t paramSlideToCopy = utils->getIntTestValue("postSlidesCopy", "slideToCopy");
	auto paramPosition = utils->getOptionalIntTestValue("postSlidesCopy", "position");
	utility::string_t paramSource = utils->getTestValue("postSlidesCopy", "source");
	utility::string_t paramSourcePassword = utils->getTestValue("postSlidesCopy", "sourcePassword");
	utility::string_t paramSourceStorage = utils->getTestValue("postSlidesCopy", "sourceStorage");
	utility::string_t paramPassword = utils->getTestValue("postSlidesCopy", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesCopy", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesCopy", "storage");
	paramStorage = utils->getInvalidTestValue("postSlidesCopy", "storage", paramStorage);
	utils->initialize("postSlidesCopy", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->copySlide(paramName, paramSlideToCopy, paramPosition, paramSource, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesCopy", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesCopy", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesCopy", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesCopy", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesCopy", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesDocument) {
	utility::string_t paramName = utils->getTestValue("postSlidesDocument", "name");
	std::shared_ptr<HttpContent> paramData = utils->getBinaryTestValue("postSlidesDocument", "data");
	utility::string_t paramInputPassword = utils->getTestValue("postSlidesDocument", "inputPassword");
	utility::string_t paramPassword = utils->getTestValue("postSlidesDocument", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesDocument", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesDocument", "storage");
	utils->initialize("postSlidesDocument", "");
	std::shared_ptr<Document> result = api->createPresentation(paramName, paramData, paramInputPassword, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, postSlidesDocumentInvalidName) {
	utility::string_t paramName = utils->getTestValue("postSlidesDocument", "name");
	std::shared_ptr<HttpContent> paramData = utils->getBinaryTestValue("postSlidesDocument", "data");
	utility::string_t paramInputPassword = utils->getTestValue("postSlidesDocument", "inputPassword");
	utility::string_t paramPassword = utils->getTestValue("postSlidesDocument", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesDocument", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesDocument", "storage");
	paramName = utils->getInvalidTestValue("postSlidesDocument", "name", paramName);
	utils->initialize("postSlidesDocument", "name", paramName);

	bool failed = true;
	try
	{
		api->createPresentation(paramName, paramData, paramInputPassword, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesDocument", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesDocument", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesDocument", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesDocument", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesDocument", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesDocumentInvalidData) {
	utility::string_t paramName = utils->getTestValue("postSlidesDocument", "name");
	std::shared_ptr<HttpContent> paramData = utils->getBinaryTestValue("postSlidesDocument", "data");
	utility::string_t paramInputPassword = utils->getTestValue("postSlidesDocument", "inputPassword");
	utility::string_t paramPassword = utils->getTestValue("postSlidesDocument", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesDocument", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesDocument", "storage");
	paramData = utils->getInvalidBinaryTestValue("postSlidesDocument", "data", paramData);
	utils->initialize("postSlidesDocument", "data", paramData);

	bool failed = true;
	try
	{
		api->createPresentation(paramName, paramData, paramInputPassword, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesDocument", "data");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesDocument", "data", paramData);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesDocument", "data");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesDocument", "data", paramData);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesDocument", "data"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesDocumentInvalidInputPassword) {
	utility::string_t paramName = utils->getTestValue("postSlidesDocument", "name");
	std::shared_ptr<HttpContent> paramData = utils->getBinaryTestValue("postSlidesDocument", "data");
	utility::string_t paramInputPassword = utils->getTestValue("postSlidesDocument", "inputPassword");
	utility::string_t paramPassword = utils->getTestValue("postSlidesDocument", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesDocument", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesDocument", "storage");
	paramInputPassword = utils->getInvalidTestValue("postSlidesDocument", "inputPassword", paramInputPassword);
	utils->initialize("postSlidesDocument", "inputPassword", paramInputPassword);

	bool failed = true;
	try
	{
		api->createPresentation(paramName, paramData, paramInputPassword, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesDocument", "inputPassword");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesDocument", "inputPassword", paramInputPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesDocument", "inputPassword");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesDocument", "inputPassword", paramInputPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesDocument", "inputPassword"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesDocumentInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("postSlidesDocument", "name");
	std::shared_ptr<HttpContent> paramData = utils->getBinaryTestValue("postSlidesDocument", "data");
	utility::string_t paramInputPassword = utils->getTestValue("postSlidesDocument", "inputPassword");
	utility::string_t paramPassword = utils->getTestValue("postSlidesDocument", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesDocument", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesDocument", "storage");
	paramPassword = utils->getInvalidTestValue("postSlidesDocument", "password", paramPassword);
	utils->initialize("postSlidesDocument", "password", paramPassword);

	bool failed = true;
	try
	{
		api->createPresentation(paramName, paramData, paramInputPassword, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesDocument", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesDocument", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesDocument", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesDocument", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesDocument", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesDocumentInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("postSlidesDocument", "name");
	std::shared_ptr<HttpContent> paramData = utils->getBinaryTestValue("postSlidesDocument", "data");
	utility::string_t paramInputPassword = utils->getTestValue("postSlidesDocument", "inputPassword");
	utility::string_t paramPassword = utils->getTestValue("postSlidesDocument", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesDocument", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesDocument", "storage");
	paramFolder = utils->getInvalidTestValue("postSlidesDocument", "folder", paramFolder);
	utils->initialize("postSlidesDocument", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->createPresentation(paramName, paramData, paramInputPassword, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesDocument", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesDocument", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesDocument", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesDocument", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesDocument", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesDocumentInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("postSlidesDocument", "name");
	std::shared_ptr<HttpContent> paramData = utils->getBinaryTestValue("postSlidesDocument", "data");
	utility::string_t paramInputPassword = utils->getTestValue("postSlidesDocument", "inputPassword");
	utility::string_t paramPassword = utils->getTestValue("postSlidesDocument", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesDocument", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesDocument", "storage");
	paramStorage = utils->getInvalidTestValue("postSlidesDocument", "storage", paramStorage);
	utils->initialize("postSlidesDocument", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->createPresentation(paramName, paramData, paramInputPassword, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesDocument", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesDocument", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesDocument", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesDocument", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesDocument", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesDocumentFromHtml) {
	utility::string_t paramName = utils->getTestValue("postSlidesDocumentFromHtml", "name");
	utility::string_t paramHtml = utils->getTestValue("postSlidesDocumentFromHtml", "html");
	utility::string_t paramPassword = utils->getTestValue("postSlidesDocumentFromHtml", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesDocumentFromHtml", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesDocumentFromHtml", "storage");
	utils->initialize("postSlidesDocumentFromHtml", "");
	std::shared_ptr<Document> result = api->importFromHtml(paramName, paramHtml, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, postSlidesDocumentFromHtmlInvalidName) {
	utility::string_t paramName = utils->getTestValue("postSlidesDocumentFromHtml", "name");
	utility::string_t paramHtml = utils->getTestValue("postSlidesDocumentFromHtml", "html");
	utility::string_t paramPassword = utils->getTestValue("postSlidesDocumentFromHtml", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesDocumentFromHtml", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesDocumentFromHtml", "storage");
	paramName = utils->getInvalidTestValue("postSlidesDocumentFromHtml", "name", paramName);
	utils->initialize("postSlidesDocumentFromHtml", "name", paramName);

	bool failed = true;
	try
	{
		api->importFromHtml(paramName, paramHtml, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesDocumentFromHtml", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesDocumentFromHtml", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesDocumentFromHtml", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesDocumentFromHtml", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesDocumentFromHtml", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesDocumentFromHtmlInvalidHtml) {
	utility::string_t paramName = utils->getTestValue("postSlidesDocumentFromHtml", "name");
	utility::string_t paramHtml = utils->getTestValue("postSlidesDocumentFromHtml", "html");
	utility::string_t paramPassword = utils->getTestValue("postSlidesDocumentFromHtml", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesDocumentFromHtml", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesDocumentFromHtml", "storage");
	paramHtml = utils->getInvalidTestValue("postSlidesDocumentFromHtml", "html", paramHtml);
	utils->initialize("postSlidesDocumentFromHtml", "html", paramHtml);

	bool failed = true;
	try
	{
		api->importFromHtml(paramName, paramHtml, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesDocumentFromHtml", "html");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesDocumentFromHtml", "html", paramHtml);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesDocumentFromHtml", "html");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesDocumentFromHtml", "html", paramHtml);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesDocumentFromHtml", "html"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesDocumentFromHtmlInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("postSlidesDocumentFromHtml", "name");
	utility::string_t paramHtml = utils->getTestValue("postSlidesDocumentFromHtml", "html");
	utility::string_t paramPassword = utils->getTestValue("postSlidesDocumentFromHtml", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesDocumentFromHtml", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesDocumentFromHtml", "storage");
	paramPassword = utils->getInvalidTestValue("postSlidesDocumentFromHtml", "password", paramPassword);
	utils->initialize("postSlidesDocumentFromHtml", "password", paramPassword);

	bool failed = true;
	try
	{
		api->importFromHtml(paramName, paramHtml, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesDocumentFromHtml", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesDocumentFromHtml", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesDocumentFromHtml", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesDocumentFromHtml", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesDocumentFromHtml", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesDocumentFromHtmlInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("postSlidesDocumentFromHtml", "name");
	utility::string_t paramHtml = utils->getTestValue("postSlidesDocumentFromHtml", "html");
	utility::string_t paramPassword = utils->getTestValue("postSlidesDocumentFromHtml", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesDocumentFromHtml", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesDocumentFromHtml", "storage");
	paramFolder = utils->getInvalidTestValue("postSlidesDocumentFromHtml", "folder", paramFolder);
	utils->initialize("postSlidesDocumentFromHtml", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->importFromHtml(paramName, paramHtml, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesDocumentFromHtml", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesDocumentFromHtml", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesDocumentFromHtml", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesDocumentFromHtml", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesDocumentFromHtml", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesDocumentFromHtmlInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("postSlidesDocumentFromHtml", "name");
	utility::string_t paramHtml = utils->getTestValue("postSlidesDocumentFromHtml", "html");
	utility::string_t paramPassword = utils->getTestValue("postSlidesDocumentFromHtml", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesDocumentFromHtml", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesDocumentFromHtml", "storage");
	paramStorage = utils->getInvalidTestValue("postSlidesDocumentFromHtml", "storage", paramStorage);
	utils->initialize("postSlidesDocumentFromHtml", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->importFromHtml(paramName, paramHtml, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesDocumentFromHtml", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesDocumentFromHtml", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesDocumentFromHtml", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesDocumentFromHtml", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesDocumentFromHtml", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesDocumentFromPdf) {
	utility::string_t paramName = utils->getTestValue("postSlidesDocumentFromPdf", "name");
	std::shared_ptr<HttpContent> paramPdf = utils->getBinaryTestValue("postSlidesDocumentFromPdf", "pdf");
	utility::string_t paramPassword = utils->getTestValue("postSlidesDocumentFromPdf", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesDocumentFromPdf", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesDocumentFromPdf", "storage");
	utils->initialize("postSlidesDocumentFromPdf", "");
	std::shared_ptr<Document> result = api->importFromPdf(paramName, paramPdf, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, postSlidesDocumentFromPdfInvalidName) {
	utility::string_t paramName = utils->getTestValue("postSlidesDocumentFromPdf", "name");
	std::shared_ptr<HttpContent> paramPdf = utils->getBinaryTestValue("postSlidesDocumentFromPdf", "pdf");
	utility::string_t paramPassword = utils->getTestValue("postSlidesDocumentFromPdf", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesDocumentFromPdf", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesDocumentFromPdf", "storage");
	paramName = utils->getInvalidTestValue("postSlidesDocumentFromPdf", "name", paramName);
	utils->initialize("postSlidesDocumentFromPdf", "name", paramName);

	bool failed = true;
	try
	{
		api->importFromPdf(paramName, paramPdf, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesDocumentFromPdf", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesDocumentFromPdf", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesDocumentFromPdf", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesDocumentFromPdf", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesDocumentFromPdf", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesDocumentFromPdfInvalidPdf) {
	utility::string_t paramName = utils->getTestValue("postSlidesDocumentFromPdf", "name");
	std::shared_ptr<HttpContent> paramPdf = utils->getBinaryTestValue("postSlidesDocumentFromPdf", "pdf");
	utility::string_t paramPassword = utils->getTestValue("postSlidesDocumentFromPdf", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesDocumentFromPdf", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesDocumentFromPdf", "storage");
	paramPdf = utils->getInvalidBinaryTestValue("postSlidesDocumentFromPdf", "pdf", paramPdf);
	utils->initialize("postSlidesDocumentFromPdf", "pdf", paramPdf);

	bool failed = true;
	try
	{
		api->importFromPdf(paramName, paramPdf, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesDocumentFromPdf", "pdf");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesDocumentFromPdf", "pdf", paramPdf);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesDocumentFromPdf", "pdf");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesDocumentFromPdf", "pdf", paramPdf);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesDocumentFromPdf", "pdf"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesDocumentFromPdfInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("postSlidesDocumentFromPdf", "name");
	std::shared_ptr<HttpContent> paramPdf = utils->getBinaryTestValue("postSlidesDocumentFromPdf", "pdf");
	utility::string_t paramPassword = utils->getTestValue("postSlidesDocumentFromPdf", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesDocumentFromPdf", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesDocumentFromPdf", "storage");
	paramPassword = utils->getInvalidTestValue("postSlidesDocumentFromPdf", "password", paramPassword);
	utils->initialize("postSlidesDocumentFromPdf", "password", paramPassword);

	bool failed = true;
	try
	{
		api->importFromPdf(paramName, paramPdf, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesDocumentFromPdf", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesDocumentFromPdf", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesDocumentFromPdf", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesDocumentFromPdf", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesDocumentFromPdf", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesDocumentFromPdfInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("postSlidesDocumentFromPdf", "name");
	std::shared_ptr<HttpContent> paramPdf = utils->getBinaryTestValue("postSlidesDocumentFromPdf", "pdf");
	utility::string_t paramPassword = utils->getTestValue("postSlidesDocumentFromPdf", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesDocumentFromPdf", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesDocumentFromPdf", "storage");
	paramFolder = utils->getInvalidTestValue("postSlidesDocumentFromPdf", "folder", paramFolder);
	utils->initialize("postSlidesDocumentFromPdf", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->importFromPdf(paramName, paramPdf, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesDocumentFromPdf", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesDocumentFromPdf", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesDocumentFromPdf", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesDocumentFromPdf", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesDocumentFromPdf", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesDocumentFromPdfInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("postSlidesDocumentFromPdf", "name");
	std::shared_ptr<HttpContent> paramPdf = utils->getBinaryTestValue("postSlidesDocumentFromPdf", "pdf");
	utility::string_t paramPassword = utils->getTestValue("postSlidesDocumentFromPdf", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesDocumentFromPdf", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesDocumentFromPdf", "storage");
	paramStorage = utils->getInvalidTestValue("postSlidesDocumentFromPdf", "storage", paramStorage);
	utils->initialize("postSlidesDocumentFromPdf", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->importFromPdf(paramName, paramPdf, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesDocumentFromPdf", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesDocumentFromPdf", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesDocumentFromPdf", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesDocumentFromPdf", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesDocumentFromPdf", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesDocumentFromSource) {
	utility::string_t paramName = utils->getTestValue("postSlidesDocumentFromSource", "name");
	utility::string_t paramSourcePath = utils->getTestValue("postSlidesDocumentFromSource", "sourcePath");
	utility::string_t paramSourcePassword = utils->getTestValue("postSlidesDocumentFromSource", "sourcePassword");
	utility::string_t paramSourceStorage = utils->getTestValue("postSlidesDocumentFromSource", "sourceStorage");
	utility::string_t paramPassword = utils->getTestValue("postSlidesDocumentFromSource", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesDocumentFromSource", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesDocumentFromSource", "storage");
	utils->initialize("postSlidesDocumentFromSource", "");
	std::shared_ptr<Document> result = api->createPresentationFromSource(paramName, paramSourcePath, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, postSlidesDocumentFromSourceInvalidName) {
	utility::string_t paramName = utils->getTestValue("postSlidesDocumentFromSource", "name");
	utility::string_t paramSourcePath = utils->getTestValue("postSlidesDocumentFromSource", "sourcePath");
	utility::string_t paramSourcePassword = utils->getTestValue("postSlidesDocumentFromSource", "sourcePassword");
	utility::string_t paramSourceStorage = utils->getTestValue("postSlidesDocumentFromSource", "sourceStorage");
	utility::string_t paramPassword = utils->getTestValue("postSlidesDocumentFromSource", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesDocumentFromSource", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesDocumentFromSource", "storage");
	paramName = utils->getInvalidTestValue("postSlidesDocumentFromSource", "name", paramName);
	utils->initialize("postSlidesDocumentFromSource", "name", paramName);

	bool failed = true;
	try
	{
		api->createPresentationFromSource(paramName, paramSourcePath, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesDocumentFromSource", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesDocumentFromSource", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesDocumentFromSource", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesDocumentFromSource", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesDocumentFromSource", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesDocumentFromSourceInvalidSourcePath) {
	utility::string_t paramName = utils->getTestValue("postSlidesDocumentFromSource", "name");
	utility::string_t paramSourcePath = utils->getTestValue("postSlidesDocumentFromSource", "sourcePath");
	utility::string_t paramSourcePassword = utils->getTestValue("postSlidesDocumentFromSource", "sourcePassword");
	utility::string_t paramSourceStorage = utils->getTestValue("postSlidesDocumentFromSource", "sourceStorage");
	utility::string_t paramPassword = utils->getTestValue("postSlidesDocumentFromSource", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesDocumentFromSource", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesDocumentFromSource", "storage");
	paramSourcePath = utils->getInvalidTestValue("postSlidesDocumentFromSource", "sourcePath", paramSourcePath);
	utils->initialize("postSlidesDocumentFromSource", "sourcePath", paramSourcePath);

	bool failed = true;
	try
	{
		api->createPresentationFromSource(paramName, paramSourcePath, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesDocumentFromSource", "sourcePath");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesDocumentFromSource", "sourcePath", paramSourcePath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesDocumentFromSource", "sourcePath");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesDocumentFromSource", "sourcePath", paramSourcePath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesDocumentFromSource", "sourcePath"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesDocumentFromSourceInvalidSourcePassword) {
	utility::string_t paramName = utils->getTestValue("postSlidesDocumentFromSource", "name");
	utility::string_t paramSourcePath = utils->getTestValue("postSlidesDocumentFromSource", "sourcePath");
	utility::string_t paramSourcePassword = utils->getTestValue("postSlidesDocumentFromSource", "sourcePassword");
	utility::string_t paramSourceStorage = utils->getTestValue("postSlidesDocumentFromSource", "sourceStorage");
	utility::string_t paramPassword = utils->getTestValue("postSlidesDocumentFromSource", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesDocumentFromSource", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesDocumentFromSource", "storage");
	paramSourcePassword = utils->getInvalidTestValue("postSlidesDocumentFromSource", "sourcePassword", paramSourcePassword);
	utils->initialize("postSlidesDocumentFromSource", "sourcePassword", paramSourcePassword);

	bool failed = true;
	try
	{
		api->createPresentationFromSource(paramName, paramSourcePath, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesDocumentFromSource", "sourcePassword");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesDocumentFromSource", "sourcePassword", paramSourcePassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesDocumentFromSource", "sourcePassword");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesDocumentFromSource", "sourcePassword", paramSourcePassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesDocumentFromSource", "sourcePassword"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesDocumentFromSourceInvalidSourceStorage) {
	utility::string_t paramName = utils->getTestValue("postSlidesDocumentFromSource", "name");
	utility::string_t paramSourcePath = utils->getTestValue("postSlidesDocumentFromSource", "sourcePath");
	utility::string_t paramSourcePassword = utils->getTestValue("postSlidesDocumentFromSource", "sourcePassword");
	utility::string_t paramSourceStorage = utils->getTestValue("postSlidesDocumentFromSource", "sourceStorage");
	utility::string_t paramPassword = utils->getTestValue("postSlidesDocumentFromSource", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesDocumentFromSource", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesDocumentFromSource", "storage");
	paramSourceStorage = utils->getInvalidTestValue("postSlidesDocumentFromSource", "sourceStorage", paramSourceStorage);
	utils->initialize("postSlidesDocumentFromSource", "sourceStorage", paramSourceStorage);

	bool failed = true;
	try
	{
		api->createPresentationFromSource(paramName, paramSourcePath, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesDocumentFromSource", "sourceStorage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesDocumentFromSource", "sourceStorage", paramSourceStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesDocumentFromSource", "sourceStorage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesDocumentFromSource", "sourceStorage", paramSourceStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesDocumentFromSource", "sourceStorage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesDocumentFromSourceInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("postSlidesDocumentFromSource", "name");
	utility::string_t paramSourcePath = utils->getTestValue("postSlidesDocumentFromSource", "sourcePath");
	utility::string_t paramSourcePassword = utils->getTestValue("postSlidesDocumentFromSource", "sourcePassword");
	utility::string_t paramSourceStorage = utils->getTestValue("postSlidesDocumentFromSource", "sourceStorage");
	utility::string_t paramPassword = utils->getTestValue("postSlidesDocumentFromSource", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesDocumentFromSource", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesDocumentFromSource", "storage");
	paramPassword = utils->getInvalidTestValue("postSlidesDocumentFromSource", "password", paramPassword);
	utils->initialize("postSlidesDocumentFromSource", "password", paramPassword);

	bool failed = true;
	try
	{
		api->createPresentationFromSource(paramName, paramSourcePath, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesDocumentFromSource", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesDocumentFromSource", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesDocumentFromSource", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesDocumentFromSource", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesDocumentFromSource", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesDocumentFromSourceInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("postSlidesDocumentFromSource", "name");
	utility::string_t paramSourcePath = utils->getTestValue("postSlidesDocumentFromSource", "sourcePath");
	utility::string_t paramSourcePassword = utils->getTestValue("postSlidesDocumentFromSource", "sourcePassword");
	utility::string_t paramSourceStorage = utils->getTestValue("postSlidesDocumentFromSource", "sourceStorage");
	utility::string_t paramPassword = utils->getTestValue("postSlidesDocumentFromSource", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesDocumentFromSource", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesDocumentFromSource", "storage");
	paramFolder = utils->getInvalidTestValue("postSlidesDocumentFromSource", "folder", paramFolder);
	utils->initialize("postSlidesDocumentFromSource", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->createPresentationFromSource(paramName, paramSourcePath, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesDocumentFromSource", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesDocumentFromSource", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesDocumentFromSource", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesDocumentFromSource", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesDocumentFromSource", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesDocumentFromSourceInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("postSlidesDocumentFromSource", "name");
	utility::string_t paramSourcePath = utils->getTestValue("postSlidesDocumentFromSource", "sourcePath");
	utility::string_t paramSourcePassword = utils->getTestValue("postSlidesDocumentFromSource", "sourcePassword");
	utility::string_t paramSourceStorage = utils->getTestValue("postSlidesDocumentFromSource", "sourceStorage");
	utility::string_t paramPassword = utils->getTestValue("postSlidesDocumentFromSource", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesDocumentFromSource", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesDocumentFromSource", "storage");
	paramStorage = utils->getInvalidTestValue("postSlidesDocumentFromSource", "storage", paramStorage);
	utils->initialize("postSlidesDocumentFromSource", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->createPresentationFromSource(paramName, paramSourcePath, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesDocumentFromSource", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesDocumentFromSource", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesDocumentFromSource", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesDocumentFromSource", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesDocumentFromSource", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesDocumentFromTemplate) {
	utility::string_t paramName = utils->getTestValue("postSlidesDocumentFromTemplate", "name");
	utility::string_t paramTemplatePath = utils->getTestValue("postSlidesDocumentFromTemplate", "templatePath");
	utility::string_t paramData = utils->getTestValue("postSlidesDocumentFromTemplate", "data");
	utility::string_t paramTemplatePassword = utils->getTestValue("postSlidesDocumentFromTemplate", "templatePassword");
	utility::string_t paramTemplateStorage = utils->getTestValue("postSlidesDocumentFromTemplate", "templateStorage");
	auto paramIsImageDataEmbedded = utils->getOptionalBoolTestValue("postSlidesDocumentFromTemplate", "isImageDataEmbedded");
	utility::string_t paramPassword = utils->getTestValue("postSlidesDocumentFromTemplate", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesDocumentFromTemplate", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesDocumentFromTemplate", "storage");
	utils->initialize("postSlidesDocumentFromTemplate", "");
	std::shared_ptr<Document> result = api->createPresentationFromTemplate(paramName, paramTemplatePath, paramData, paramTemplatePassword, paramTemplateStorage, paramIsImageDataEmbedded, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, postSlidesDocumentFromTemplateInvalidName) {
	utility::string_t paramName = utils->getTestValue("postSlidesDocumentFromTemplate", "name");
	utility::string_t paramTemplatePath = utils->getTestValue("postSlidesDocumentFromTemplate", "templatePath");
	utility::string_t paramData = utils->getTestValue("postSlidesDocumentFromTemplate", "data");
	utility::string_t paramTemplatePassword = utils->getTestValue("postSlidesDocumentFromTemplate", "templatePassword");
	utility::string_t paramTemplateStorage = utils->getTestValue("postSlidesDocumentFromTemplate", "templateStorage");
	auto paramIsImageDataEmbedded = utils->getOptionalBoolTestValue("postSlidesDocumentFromTemplate", "isImageDataEmbedded");
	utility::string_t paramPassword = utils->getTestValue("postSlidesDocumentFromTemplate", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesDocumentFromTemplate", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesDocumentFromTemplate", "storage");
	paramName = utils->getInvalidTestValue("postSlidesDocumentFromTemplate", "name", paramName);
	utils->initialize("postSlidesDocumentFromTemplate", "name", paramName);

	bool failed = true;
	try
	{
		api->createPresentationFromTemplate(paramName, paramTemplatePath, paramData, paramTemplatePassword, paramTemplateStorage, paramIsImageDataEmbedded, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesDocumentFromTemplate", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesDocumentFromTemplate", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesDocumentFromTemplate", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesDocumentFromTemplate", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesDocumentFromTemplate", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesDocumentFromTemplateInvalidTemplatePath) {
	utility::string_t paramName = utils->getTestValue("postSlidesDocumentFromTemplate", "name");
	utility::string_t paramTemplatePath = utils->getTestValue("postSlidesDocumentFromTemplate", "templatePath");
	utility::string_t paramData = utils->getTestValue("postSlidesDocumentFromTemplate", "data");
	utility::string_t paramTemplatePassword = utils->getTestValue("postSlidesDocumentFromTemplate", "templatePassword");
	utility::string_t paramTemplateStorage = utils->getTestValue("postSlidesDocumentFromTemplate", "templateStorage");
	auto paramIsImageDataEmbedded = utils->getOptionalBoolTestValue("postSlidesDocumentFromTemplate", "isImageDataEmbedded");
	utility::string_t paramPassword = utils->getTestValue("postSlidesDocumentFromTemplate", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesDocumentFromTemplate", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesDocumentFromTemplate", "storage");
	paramTemplatePath = utils->getInvalidTestValue("postSlidesDocumentFromTemplate", "templatePath", paramTemplatePath);
	utils->initialize("postSlidesDocumentFromTemplate", "templatePath", paramTemplatePath);

	bool failed = true;
	try
	{
		api->createPresentationFromTemplate(paramName, paramTemplatePath, paramData, paramTemplatePassword, paramTemplateStorage, paramIsImageDataEmbedded, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesDocumentFromTemplate", "templatePath");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesDocumentFromTemplate", "templatePath", paramTemplatePath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesDocumentFromTemplate", "templatePath");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesDocumentFromTemplate", "templatePath", paramTemplatePath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesDocumentFromTemplate", "templatePath"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesDocumentFromTemplateInvalidData) {
	utility::string_t paramName = utils->getTestValue("postSlidesDocumentFromTemplate", "name");
	utility::string_t paramTemplatePath = utils->getTestValue("postSlidesDocumentFromTemplate", "templatePath");
	utility::string_t paramData = utils->getTestValue("postSlidesDocumentFromTemplate", "data");
	utility::string_t paramTemplatePassword = utils->getTestValue("postSlidesDocumentFromTemplate", "templatePassword");
	utility::string_t paramTemplateStorage = utils->getTestValue("postSlidesDocumentFromTemplate", "templateStorage");
	auto paramIsImageDataEmbedded = utils->getOptionalBoolTestValue("postSlidesDocumentFromTemplate", "isImageDataEmbedded");
	utility::string_t paramPassword = utils->getTestValue("postSlidesDocumentFromTemplate", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesDocumentFromTemplate", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesDocumentFromTemplate", "storage");
	paramData = utils->getInvalidTestValue("postSlidesDocumentFromTemplate", "data", paramData);
	utils->initialize("postSlidesDocumentFromTemplate", "data", paramData);

	bool failed = true;
	try
	{
		api->createPresentationFromTemplate(paramName, paramTemplatePath, paramData, paramTemplatePassword, paramTemplateStorage, paramIsImageDataEmbedded, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesDocumentFromTemplate", "data");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesDocumentFromTemplate", "data", paramData);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesDocumentFromTemplate", "data");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesDocumentFromTemplate", "data", paramData);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesDocumentFromTemplate", "data"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesDocumentFromTemplateInvalidTemplatePassword) {
	utility::string_t paramName = utils->getTestValue("postSlidesDocumentFromTemplate", "name");
	utility::string_t paramTemplatePath = utils->getTestValue("postSlidesDocumentFromTemplate", "templatePath");
	utility::string_t paramData = utils->getTestValue("postSlidesDocumentFromTemplate", "data");
	utility::string_t paramTemplatePassword = utils->getTestValue("postSlidesDocumentFromTemplate", "templatePassword");
	utility::string_t paramTemplateStorage = utils->getTestValue("postSlidesDocumentFromTemplate", "templateStorage");
	auto paramIsImageDataEmbedded = utils->getOptionalBoolTestValue("postSlidesDocumentFromTemplate", "isImageDataEmbedded");
	utility::string_t paramPassword = utils->getTestValue("postSlidesDocumentFromTemplate", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesDocumentFromTemplate", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesDocumentFromTemplate", "storage");
	paramTemplatePassword = utils->getInvalidTestValue("postSlidesDocumentFromTemplate", "templatePassword", paramTemplatePassword);
	utils->initialize("postSlidesDocumentFromTemplate", "templatePassword", paramTemplatePassword);

	bool failed = true;
	try
	{
		api->createPresentationFromTemplate(paramName, paramTemplatePath, paramData, paramTemplatePassword, paramTemplateStorage, paramIsImageDataEmbedded, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesDocumentFromTemplate", "templatePassword");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesDocumentFromTemplate", "templatePassword", paramTemplatePassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesDocumentFromTemplate", "templatePassword");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesDocumentFromTemplate", "templatePassword", paramTemplatePassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesDocumentFromTemplate", "templatePassword"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesDocumentFromTemplateInvalidTemplateStorage) {
	utility::string_t paramName = utils->getTestValue("postSlidesDocumentFromTemplate", "name");
	utility::string_t paramTemplatePath = utils->getTestValue("postSlidesDocumentFromTemplate", "templatePath");
	utility::string_t paramData = utils->getTestValue("postSlidesDocumentFromTemplate", "data");
	utility::string_t paramTemplatePassword = utils->getTestValue("postSlidesDocumentFromTemplate", "templatePassword");
	utility::string_t paramTemplateStorage = utils->getTestValue("postSlidesDocumentFromTemplate", "templateStorage");
	auto paramIsImageDataEmbedded = utils->getOptionalBoolTestValue("postSlidesDocumentFromTemplate", "isImageDataEmbedded");
	utility::string_t paramPassword = utils->getTestValue("postSlidesDocumentFromTemplate", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesDocumentFromTemplate", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesDocumentFromTemplate", "storage");
	paramTemplateStorage = utils->getInvalidTestValue("postSlidesDocumentFromTemplate", "templateStorage", paramTemplateStorage);
	utils->initialize("postSlidesDocumentFromTemplate", "templateStorage", paramTemplateStorage);

	bool failed = true;
	try
	{
		api->createPresentationFromTemplate(paramName, paramTemplatePath, paramData, paramTemplatePassword, paramTemplateStorage, paramIsImageDataEmbedded, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesDocumentFromTemplate", "templateStorage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesDocumentFromTemplate", "templateStorage", paramTemplateStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesDocumentFromTemplate", "templateStorage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesDocumentFromTemplate", "templateStorage", paramTemplateStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesDocumentFromTemplate", "templateStorage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesDocumentFromTemplateInvalidIsImageDataEmbedded) {
	utility::string_t paramName = utils->getTestValue("postSlidesDocumentFromTemplate", "name");
	utility::string_t paramTemplatePath = utils->getTestValue("postSlidesDocumentFromTemplate", "templatePath");
	utility::string_t paramData = utils->getTestValue("postSlidesDocumentFromTemplate", "data");
	utility::string_t paramTemplatePassword = utils->getTestValue("postSlidesDocumentFromTemplate", "templatePassword");
	utility::string_t paramTemplateStorage = utils->getTestValue("postSlidesDocumentFromTemplate", "templateStorage");
	auto paramIsImageDataEmbedded = utils->getOptionalBoolTestValue("postSlidesDocumentFromTemplate", "isImageDataEmbedded");
	utility::string_t paramPassword = utils->getTestValue("postSlidesDocumentFromTemplate", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesDocumentFromTemplate", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesDocumentFromTemplate", "storage");
	paramIsImageDataEmbedded = utils->getInvalidBoolTestValue("postSlidesDocumentFromTemplate", "isImageDataEmbedded", paramIsImageDataEmbedded).value();
	utils->initialize("postSlidesDocumentFromTemplate", "isImageDataEmbedded", paramIsImageDataEmbedded);

	bool failed = true;
	try
	{
		api->createPresentationFromTemplate(paramName, paramTemplatePath, paramData, paramTemplatePassword, paramTemplateStorage, paramIsImageDataEmbedded, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesDocumentFromTemplate", "isImageDataEmbedded");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesDocumentFromTemplate", "isImageDataEmbedded", paramIsImageDataEmbedded);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesDocumentFromTemplate", "isImageDataEmbedded");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesDocumentFromTemplate", "isImageDataEmbedded", paramIsImageDataEmbedded);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesDocumentFromTemplate", "isImageDataEmbedded"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesDocumentFromTemplateInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("postSlidesDocumentFromTemplate", "name");
	utility::string_t paramTemplatePath = utils->getTestValue("postSlidesDocumentFromTemplate", "templatePath");
	utility::string_t paramData = utils->getTestValue("postSlidesDocumentFromTemplate", "data");
	utility::string_t paramTemplatePassword = utils->getTestValue("postSlidesDocumentFromTemplate", "templatePassword");
	utility::string_t paramTemplateStorage = utils->getTestValue("postSlidesDocumentFromTemplate", "templateStorage");
	auto paramIsImageDataEmbedded = utils->getOptionalBoolTestValue("postSlidesDocumentFromTemplate", "isImageDataEmbedded");
	utility::string_t paramPassword = utils->getTestValue("postSlidesDocumentFromTemplate", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesDocumentFromTemplate", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesDocumentFromTemplate", "storage");
	paramPassword = utils->getInvalidTestValue("postSlidesDocumentFromTemplate", "password", paramPassword);
	utils->initialize("postSlidesDocumentFromTemplate", "password", paramPassword);

	bool failed = true;
	try
	{
		api->createPresentationFromTemplate(paramName, paramTemplatePath, paramData, paramTemplatePassword, paramTemplateStorage, paramIsImageDataEmbedded, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesDocumentFromTemplate", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesDocumentFromTemplate", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesDocumentFromTemplate", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesDocumentFromTemplate", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesDocumentFromTemplate", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesDocumentFromTemplateInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("postSlidesDocumentFromTemplate", "name");
	utility::string_t paramTemplatePath = utils->getTestValue("postSlidesDocumentFromTemplate", "templatePath");
	utility::string_t paramData = utils->getTestValue("postSlidesDocumentFromTemplate", "data");
	utility::string_t paramTemplatePassword = utils->getTestValue("postSlidesDocumentFromTemplate", "templatePassword");
	utility::string_t paramTemplateStorage = utils->getTestValue("postSlidesDocumentFromTemplate", "templateStorage");
	auto paramIsImageDataEmbedded = utils->getOptionalBoolTestValue("postSlidesDocumentFromTemplate", "isImageDataEmbedded");
	utility::string_t paramPassword = utils->getTestValue("postSlidesDocumentFromTemplate", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesDocumentFromTemplate", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesDocumentFromTemplate", "storage");
	paramFolder = utils->getInvalidTestValue("postSlidesDocumentFromTemplate", "folder", paramFolder);
	utils->initialize("postSlidesDocumentFromTemplate", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->createPresentationFromTemplate(paramName, paramTemplatePath, paramData, paramTemplatePassword, paramTemplateStorage, paramIsImageDataEmbedded, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesDocumentFromTemplate", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesDocumentFromTemplate", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesDocumentFromTemplate", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesDocumentFromTemplate", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesDocumentFromTemplate", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesDocumentFromTemplateInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("postSlidesDocumentFromTemplate", "name");
	utility::string_t paramTemplatePath = utils->getTestValue("postSlidesDocumentFromTemplate", "templatePath");
	utility::string_t paramData = utils->getTestValue("postSlidesDocumentFromTemplate", "data");
	utility::string_t paramTemplatePassword = utils->getTestValue("postSlidesDocumentFromTemplate", "templatePassword");
	utility::string_t paramTemplateStorage = utils->getTestValue("postSlidesDocumentFromTemplate", "templateStorage");
	auto paramIsImageDataEmbedded = utils->getOptionalBoolTestValue("postSlidesDocumentFromTemplate", "isImageDataEmbedded");
	utility::string_t paramPassword = utils->getTestValue("postSlidesDocumentFromTemplate", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesDocumentFromTemplate", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesDocumentFromTemplate", "storage");
	paramStorage = utils->getInvalidTestValue("postSlidesDocumentFromTemplate", "storage", paramStorage);
	utils->initialize("postSlidesDocumentFromTemplate", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->createPresentationFromTemplate(paramName, paramTemplatePath, paramData, paramTemplatePassword, paramTemplateStorage, paramIsImageDataEmbedded, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesDocumentFromTemplate", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesDocumentFromTemplate", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesDocumentFromTemplate", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesDocumentFromTemplate", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesDocumentFromTemplate", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesMerge) {
	std::vector<std::shared_ptr<HttpContent>> paramFiles = utils->getBinArrayTestValue("postSlidesMerge", "files");
	std::shared_ptr<OrderedMergeRequest> paramRequest = utils->getTestValueForClass<OrderedMergeRequest>("postSlidesMerge", "request");
	utility::string_t paramPassword = utils->getTestValue("postSlidesMerge", "password");
	utils->initialize("postSlidesMerge", "");
	HttpContent result = api->mergeOnline(paramFiles, paramRequest, paramPassword).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, postSlidesMergeInvalidFiles) {
	std::vector<std::shared_ptr<HttpContent>> paramFiles = utils->getBinArrayTestValue("postSlidesMerge", "files");
	std::shared_ptr<OrderedMergeRequest> paramRequest = utils->getTestValueForClass<OrderedMergeRequest>("postSlidesMerge", "request");
	utility::string_t paramPassword = utils->getTestValue("postSlidesMerge", "password");
	paramFiles = utils->getInvalidBinArrayTestValue("postSlidesMerge", "files", paramFiles);
	utils->initialize("postSlidesMerge", "files", paramFiles);

	bool failed = true;
	try
	{
		api->mergeOnline(paramFiles, paramRequest, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesMerge", "files");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesMerge", "files", paramFiles);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesMerge", "files");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesMerge", "files", paramFiles);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesMerge", "files"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesMergeInvalidRequest) {
	std::vector<std::shared_ptr<HttpContent>> paramFiles = utils->getBinArrayTestValue("postSlidesMerge", "files");
	std::shared_ptr<OrderedMergeRequest> paramRequest = utils->getTestValueForClass<OrderedMergeRequest>("postSlidesMerge", "request");
	utility::string_t paramPassword = utils->getTestValue("postSlidesMerge", "password");
	paramRequest = utils->getInvalidTestValueForClass<>("postSlidesMerge", "request", paramRequest);
	utils->initialize("postSlidesMerge", "request", paramRequest);

	bool failed = true;
	try
	{
		api->mergeOnline(paramFiles, paramRequest, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesMerge", "request");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesMerge", "request", paramRequest);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesMerge", "request");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesMerge", "request", paramRequest);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesMerge", "request"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesMergeInvalidPassword) {
	std::vector<std::shared_ptr<HttpContent>> paramFiles = utils->getBinArrayTestValue("postSlidesMerge", "files");
	std::shared_ptr<OrderedMergeRequest> paramRequest = utils->getTestValueForClass<OrderedMergeRequest>("postSlidesMerge", "request");
	utility::string_t paramPassword = utils->getTestValue("postSlidesMerge", "password");
	paramPassword = utils->getInvalidTestValue("postSlidesMerge", "password", paramPassword);
	utils->initialize("postSlidesMerge", "password", paramPassword);

	bool failed = true;
	try
	{
		api->mergeOnline(paramFiles, paramRequest, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesMerge", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesMerge", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesMerge", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesMerge", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesMerge", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesPipeline) {
	std::shared_ptr<Pipeline> paramPipeline = utils->getTestValueForClass<Pipeline>("postSlidesPipeline", "pipeline");
	std::vector<std::shared_ptr<HttpContent>> paramFiles = utils->getBinArrayTestValue("postSlidesPipeline", "files");
	utils->initialize("postSlidesPipeline", "");
	HttpContent result = api->pipeline(paramPipeline, paramFiles).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, postSlidesPipelineInvalidPipeline) {
	std::shared_ptr<Pipeline> paramPipeline = utils->getTestValueForClass<Pipeline>("postSlidesPipeline", "pipeline");
	std::vector<std::shared_ptr<HttpContent>> paramFiles = utils->getBinArrayTestValue("postSlidesPipeline", "files");
	paramPipeline = utils->getInvalidTestValueForClass<>("postSlidesPipeline", "pipeline", paramPipeline);
	utils->initialize("postSlidesPipeline", "pipeline", paramPipeline);

	bool failed = true;
	try
	{
		api->pipeline(paramPipeline, paramFiles).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesPipeline", "pipeline");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesPipeline", "pipeline", paramPipeline);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesPipeline", "pipeline");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesPipeline", "pipeline", paramPipeline);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesPipeline", "pipeline"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesPipelineInvalidFiles) {
	std::shared_ptr<Pipeline> paramPipeline = utils->getTestValueForClass<Pipeline>("postSlidesPipeline", "pipeline");
	std::vector<std::shared_ptr<HttpContent>> paramFiles = utils->getBinArrayTestValue("postSlidesPipeline", "files");
	paramFiles = utils->getInvalidBinArrayTestValue("postSlidesPipeline", "files", paramFiles);
	utils->initialize("postSlidesPipeline", "files", paramFiles);

	bool failed = true;
	try
	{
		api->pipeline(paramPipeline, paramFiles).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesPipeline", "files");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesPipeline", "files", paramFiles);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesPipeline", "files");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesPipeline", "files", paramFiles);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesPipeline", "files"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesPresentationReplaceText) {
	utility::string_t paramName = utils->getTestValue("postSlidesPresentationReplaceText", "name");
	utility::string_t paramOldValue = utils->getTestValue("postSlidesPresentationReplaceText", "oldValue");
	utility::string_t paramNewValue = utils->getTestValue("postSlidesPresentationReplaceText", "newValue");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("postSlidesPresentationReplaceText", "ignoreCase");
	utility::string_t paramPassword = utils->getTestValue("postSlidesPresentationReplaceText", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesPresentationReplaceText", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesPresentationReplaceText", "storage");
	utils->initialize("postSlidesPresentationReplaceText", "");
	std::shared_ptr<DocumentReplaceResult> result = api->replacePresentationText(paramName, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, postSlidesPresentationReplaceTextInvalidName) {
	utility::string_t paramName = utils->getTestValue("postSlidesPresentationReplaceText", "name");
	utility::string_t paramOldValue = utils->getTestValue("postSlidesPresentationReplaceText", "oldValue");
	utility::string_t paramNewValue = utils->getTestValue("postSlidesPresentationReplaceText", "newValue");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("postSlidesPresentationReplaceText", "ignoreCase");
	utility::string_t paramPassword = utils->getTestValue("postSlidesPresentationReplaceText", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesPresentationReplaceText", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesPresentationReplaceText", "storage");
	paramName = utils->getInvalidTestValue("postSlidesPresentationReplaceText", "name", paramName);
	utils->initialize("postSlidesPresentationReplaceText", "name", paramName);

	bool failed = true;
	try
	{
		api->replacePresentationText(paramName, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesPresentationReplaceText", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesPresentationReplaceText", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesPresentationReplaceText", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesPresentationReplaceText", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesPresentationReplaceText", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesPresentationReplaceTextInvalidOldValue) {
	utility::string_t paramName = utils->getTestValue("postSlidesPresentationReplaceText", "name");
	utility::string_t paramOldValue = utils->getTestValue("postSlidesPresentationReplaceText", "oldValue");
	utility::string_t paramNewValue = utils->getTestValue("postSlidesPresentationReplaceText", "newValue");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("postSlidesPresentationReplaceText", "ignoreCase");
	utility::string_t paramPassword = utils->getTestValue("postSlidesPresentationReplaceText", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesPresentationReplaceText", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesPresentationReplaceText", "storage");
	paramOldValue = utils->getInvalidTestValue("postSlidesPresentationReplaceText", "oldValue", paramOldValue);
	utils->initialize("postSlidesPresentationReplaceText", "oldValue", paramOldValue);

	bool failed = true;
	try
	{
		api->replacePresentationText(paramName, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesPresentationReplaceText", "oldValue");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesPresentationReplaceText", "oldValue", paramOldValue);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesPresentationReplaceText", "oldValue");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesPresentationReplaceText", "oldValue", paramOldValue);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesPresentationReplaceText", "oldValue"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesPresentationReplaceTextInvalidNewValue) {
	utility::string_t paramName = utils->getTestValue("postSlidesPresentationReplaceText", "name");
	utility::string_t paramOldValue = utils->getTestValue("postSlidesPresentationReplaceText", "oldValue");
	utility::string_t paramNewValue = utils->getTestValue("postSlidesPresentationReplaceText", "newValue");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("postSlidesPresentationReplaceText", "ignoreCase");
	utility::string_t paramPassword = utils->getTestValue("postSlidesPresentationReplaceText", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesPresentationReplaceText", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesPresentationReplaceText", "storage");
	paramNewValue = utils->getInvalidTestValue("postSlidesPresentationReplaceText", "newValue", paramNewValue);
	utils->initialize("postSlidesPresentationReplaceText", "newValue", paramNewValue);

	bool failed = true;
	try
	{
		api->replacePresentationText(paramName, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesPresentationReplaceText", "newValue");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesPresentationReplaceText", "newValue", paramNewValue);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesPresentationReplaceText", "newValue");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesPresentationReplaceText", "newValue", paramNewValue);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesPresentationReplaceText", "newValue"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesPresentationReplaceTextInvalidIgnoreCase) {
	utility::string_t paramName = utils->getTestValue("postSlidesPresentationReplaceText", "name");
	utility::string_t paramOldValue = utils->getTestValue("postSlidesPresentationReplaceText", "oldValue");
	utility::string_t paramNewValue = utils->getTestValue("postSlidesPresentationReplaceText", "newValue");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("postSlidesPresentationReplaceText", "ignoreCase");
	utility::string_t paramPassword = utils->getTestValue("postSlidesPresentationReplaceText", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesPresentationReplaceText", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesPresentationReplaceText", "storage");
	paramIgnoreCase = utils->getInvalidBoolTestValue("postSlidesPresentationReplaceText", "ignoreCase", paramIgnoreCase).value();
	utils->initialize("postSlidesPresentationReplaceText", "ignoreCase", paramIgnoreCase);

	bool failed = true;
	try
	{
		api->replacePresentationText(paramName, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesPresentationReplaceText", "ignoreCase");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesPresentationReplaceText", "ignoreCase", paramIgnoreCase);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesPresentationReplaceText", "ignoreCase");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesPresentationReplaceText", "ignoreCase", paramIgnoreCase);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesPresentationReplaceText", "ignoreCase"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesPresentationReplaceTextInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("postSlidesPresentationReplaceText", "name");
	utility::string_t paramOldValue = utils->getTestValue("postSlidesPresentationReplaceText", "oldValue");
	utility::string_t paramNewValue = utils->getTestValue("postSlidesPresentationReplaceText", "newValue");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("postSlidesPresentationReplaceText", "ignoreCase");
	utility::string_t paramPassword = utils->getTestValue("postSlidesPresentationReplaceText", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesPresentationReplaceText", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesPresentationReplaceText", "storage");
	paramPassword = utils->getInvalidTestValue("postSlidesPresentationReplaceText", "password", paramPassword);
	utils->initialize("postSlidesPresentationReplaceText", "password", paramPassword);

	bool failed = true;
	try
	{
		api->replacePresentationText(paramName, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesPresentationReplaceText", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesPresentationReplaceText", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesPresentationReplaceText", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesPresentationReplaceText", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesPresentationReplaceText", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesPresentationReplaceTextInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("postSlidesPresentationReplaceText", "name");
	utility::string_t paramOldValue = utils->getTestValue("postSlidesPresentationReplaceText", "oldValue");
	utility::string_t paramNewValue = utils->getTestValue("postSlidesPresentationReplaceText", "newValue");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("postSlidesPresentationReplaceText", "ignoreCase");
	utility::string_t paramPassword = utils->getTestValue("postSlidesPresentationReplaceText", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesPresentationReplaceText", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesPresentationReplaceText", "storage");
	paramFolder = utils->getInvalidTestValue("postSlidesPresentationReplaceText", "folder", paramFolder);
	utils->initialize("postSlidesPresentationReplaceText", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->replacePresentationText(paramName, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesPresentationReplaceText", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesPresentationReplaceText", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesPresentationReplaceText", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesPresentationReplaceText", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesPresentationReplaceText", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesPresentationReplaceTextInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("postSlidesPresentationReplaceText", "name");
	utility::string_t paramOldValue = utils->getTestValue("postSlidesPresentationReplaceText", "oldValue");
	utility::string_t paramNewValue = utils->getTestValue("postSlidesPresentationReplaceText", "newValue");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("postSlidesPresentationReplaceText", "ignoreCase");
	utility::string_t paramPassword = utils->getTestValue("postSlidesPresentationReplaceText", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesPresentationReplaceText", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesPresentationReplaceText", "storage");
	paramStorage = utils->getInvalidTestValue("postSlidesPresentationReplaceText", "storage", paramStorage);
	utils->initialize("postSlidesPresentationReplaceText", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->replacePresentationText(paramName, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesPresentationReplaceText", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesPresentationReplaceText", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesPresentationReplaceText", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesPresentationReplaceText", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesPresentationReplaceText", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesReorder) {
	utility::string_t paramName = utils->getTestValue("postSlidesReorder", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postSlidesReorder", "slideIndex");
	int32_t paramNewPosition = utils->getIntTestValue("postSlidesReorder", "newPosition");
	utility::string_t paramPassword = utils->getTestValue("postSlidesReorder", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesReorder", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesReorder", "storage");
	utils->initialize("postSlidesReorder", "");
	std::shared_ptr<Slides> result = api->moveSlide(paramName, paramSlideIndex, paramNewPosition, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, postSlidesReorderInvalidName) {
	utility::string_t paramName = utils->getTestValue("postSlidesReorder", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postSlidesReorder", "slideIndex");
	int32_t paramNewPosition = utils->getIntTestValue("postSlidesReorder", "newPosition");
	utility::string_t paramPassword = utils->getTestValue("postSlidesReorder", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesReorder", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesReorder", "storage");
	paramName = utils->getInvalidTestValue("postSlidesReorder", "name", paramName);
	utils->initialize("postSlidesReorder", "name", paramName);

	bool failed = true;
	try
	{
		api->moveSlide(paramName, paramSlideIndex, paramNewPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesReorder", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesReorder", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesReorder", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesReorder", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesReorder", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesReorderInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("postSlidesReorder", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postSlidesReorder", "slideIndex");
	int32_t paramNewPosition = utils->getIntTestValue("postSlidesReorder", "newPosition");
	utility::string_t paramPassword = utils->getTestValue("postSlidesReorder", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesReorder", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesReorder", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("postSlidesReorder", "slideIndex", paramSlideIndex).value();
	utils->initialize("postSlidesReorder", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->moveSlide(paramName, paramSlideIndex, paramNewPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesReorder", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesReorder", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesReorder", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesReorder", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesReorder", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesReorderInvalidNewPosition) {
	utility::string_t paramName = utils->getTestValue("postSlidesReorder", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postSlidesReorder", "slideIndex");
	int32_t paramNewPosition = utils->getIntTestValue("postSlidesReorder", "newPosition");
	utility::string_t paramPassword = utils->getTestValue("postSlidesReorder", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesReorder", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesReorder", "storage");
	paramNewPosition = utils->getInvalidIntTestValue("postSlidesReorder", "newPosition", paramNewPosition).value();
	utils->initialize("postSlidesReorder", "newPosition", paramNewPosition);

	bool failed = true;
	try
	{
		api->moveSlide(paramName, paramSlideIndex, paramNewPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesReorder", "newPosition");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesReorder", "newPosition", paramNewPosition);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesReorder", "newPosition");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesReorder", "newPosition", paramNewPosition);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesReorder", "newPosition"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesReorderInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("postSlidesReorder", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postSlidesReorder", "slideIndex");
	int32_t paramNewPosition = utils->getIntTestValue("postSlidesReorder", "newPosition");
	utility::string_t paramPassword = utils->getTestValue("postSlidesReorder", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesReorder", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesReorder", "storage");
	paramPassword = utils->getInvalidTestValue("postSlidesReorder", "password", paramPassword);
	utils->initialize("postSlidesReorder", "password", paramPassword);

	bool failed = true;
	try
	{
		api->moveSlide(paramName, paramSlideIndex, paramNewPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesReorder", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesReorder", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesReorder", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesReorder", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesReorder", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesReorderInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("postSlidesReorder", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postSlidesReorder", "slideIndex");
	int32_t paramNewPosition = utils->getIntTestValue("postSlidesReorder", "newPosition");
	utility::string_t paramPassword = utils->getTestValue("postSlidesReorder", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesReorder", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesReorder", "storage");
	paramFolder = utils->getInvalidTestValue("postSlidesReorder", "folder", paramFolder);
	utils->initialize("postSlidesReorder", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->moveSlide(paramName, paramSlideIndex, paramNewPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesReorder", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesReorder", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesReorder", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesReorder", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesReorder", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesReorderInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("postSlidesReorder", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postSlidesReorder", "slideIndex");
	int32_t paramNewPosition = utils->getIntTestValue("postSlidesReorder", "newPosition");
	utility::string_t paramPassword = utils->getTestValue("postSlidesReorder", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesReorder", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesReorder", "storage");
	paramStorage = utils->getInvalidTestValue("postSlidesReorder", "storage", paramStorage);
	utils->initialize("postSlidesReorder", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->moveSlide(paramName, paramSlideIndex, paramNewPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesReorder", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesReorder", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesReorder", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesReorder", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesReorder", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesReorderMany) {
	utility::string_t paramName = utils->getTestValue("postSlidesReorderMany", "name");
	std::vector<int32_t> paramOldPositions = utils->getIntVectorTestValue("postSlidesReorderMany", "oldPositions");
	std::vector<int32_t> paramNewPositions = utils->getIntVectorTestValue("postSlidesReorderMany", "newPositions");
	utility::string_t paramPassword = utils->getTestValue("postSlidesReorderMany", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesReorderMany", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesReorderMany", "storage");
	utils->initialize("postSlidesReorderMany", "");
	std::shared_ptr<Slides> result = api->reorderSlides(paramName, paramOldPositions, paramNewPositions, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, postSlidesReorderManyInvalidName) {
	utility::string_t paramName = utils->getTestValue("postSlidesReorderMany", "name");
	std::vector<int32_t> paramOldPositions = utils->getIntVectorTestValue("postSlidesReorderMany", "oldPositions");
	std::vector<int32_t> paramNewPositions = utils->getIntVectorTestValue("postSlidesReorderMany", "newPositions");
	utility::string_t paramPassword = utils->getTestValue("postSlidesReorderMany", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesReorderMany", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesReorderMany", "storage");
	paramName = utils->getInvalidTestValue("postSlidesReorderMany", "name", paramName);
	utils->initialize("postSlidesReorderMany", "name", paramName);

	bool failed = true;
	try
	{
		api->reorderSlides(paramName, paramOldPositions, paramNewPositions, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesReorderMany", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesReorderMany", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesReorderMany", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesReorderMany", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesReorderMany", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesReorderManyInvalidOldPositions) {
	utility::string_t paramName = utils->getTestValue("postSlidesReorderMany", "name");
	std::vector<int32_t> paramOldPositions = utils->getIntVectorTestValue("postSlidesReorderMany", "oldPositions");
	std::vector<int32_t> paramNewPositions = utils->getIntVectorTestValue("postSlidesReorderMany", "newPositions");
	utility::string_t paramPassword = utils->getTestValue("postSlidesReorderMany", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesReorderMany", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesReorderMany", "storage");
	paramOldPositions = utils->getInvalidIntVectorTestValue("postSlidesReorderMany", "oldPositions", paramOldPositions);
	utils->initialize("postSlidesReorderMany", "oldPositions", paramOldPositions);

	bool failed = true;
	try
	{
		api->reorderSlides(paramName, paramOldPositions, paramNewPositions, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesReorderMany", "oldPositions");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesReorderMany", "oldPositions", paramOldPositions);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesReorderMany", "oldPositions");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesReorderMany", "oldPositions", paramOldPositions);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesReorderMany", "oldPositions"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesReorderManyInvalidNewPositions) {
	utility::string_t paramName = utils->getTestValue("postSlidesReorderMany", "name");
	std::vector<int32_t> paramOldPositions = utils->getIntVectorTestValue("postSlidesReorderMany", "oldPositions");
	std::vector<int32_t> paramNewPositions = utils->getIntVectorTestValue("postSlidesReorderMany", "newPositions");
	utility::string_t paramPassword = utils->getTestValue("postSlidesReorderMany", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesReorderMany", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesReorderMany", "storage");
	paramNewPositions = utils->getInvalidIntVectorTestValue("postSlidesReorderMany", "newPositions", paramNewPositions);
	utils->initialize("postSlidesReorderMany", "newPositions", paramNewPositions);

	bool failed = true;
	try
	{
		api->reorderSlides(paramName, paramOldPositions, paramNewPositions, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesReorderMany", "newPositions");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesReorderMany", "newPositions", paramNewPositions);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesReorderMany", "newPositions");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesReorderMany", "newPositions", paramNewPositions);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesReorderMany", "newPositions"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesReorderManyInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("postSlidesReorderMany", "name");
	std::vector<int32_t> paramOldPositions = utils->getIntVectorTestValue("postSlidesReorderMany", "oldPositions");
	std::vector<int32_t> paramNewPositions = utils->getIntVectorTestValue("postSlidesReorderMany", "newPositions");
	utility::string_t paramPassword = utils->getTestValue("postSlidesReorderMany", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesReorderMany", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesReorderMany", "storage");
	paramPassword = utils->getInvalidTestValue("postSlidesReorderMany", "password", paramPassword);
	utils->initialize("postSlidesReorderMany", "password", paramPassword);

	bool failed = true;
	try
	{
		api->reorderSlides(paramName, paramOldPositions, paramNewPositions, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesReorderMany", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesReorderMany", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesReorderMany", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesReorderMany", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesReorderMany", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesReorderManyInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("postSlidesReorderMany", "name");
	std::vector<int32_t> paramOldPositions = utils->getIntVectorTestValue("postSlidesReorderMany", "oldPositions");
	std::vector<int32_t> paramNewPositions = utils->getIntVectorTestValue("postSlidesReorderMany", "newPositions");
	utility::string_t paramPassword = utils->getTestValue("postSlidesReorderMany", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesReorderMany", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesReorderMany", "storage");
	paramFolder = utils->getInvalidTestValue("postSlidesReorderMany", "folder", paramFolder);
	utils->initialize("postSlidesReorderMany", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->reorderSlides(paramName, paramOldPositions, paramNewPositions, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesReorderMany", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesReorderMany", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesReorderMany", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesReorderMany", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesReorderMany", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesReorderManyInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("postSlidesReorderMany", "name");
	std::vector<int32_t> paramOldPositions = utils->getIntVectorTestValue("postSlidesReorderMany", "oldPositions");
	std::vector<int32_t> paramNewPositions = utils->getIntVectorTestValue("postSlidesReorderMany", "newPositions");
	utility::string_t paramPassword = utils->getTestValue("postSlidesReorderMany", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesReorderMany", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesReorderMany", "storage");
	paramStorage = utils->getInvalidTestValue("postSlidesReorderMany", "storage", paramStorage);
	utils->initialize("postSlidesReorderMany", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->reorderSlides(paramName, paramOldPositions, paramNewPositions, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesReorderMany", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesReorderMany", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesReorderMany", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesReorderMany", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesReorderMany", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesSaveAs) {
	utility::string_t paramName = utils->getTestValue("postSlidesSaveAs", "name");
	utility::string_t paramFormat = utils->getTestValue("postSlidesSaveAs", "format");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("postSlidesSaveAs", "options");
	utility::string_t paramPassword = utils->getTestValue("postSlidesSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("postSlidesSaveAs", "fontsFolder");
	utils->initialize("postSlidesSaveAs", "");
	HttpContent result = api->downloadPresentation(paramName, paramFormat, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, postSlidesSaveAsInvalidName) {
	utility::string_t paramName = utils->getTestValue("postSlidesSaveAs", "name");
	utility::string_t paramFormat = utils->getTestValue("postSlidesSaveAs", "format");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("postSlidesSaveAs", "options");
	utility::string_t paramPassword = utils->getTestValue("postSlidesSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("postSlidesSaveAs", "fontsFolder");
	paramName = utils->getInvalidTestValue("postSlidesSaveAs", "name", paramName);
	utils->initialize("postSlidesSaveAs", "name", paramName);

	bool failed = true;
	try
	{
		api->downloadPresentation(paramName, paramFormat, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesSaveAs", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesSaveAs", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesSaveAs", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesSaveAs", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesSaveAs", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesSaveAsInvalidFormat) {
	utility::string_t paramName = utils->getTestValue("postSlidesSaveAs", "name");
	utility::string_t paramFormat = utils->getTestValue("postSlidesSaveAs", "format");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("postSlidesSaveAs", "options");
	utility::string_t paramPassword = utils->getTestValue("postSlidesSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("postSlidesSaveAs", "fontsFolder");
	paramFormat = utils->getInvalidTestValue("postSlidesSaveAs", "format", paramFormat);
	utils->initialize("postSlidesSaveAs", "format", paramFormat);

	bool failed = true;
	try
	{
		api->downloadPresentation(paramName, paramFormat, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesSaveAs", "format");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesSaveAs", "format", paramFormat);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesSaveAs", "format");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesSaveAs", "format", paramFormat);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesSaveAs", "format"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesSaveAsInvalidOptions) {
	utility::string_t paramName = utils->getTestValue("postSlidesSaveAs", "name");
	utility::string_t paramFormat = utils->getTestValue("postSlidesSaveAs", "format");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("postSlidesSaveAs", "options");
	utility::string_t paramPassword = utils->getTestValue("postSlidesSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("postSlidesSaveAs", "fontsFolder");
	paramOptions = utils->getInvalidTestValueForClass<>("postSlidesSaveAs", "options", paramOptions);
	utils->initialize("postSlidesSaveAs", "options", paramOptions);

	bool failed = true;
	try
	{
		api->downloadPresentation(paramName, paramFormat, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesSaveAs", "options");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesSaveAs", "options", paramOptions);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesSaveAs", "options");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesSaveAs", "options", paramOptions);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesSaveAs", "options"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesSaveAsInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("postSlidesSaveAs", "name");
	utility::string_t paramFormat = utils->getTestValue("postSlidesSaveAs", "format");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("postSlidesSaveAs", "options");
	utility::string_t paramPassword = utils->getTestValue("postSlidesSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("postSlidesSaveAs", "fontsFolder");
	paramPassword = utils->getInvalidTestValue("postSlidesSaveAs", "password", paramPassword);
	utils->initialize("postSlidesSaveAs", "password", paramPassword);

	bool failed = true;
	try
	{
		api->downloadPresentation(paramName, paramFormat, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesSaveAs", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesSaveAs", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesSaveAs", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesSaveAs", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesSaveAs", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesSaveAsInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("postSlidesSaveAs", "name");
	utility::string_t paramFormat = utils->getTestValue("postSlidesSaveAs", "format");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("postSlidesSaveAs", "options");
	utility::string_t paramPassword = utils->getTestValue("postSlidesSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("postSlidesSaveAs", "fontsFolder");
	paramFolder = utils->getInvalidTestValue("postSlidesSaveAs", "folder", paramFolder);
	utils->initialize("postSlidesSaveAs", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->downloadPresentation(paramName, paramFormat, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesSaveAs", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesSaveAs", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesSaveAs", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesSaveAs", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesSaveAs", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesSaveAsInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("postSlidesSaveAs", "name");
	utility::string_t paramFormat = utils->getTestValue("postSlidesSaveAs", "format");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("postSlidesSaveAs", "options");
	utility::string_t paramPassword = utils->getTestValue("postSlidesSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("postSlidesSaveAs", "fontsFolder");
	paramStorage = utils->getInvalidTestValue("postSlidesSaveAs", "storage", paramStorage);
	utils->initialize("postSlidesSaveAs", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->downloadPresentation(paramName, paramFormat, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesSaveAs", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesSaveAs", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesSaveAs", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesSaveAs", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesSaveAs", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesSaveAsInvalidFontsFolder) {
	utility::string_t paramName = utils->getTestValue("postSlidesSaveAs", "name");
	utility::string_t paramFormat = utils->getTestValue("postSlidesSaveAs", "format");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("postSlidesSaveAs", "options");
	utility::string_t paramPassword = utils->getTestValue("postSlidesSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("postSlidesSaveAs", "fontsFolder");
	paramFontsFolder = utils->getInvalidTestValue("postSlidesSaveAs", "fontsFolder", paramFontsFolder);
	utils->initialize("postSlidesSaveAs", "fontsFolder", paramFontsFolder);

	bool failed = true;
	try
	{
		api->downloadPresentation(paramName, paramFormat, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesSaveAs", "fontsFolder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesSaveAs", "fontsFolder", paramFontsFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesSaveAs", "fontsFolder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesSaveAs", "fontsFolder", paramFontsFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesSaveAs", "fontsFolder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesSetDocumentProperties) {
	utility::string_t paramName = utils->getTestValue("postSlidesSetDocumentProperties", "name");
	std::shared_ptr<DocumentProperties> paramProperties = utils->getTestValueForClass<DocumentProperties>("postSlidesSetDocumentProperties", "properties");
	utility::string_t paramPassword = utils->getTestValue("postSlidesSetDocumentProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesSetDocumentProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesSetDocumentProperties", "storage");
	utils->initialize("postSlidesSetDocumentProperties", "");
	std::shared_ptr<DocumentProperties> result = api->setDocumentProperties(paramName, paramProperties, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, postSlidesSetDocumentPropertiesInvalidName) {
	utility::string_t paramName = utils->getTestValue("postSlidesSetDocumentProperties", "name");
	std::shared_ptr<DocumentProperties> paramProperties = utils->getTestValueForClass<DocumentProperties>("postSlidesSetDocumentProperties", "properties");
	utility::string_t paramPassword = utils->getTestValue("postSlidesSetDocumentProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesSetDocumentProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesSetDocumentProperties", "storage");
	paramName = utils->getInvalidTestValue("postSlidesSetDocumentProperties", "name", paramName);
	utils->initialize("postSlidesSetDocumentProperties", "name", paramName);

	bool failed = true;
	try
	{
		api->setDocumentProperties(paramName, paramProperties, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesSetDocumentProperties", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesSetDocumentProperties", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesSetDocumentProperties", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesSetDocumentProperties", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesSetDocumentProperties", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesSetDocumentPropertiesInvalidProperties) {
	utility::string_t paramName = utils->getTestValue("postSlidesSetDocumentProperties", "name");
	std::shared_ptr<DocumentProperties> paramProperties = utils->getTestValueForClass<DocumentProperties>("postSlidesSetDocumentProperties", "properties");
	utility::string_t paramPassword = utils->getTestValue("postSlidesSetDocumentProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesSetDocumentProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesSetDocumentProperties", "storage");
	paramProperties = utils->getInvalidTestValueForClass<>("postSlidesSetDocumentProperties", "properties", paramProperties);
	utils->initialize("postSlidesSetDocumentProperties", "properties", paramProperties);

	bool failed = true;
	try
	{
		api->setDocumentProperties(paramName, paramProperties, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesSetDocumentProperties", "properties");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesSetDocumentProperties", "properties", paramProperties);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesSetDocumentProperties", "properties");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesSetDocumentProperties", "properties", paramProperties);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesSetDocumentProperties", "properties"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesSetDocumentPropertiesInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("postSlidesSetDocumentProperties", "name");
	std::shared_ptr<DocumentProperties> paramProperties = utils->getTestValueForClass<DocumentProperties>("postSlidesSetDocumentProperties", "properties");
	utility::string_t paramPassword = utils->getTestValue("postSlidesSetDocumentProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesSetDocumentProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesSetDocumentProperties", "storage");
	paramPassword = utils->getInvalidTestValue("postSlidesSetDocumentProperties", "password", paramPassword);
	utils->initialize("postSlidesSetDocumentProperties", "password", paramPassword);

	bool failed = true;
	try
	{
		api->setDocumentProperties(paramName, paramProperties, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesSetDocumentProperties", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesSetDocumentProperties", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesSetDocumentProperties", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesSetDocumentProperties", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesSetDocumentProperties", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesSetDocumentPropertiesInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("postSlidesSetDocumentProperties", "name");
	std::shared_ptr<DocumentProperties> paramProperties = utils->getTestValueForClass<DocumentProperties>("postSlidesSetDocumentProperties", "properties");
	utility::string_t paramPassword = utils->getTestValue("postSlidesSetDocumentProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesSetDocumentProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesSetDocumentProperties", "storage");
	paramFolder = utils->getInvalidTestValue("postSlidesSetDocumentProperties", "folder", paramFolder);
	utils->initialize("postSlidesSetDocumentProperties", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->setDocumentProperties(paramName, paramProperties, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesSetDocumentProperties", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesSetDocumentProperties", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesSetDocumentProperties", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesSetDocumentProperties", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesSetDocumentProperties", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesSetDocumentPropertiesInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("postSlidesSetDocumentProperties", "name");
	std::shared_ptr<DocumentProperties> paramProperties = utils->getTestValueForClass<DocumentProperties>("postSlidesSetDocumentProperties", "properties");
	utility::string_t paramPassword = utils->getTestValue("postSlidesSetDocumentProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesSetDocumentProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesSetDocumentProperties", "storage");
	paramStorage = utils->getInvalidTestValue("postSlidesSetDocumentProperties", "storage", paramStorage);
	utils->initialize("postSlidesSetDocumentProperties", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->setDocumentProperties(paramName, paramProperties, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesSetDocumentProperties", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesSetDocumentProperties", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesSetDocumentProperties", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesSetDocumentProperties", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesSetDocumentProperties", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesSlideReplaceText) {
	utility::string_t paramName = utils->getTestValue("postSlidesSlideReplaceText", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postSlidesSlideReplaceText", "slideIndex");
	utility::string_t paramOldValue = utils->getTestValue("postSlidesSlideReplaceText", "oldValue");
	utility::string_t paramNewValue = utils->getTestValue("postSlidesSlideReplaceText", "newValue");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("postSlidesSlideReplaceText", "ignoreCase");
	utility::string_t paramPassword = utils->getTestValue("postSlidesSlideReplaceText", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesSlideReplaceText", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesSlideReplaceText", "storage");
	utils->initialize("postSlidesSlideReplaceText", "");
	std::shared_ptr<SlideReplaceResult> result = api->replaceSlideText(paramName, paramSlideIndex, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, postSlidesSlideReplaceTextInvalidName) {
	utility::string_t paramName = utils->getTestValue("postSlidesSlideReplaceText", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postSlidesSlideReplaceText", "slideIndex");
	utility::string_t paramOldValue = utils->getTestValue("postSlidesSlideReplaceText", "oldValue");
	utility::string_t paramNewValue = utils->getTestValue("postSlidesSlideReplaceText", "newValue");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("postSlidesSlideReplaceText", "ignoreCase");
	utility::string_t paramPassword = utils->getTestValue("postSlidesSlideReplaceText", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesSlideReplaceText", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesSlideReplaceText", "storage");
	paramName = utils->getInvalidTestValue("postSlidesSlideReplaceText", "name", paramName);
	utils->initialize("postSlidesSlideReplaceText", "name", paramName);

	bool failed = true;
	try
	{
		api->replaceSlideText(paramName, paramSlideIndex, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesSlideReplaceText", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesSlideReplaceText", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesSlideReplaceText", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesSlideReplaceText", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesSlideReplaceText", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesSlideReplaceTextInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("postSlidesSlideReplaceText", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postSlidesSlideReplaceText", "slideIndex");
	utility::string_t paramOldValue = utils->getTestValue("postSlidesSlideReplaceText", "oldValue");
	utility::string_t paramNewValue = utils->getTestValue("postSlidesSlideReplaceText", "newValue");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("postSlidesSlideReplaceText", "ignoreCase");
	utility::string_t paramPassword = utils->getTestValue("postSlidesSlideReplaceText", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesSlideReplaceText", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesSlideReplaceText", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("postSlidesSlideReplaceText", "slideIndex", paramSlideIndex).value();
	utils->initialize("postSlidesSlideReplaceText", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->replaceSlideText(paramName, paramSlideIndex, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesSlideReplaceText", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesSlideReplaceText", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesSlideReplaceText", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesSlideReplaceText", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesSlideReplaceText", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesSlideReplaceTextInvalidOldValue) {
	utility::string_t paramName = utils->getTestValue("postSlidesSlideReplaceText", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postSlidesSlideReplaceText", "slideIndex");
	utility::string_t paramOldValue = utils->getTestValue("postSlidesSlideReplaceText", "oldValue");
	utility::string_t paramNewValue = utils->getTestValue("postSlidesSlideReplaceText", "newValue");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("postSlidesSlideReplaceText", "ignoreCase");
	utility::string_t paramPassword = utils->getTestValue("postSlidesSlideReplaceText", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesSlideReplaceText", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesSlideReplaceText", "storage");
	paramOldValue = utils->getInvalidTestValue("postSlidesSlideReplaceText", "oldValue", paramOldValue);
	utils->initialize("postSlidesSlideReplaceText", "oldValue", paramOldValue);

	bool failed = true;
	try
	{
		api->replaceSlideText(paramName, paramSlideIndex, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesSlideReplaceText", "oldValue");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesSlideReplaceText", "oldValue", paramOldValue);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesSlideReplaceText", "oldValue");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesSlideReplaceText", "oldValue", paramOldValue);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesSlideReplaceText", "oldValue"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesSlideReplaceTextInvalidNewValue) {
	utility::string_t paramName = utils->getTestValue("postSlidesSlideReplaceText", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postSlidesSlideReplaceText", "slideIndex");
	utility::string_t paramOldValue = utils->getTestValue("postSlidesSlideReplaceText", "oldValue");
	utility::string_t paramNewValue = utils->getTestValue("postSlidesSlideReplaceText", "newValue");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("postSlidesSlideReplaceText", "ignoreCase");
	utility::string_t paramPassword = utils->getTestValue("postSlidesSlideReplaceText", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesSlideReplaceText", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesSlideReplaceText", "storage");
	paramNewValue = utils->getInvalidTestValue("postSlidesSlideReplaceText", "newValue", paramNewValue);
	utils->initialize("postSlidesSlideReplaceText", "newValue", paramNewValue);

	bool failed = true;
	try
	{
		api->replaceSlideText(paramName, paramSlideIndex, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesSlideReplaceText", "newValue");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesSlideReplaceText", "newValue", paramNewValue);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesSlideReplaceText", "newValue");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesSlideReplaceText", "newValue", paramNewValue);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesSlideReplaceText", "newValue"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesSlideReplaceTextInvalidIgnoreCase) {
	utility::string_t paramName = utils->getTestValue("postSlidesSlideReplaceText", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postSlidesSlideReplaceText", "slideIndex");
	utility::string_t paramOldValue = utils->getTestValue("postSlidesSlideReplaceText", "oldValue");
	utility::string_t paramNewValue = utils->getTestValue("postSlidesSlideReplaceText", "newValue");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("postSlidesSlideReplaceText", "ignoreCase");
	utility::string_t paramPassword = utils->getTestValue("postSlidesSlideReplaceText", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesSlideReplaceText", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesSlideReplaceText", "storage");
	paramIgnoreCase = utils->getInvalidBoolTestValue("postSlidesSlideReplaceText", "ignoreCase", paramIgnoreCase).value();
	utils->initialize("postSlidesSlideReplaceText", "ignoreCase", paramIgnoreCase);

	bool failed = true;
	try
	{
		api->replaceSlideText(paramName, paramSlideIndex, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesSlideReplaceText", "ignoreCase");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesSlideReplaceText", "ignoreCase", paramIgnoreCase);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesSlideReplaceText", "ignoreCase");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesSlideReplaceText", "ignoreCase", paramIgnoreCase);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesSlideReplaceText", "ignoreCase"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesSlideReplaceTextInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("postSlidesSlideReplaceText", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postSlidesSlideReplaceText", "slideIndex");
	utility::string_t paramOldValue = utils->getTestValue("postSlidesSlideReplaceText", "oldValue");
	utility::string_t paramNewValue = utils->getTestValue("postSlidesSlideReplaceText", "newValue");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("postSlidesSlideReplaceText", "ignoreCase");
	utility::string_t paramPassword = utils->getTestValue("postSlidesSlideReplaceText", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesSlideReplaceText", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesSlideReplaceText", "storage");
	paramPassword = utils->getInvalidTestValue("postSlidesSlideReplaceText", "password", paramPassword);
	utils->initialize("postSlidesSlideReplaceText", "password", paramPassword);

	bool failed = true;
	try
	{
		api->replaceSlideText(paramName, paramSlideIndex, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesSlideReplaceText", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesSlideReplaceText", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesSlideReplaceText", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesSlideReplaceText", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesSlideReplaceText", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesSlideReplaceTextInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("postSlidesSlideReplaceText", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postSlidesSlideReplaceText", "slideIndex");
	utility::string_t paramOldValue = utils->getTestValue("postSlidesSlideReplaceText", "oldValue");
	utility::string_t paramNewValue = utils->getTestValue("postSlidesSlideReplaceText", "newValue");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("postSlidesSlideReplaceText", "ignoreCase");
	utility::string_t paramPassword = utils->getTestValue("postSlidesSlideReplaceText", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesSlideReplaceText", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesSlideReplaceText", "storage");
	paramFolder = utils->getInvalidTestValue("postSlidesSlideReplaceText", "folder", paramFolder);
	utils->initialize("postSlidesSlideReplaceText", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->replaceSlideText(paramName, paramSlideIndex, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesSlideReplaceText", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesSlideReplaceText", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesSlideReplaceText", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesSlideReplaceText", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesSlideReplaceText", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesSlideReplaceTextInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("postSlidesSlideReplaceText", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postSlidesSlideReplaceText", "slideIndex");
	utility::string_t paramOldValue = utils->getTestValue("postSlidesSlideReplaceText", "oldValue");
	utility::string_t paramNewValue = utils->getTestValue("postSlidesSlideReplaceText", "newValue");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("postSlidesSlideReplaceText", "ignoreCase");
	utility::string_t paramPassword = utils->getTestValue("postSlidesSlideReplaceText", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesSlideReplaceText", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesSlideReplaceText", "storage");
	paramStorage = utils->getInvalidTestValue("postSlidesSlideReplaceText", "storage", paramStorage);
	utils->initialize("postSlidesSlideReplaceText", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->replaceSlideText(paramName, paramSlideIndex, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesSlideReplaceText", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesSlideReplaceText", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesSlideReplaceText", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesSlideReplaceText", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesSlideReplaceText", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesSplit) {
	utility::string_t paramName = utils->getTestValue("postSlidesSplit", "name");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("postSlidesSplit", "options");
	utility::string_t paramFormat = utils->getTestValue("postSlidesSplit", "format");
	auto paramWidth = utils->getOptionalIntTestValue("postSlidesSplit", "width");
	auto paramHeight = utils->getOptionalIntTestValue("postSlidesSplit", "height");
	auto paramFrom = utils->getOptionalIntTestValue("postSlidesSplit", "from");
	auto paramTo = utils->getOptionalIntTestValue("postSlidesSplit", "to");
	utility::string_t paramDestFolder = utils->getTestValue("postSlidesSplit", "destFolder");
	utility::string_t paramPassword = utils->getTestValue("postSlidesSplit", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesSplit", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesSplit", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("postSlidesSplit", "fontsFolder");
	utils->initialize("postSlidesSplit", "");
	std::shared_ptr<SplitDocumentResult> result = api->split(paramName, paramOptions, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramDestFolder, paramPassword, paramFolder, paramStorage, paramFontsFolder).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, postSlidesSplitInvalidName) {
	utility::string_t paramName = utils->getTestValue("postSlidesSplit", "name");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("postSlidesSplit", "options");
	utility::string_t paramFormat = utils->getTestValue("postSlidesSplit", "format");
	auto paramWidth = utils->getOptionalIntTestValue("postSlidesSplit", "width");
	auto paramHeight = utils->getOptionalIntTestValue("postSlidesSplit", "height");
	auto paramFrom = utils->getOptionalIntTestValue("postSlidesSplit", "from");
	auto paramTo = utils->getOptionalIntTestValue("postSlidesSplit", "to");
	utility::string_t paramDestFolder = utils->getTestValue("postSlidesSplit", "destFolder");
	utility::string_t paramPassword = utils->getTestValue("postSlidesSplit", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesSplit", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesSplit", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("postSlidesSplit", "fontsFolder");
	paramName = utils->getInvalidTestValue("postSlidesSplit", "name", paramName);
	utils->initialize("postSlidesSplit", "name", paramName);

	bool failed = true;
	try
	{
		api->split(paramName, paramOptions, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramDestFolder, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesSplit", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesSplit", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesSplit", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesSplit", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesSplit", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesSplitInvalidOptions) {
	utility::string_t paramName = utils->getTestValue("postSlidesSplit", "name");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("postSlidesSplit", "options");
	utility::string_t paramFormat = utils->getTestValue("postSlidesSplit", "format");
	auto paramWidth = utils->getOptionalIntTestValue("postSlidesSplit", "width");
	auto paramHeight = utils->getOptionalIntTestValue("postSlidesSplit", "height");
	auto paramFrom = utils->getOptionalIntTestValue("postSlidesSplit", "from");
	auto paramTo = utils->getOptionalIntTestValue("postSlidesSplit", "to");
	utility::string_t paramDestFolder = utils->getTestValue("postSlidesSplit", "destFolder");
	utility::string_t paramPassword = utils->getTestValue("postSlidesSplit", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesSplit", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesSplit", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("postSlidesSplit", "fontsFolder");
	paramOptions = utils->getInvalidTestValueForClass<>("postSlidesSplit", "options", paramOptions);
	utils->initialize("postSlidesSplit", "options", paramOptions);

	bool failed = true;
	try
	{
		api->split(paramName, paramOptions, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramDestFolder, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesSplit", "options");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesSplit", "options", paramOptions);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesSplit", "options");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesSplit", "options", paramOptions);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesSplit", "options"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesSplitInvalidFormat) {
	utility::string_t paramName = utils->getTestValue("postSlidesSplit", "name");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("postSlidesSplit", "options");
	utility::string_t paramFormat = utils->getTestValue("postSlidesSplit", "format");
	auto paramWidth = utils->getOptionalIntTestValue("postSlidesSplit", "width");
	auto paramHeight = utils->getOptionalIntTestValue("postSlidesSplit", "height");
	auto paramFrom = utils->getOptionalIntTestValue("postSlidesSplit", "from");
	auto paramTo = utils->getOptionalIntTestValue("postSlidesSplit", "to");
	utility::string_t paramDestFolder = utils->getTestValue("postSlidesSplit", "destFolder");
	utility::string_t paramPassword = utils->getTestValue("postSlidesSplit", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesSplit", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesSplit", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("postSlidesSplit", "fontsFolder");
	paramFormat = utils->getInvalidTestValue("postSlidesSplit", "format", paramFormat);
	utils->initialize("postSlidesSplit", "format", paramFormat);

	bool failed = true;
	try
	{
		api->split(paramName, paramOptions, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramDestFolder, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesSplit", "format");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesSplit", "format", paramFormat);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesSplit", "format");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesSplit", "format", paramFormat);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesSplit", "format"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesSplitInvalidWidth) {
	utility::string_t paramName = utils->getTestValue("postSlidesSplit", "name");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("postSlidesSplit", "options");
	utility::string_t paramFormat = utils->getTestValue("postSlidesSplit", "format");
	auto paramWidth = utils->getOptionalIntTestValue("postSlidesSplit", "width");
	auto paramHeight = utils->getOptionalIntTestValue("postSlidesSplit", "height");
	auto paramFrom = utils->getOptionalIntTestValue("postSlidesSplit", "from");
	auto paramTo = utils->getOptionalIntTestValue("postSlidesSplit", "to");
	utility::string_t paramDestFolder = utils->getTestValue("postSlidesSplit", "destFolder");
	utility::string_t paramPassword = utils->getTestValue("postSlidesSplit", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesSplit", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesSplit", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("postSlidesSplit", "fontsFolder");
	paramWidth = utils->getInvalidIntTestValue("postSlidesSplit", "width", paramWidth).value();
	utils->initialize("postSlidesSplit", "width", paramWidth);

	bool failed = true;
	try
	{
		api->split(paramName, paramOptions, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramDestFolder, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesSplit", "width");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesSplit", "width", paramWidth);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesSplit", "width");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesSplit", "width", paramWidth);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesSplit", "width"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesSplitInvalidHeight) {
	utility::string_t paramName = utils->getTestValue("postSlidesSplit", "name");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("postSlidesSplit", "options");
	utility::string_t paramFormat = utils->getTestValue("postSlidesSplit", "format");
	auto paramWidth = utils->getOptionalIntTestValue("postSlidesSplit", "width");
	auto paramHeight = utils->getOptionalIntTestValue("postSlidesSplit", "height");
	auto paramFrom = utils->getOptionalIntTestValue("postSlidesSplit", "from");
	auto paramTo = utils->getOptionalIntTestValue("postSlidesSplit", "to");
	utility::string_t paramDestFolder = utils->getTestValue("postSlidesSplit", "destFolder");
	utility::string_t paramPassword = utils->getTestValue("postSlidesSplit", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesSplit", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesSplit", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("postSlidesSplit", "fontsFolder");
	paramHeight = utils->getInvalidIntTestValue("postSlidesSplit", "height", paramHeight).value();
	utils->initialize("postSlidesSplit", "height", paramHeight);

	bool failed = true;
	try
	{
		api->split(paramName, paramOptions, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramDestFolder, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesSplit", "height");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesSplit", "height", paramHeight);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesSplit", "height");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesSplit", "height", paramHeight);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesSplit", "height"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesSplitInvalidFrom) {
	utility::string_t paramName = utils->getTestValue("postSlidesSplit", "name");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("postSlidesSplit", "options");
	utility::string_t paramFormat = utils->getTestValue("postSlidesSplit", "format");
	auto paramWidth = utils->getOptionalIntTestValue("postSlidesSplit", "width");
	auto paramHeight = utils->getOptionalIntTestValue("postSlidesSplit", "height");
	auto paramFrom = utils->getOptionalIntTestValue("postSlidesSplit", "from");
	auto paramTo = utils->getOptionalIntTestValue("postSlidesSplit", "to");
	utility::string_t paramDestFolder = utils->getTestValue("postSlidesSplit", "destFolder");
	utility::string_t paramPassword = utils->getTestValue("postSlidesSplit", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesSplit", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesSplit", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("postSlidesSplit", "fontsFolder");
	paramFrom = utils->getInvalidIntTestValue("postSlidesSplit", "from", paramFrom).value();
	utils->initialize("postSlidesSplit", "from", paramFrom);

	bool failed = true;
	try
	{
		api->split(paramName, paramOptions, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramDestFolder, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesSplit", "from");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesSplit", "from", paramFrom);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesSplit", "from");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesSplit", "from", paramFrom);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesSplit", "from"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesSplitInvalidTo) {
	utility::string_t paramName = utils->getTestValue("postSlidesSplit", "name");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("postSlidesSplit", "options");
	utility::string_t paramFormat = utils->getTestValue("postSlidesSplit", "format");
	auto paramWidth = utils->getOptionalIntTestValue("postSlidesSplit", "width");
	auto paramHeight = utils->getOptionalIntTestValue("postSlidesSplit", "height");
	auto paramFrom = utils->getOptionalIntTestValue("postSlidesSplit", "from");
	auto paramTo = utils->getOptionalIntTestValue("postSlidesSplit", "to");
	utility::string_t paramDestFolder = utils->getTestValue("postSlidesSplit", "destFolder");
	utility::string_t paramPassword = utils->getTestValue("postSlidesSplit", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesSplit", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesSplit", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("postSlidesSplit", "fontsFolder");
	paramTo = utils->getInvalidIntTestValue("postSlidesSplit", "to", paramTo).value();
	utils->initialize("postSlidesSplit", "to", paramTo);

	bool failed = true;
	try
	{
		api->split(paramName, paramOptions, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramDestFolder, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesSplit", "to");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesSplit", "to", paramTo);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesSplit", "to");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesSplit", "to", paramTo);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesSplit", "to"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesSplitInvalidDestFolder) {
	utility::string_t paramName = utils->getTestValue("postSlidesSplit", "name");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("postSlidesSplit", "options");
	utility::string_t paramFormat = utils->getTestValue("postSlidesSplit", "format");
	auto paramWidth = utils->getOptionalIntTestValue("postSlidesSplit", "width");
	auto paramHeight = utils->getOptionalIntTestValue("postSlidesSplit", "height");
	auto paramFrom = utils->getOptionalIntTestValue("postSlidesSplit", "from");
	auto paramTo = utils->getOptionalIntTestValue("postSlidesSplit", "to");
	utility::string_t paramDestFolder = utils->getTestValue("postSlidesSplit", "destFolder");
	utility::string_t paramPassword = utils->getTestValue("postSlidesSplit", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesSplit", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesSplit", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("postSlidesSplit", "fontsFolder");
	paramDestFolder = utils->getInvalidTestValue("postSlidesSplit", "destFolder", paramDestFolder);
	utils->initialize("postSlidesSplit", "destFolder", paramDestFolder);

	bool failed = true;
	try
	{
		api->split(paramName, paramOptions, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramDestFolder, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesSplit", "destFolder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesSplit", "destFolder", paramDestFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesSplit", "destFolder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesSplit", "destFolder", paramDestFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesSplit", "destFolder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesSplitInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("postSlidesSplit", "name");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("postSlidesSplit", "options");
	utility::string_t paramFormat = utils->getTestValue("postSlidesSplit", "format");
	auto paramWidth = utils->getOptionalIntTestValue("postSlidesSplit", "width");
	auto paramHeight = utils->getOptionalIntTestValue("postSlidesSplit", "height");
	auto paramFrom = utils->getOptionalIntTestValue("postSlidesSplit", "from");
	auto paramTo = utils->getOptionalIntTestValue("postSlidesSplit", "to");
	utility::string_t paramDestFolder = utils->getTestValue("postSlidesSplit", "destFolder");
	utility::string_t paramPassword = utils->getTestValue("postSlidesSplit", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesSplit", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesSplit", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("postSlidesSplit", "fontsFolder");
	paramPassword = utils->getInvalidTestValue("postSlidesSplit", "password", paramPassword);
	utils->initialize("postSlidesSplit", "password", paramPassword);

	bool failed = true;
	try
	{
		api->split(paramName, paramOptions, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramDestFolder, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesSplit", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesSplit", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesSplit", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesSplit", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesSplit", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesSplitInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("postSlidesSplit", "name");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("postSlidesSplit", "options");
	utility::string_t paramFormat = utils->getTestValue("postSlidesSplit", "format");
	auto paramWidth = utils->getOptionalIntTestValue("postSlidesSplit", "width");
	auto paramHeight = utils->getOptionalIntTestValue("postSlidesSplit", "height");
	auto paramFrom = utils->getOptionalIntTestValue("postSlidesSplit", "from");
	auto paramTo = utils->getOptionalIntTestValue("postSlidesSplit", "to");
	utility::string_t paramDestFolder = utils->getTestValue("postSlidesSplit", "destFolder");
	utility::string_t paramPassword = utils->getTestValue("postSlidesSplit", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesSplit", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesSplit", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("postSlidesSplit", "fontsFolder");
	paramFolder = utils->getInvalidTestValue("postSlidesSplit", "folder", paramFolder);
	utils->initialize("postSlidesSplit", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->split(paramName, paramOptions, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramDestFolder, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesSplit", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesSplit", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesSplit", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesSplit", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesSplit", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesSplitInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("postSlidesSplit", "name");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("postSlidesSplit", "options");
	utility::string_t paramFormat = utils->getTestValue("postSlidesSplit", "format");
	auto paramWidth = utils->getOptionalIntTestValue("postSlidesSplit", "width");
	auto paramHeight = utils->getOptionalIntTestValue("postSlidesSplit", "height");
	auto paramFrom = utils->getOptionalIntTestValue("postSlidesSplit", "from");
	auto paramTo = utils->getOptionalIntTestValue("postSlidesSplit", "to");
	utility::string_t paramDestFolder = utils->getTestValue("postSlidesSplit", "destFolder");
	utility::string_t paramPassword = utils->getTestValue("postSlidesSplit", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesSplit", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesSplit", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("postSlidesSplit", "fontsFolder");
	paramStorage = utils->getInvalidTestValue("postSlidesSplit", "storage", paramStorage);
	utils->initialize("postSlidesSplit", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->split(paramName, paramOptions, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramDestFolder, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesSplit", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesSplit", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesSplit", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesSplit", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesSplit", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesSplitInvalidFontsFolder) {
	utility::string_t paramName = utils->getTestValue("postSlidesSplit", "name");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("postSlidesSplit", "options");
	utility::string_t paramFormat = utils->getTestValue("postSlidesSplit", "format");
	auto paramWidth = utils->getOptionalIntTestValue("postSlidesSplit", "width");
	auto paramHeight = utils->getOptionalIntTestValue("postSlidesSplit", "height");
	auto paramFrom = utils->getOptionalIntTestValue("postSlidesSplit", "from");
	auto paramTo = utils->getOptionalIntTestValue("postSlidesSplit", "to");
	utility::string_t paramDestFolder = utils->getTestValue("postSlidesSplit", "destFolder");
	utility::string_t paramPassword = utils->getTestValue("postSlidesSplit", "password");
	utility::string_t paramFolder = utils->getTestValue("postSlidesSplit", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSlidesSplit", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("postSlidesSplit", "fontsFolder");
	paramFontsFolder = utils->getInvalidTestValue("postSlidesSplit", "fontsFolder", paramFontsFolder);
	utils->initialize("postSlidesSplit", "fontsFolder", paramFontsFolder);

	bool failed = true;
	try
	{
		api->split(paramName, paramOptions, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramDestFolder, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesSplit", "fontsFolder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesSplit", "fontsFolder", paramFontsFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesSplit", "fontsFolder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesSplit", "fontsFolder", paramFontsFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesSplit", "fontsFolder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSubshapeSaveAs) {
	utility::string_t paramName = utils->getTestValue("postSubshapeSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postSubshapeSaveAs", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("postSubshapeSaveAs", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("postSubshapeSaveAs", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("postSubshapeSaveAs", "format");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("postSubshapeSaveAs", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("postSubshapeSaveAs", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("postSubshapeSaveAs", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("postSubshapeSaveAs", "bounds");
	utility::string_t paramPassword = utils->getTestValue("postSubshapeSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("postSubshapeSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSubshapeSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("postSubshapeSaveAs", "fontsFolder");
	utils->initialize("postSubshapeSaveAs", "");
	HttpContent result = api->downloadSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, postSubshapeSaveAsInvalidName) {
	utility::string_t paramName = utils->getTestValue("postSubshapeSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postSubshapeSaveAs", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("postSubshapeSaveAs", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("postSubshapeSaveAs", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("postSubshapeSaveAs", "format");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("postSubshapeSaveAs", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("postSubshapeSaveAs", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("postSubshapeSaveAs", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("postSubshapeSaveAs", "bounds");
	utility::string_t paramPassword = utils->getTestValue("postSubshapeSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("postSubshapeSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSubshapeSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("postSubshapeSaveAs", "fontsFolder");
	paramName = utils->getInvalidTestValue("postSubshapeSaveAs", "name", paramName);
	utils->initialize("postSubshapeSaveAs", "name", paramName);

	bool failed = true;
	try
	{
		api->downloadSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSubshapeSaveAs", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSubshapeSaveAs", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSubshapeSaveAs", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSubshapeSaveAs", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSubshapeSaveAs", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSubshapeSaveAsInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("postSubshapeSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postSubshapeSaveAs", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("postSubshapeSaveAs", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("postSubshapeSaveAs", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("postSubshapeSaveAs", "format");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("postSubshapeSaveAs", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("postSubshapeSaveAs", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("postSubshapeSaveAs", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("postSubshapeSaveAs", "bounds");
	utility::string_t paramPassword = utils->getTestValue("postSubshapeSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("postSubshapeSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSubshapeSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("postSubshapeSaveAs", "fontsFolder");
	paramSlideIndex = utils->getInvalidIntTestValue("postSubshapeSaveAs", "slideIndex", paramSlideIndex).value();
	utils->initialize("postSubshapeSaveAs", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->downloadSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSubshapeSaveAs", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSubshapeSaveAs", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSubshapeSaveAs", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSubshapeSaveAs", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSubshapeSaveAs", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSubshapeSaveAsInvalidPath) {
	utility::string_t paramName = utils->getTestValue("postSubshapeSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postSubshapeSaveAs", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("postSubshapeSaveAs", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("postSubshapeSaveAs", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("postSubshapeSaveAs", "format");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("postSubshapeSaveAs", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("postSubshapeSaveAs", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("postSubshapeSaveAs", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("postSubshapeSaveAs", "bounds");
	utility::string_t paramPassword = utils->getTestValue("postSubshapeSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("postSubshapeSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSubshapeSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("postSubshapeSaveAs", "fontsFolder");
	paramPath = utils->getInvalidTestValue("postSubshapeSaveAs", "path", paramPath);
	utils->initialize("postSubshapeSaveAs", "path", paramPath);

	bool failed = true;
	try
	{
		api->downloadSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSubshapeSaveAs", "path");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSubshapeSaveAs", "path", paramPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSubshapeSaveAs", "path");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSubshapeSaveAs", "path", paramPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSubshapeSaveAs", "path"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSubshapeSaveAsInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("postSubshapeSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postSubshapeSaveAs", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("postSubshapeSaveAs", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("postSubshapeSaveAs", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("postSubshapeSaveAs", "format");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("postSubshapeSaveAs", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("postSubshapeSaveAs", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("postSubshapeSaveAs", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("postSubshapeSaveAs", "bounds");
	utility::string_t paramPassword = utils->getTestValue("postSubshapeSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("postSubshapeSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSubshapeSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("postSubshapeSaveAs", "fontsFolder");
	paramShapeIndex = utils->getInvalidIntTestValue("postSubshapeSaveAs", "shapeIndex", paramShapeIndex).value();
	utils->initialize("postSubshapeSaveAs", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->downloadSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSubshapeSaveAs", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSubshapeSaveAs", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSubshapeSaveAs", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSubshapeSaveAs", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSubshapeSaveAs", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSubshapeSaveAsInvalidFormat) {
	utility::string_t paramName = utils->getTestValue("postSubshapeSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postSubshapeSaveAs", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("postSubshapeSaveAs", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("postSubshapeSaveAs", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("postSubshapeSaveAs", "format");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("postSubshapeSaveAs", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("postSubshapeSaveAs", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("postSubshapeSaveAs", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("postSubshapeSaveAs", "bounds");
	utility::string_t paramPassword = utils->getTestValue("postSubshapeSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("postSubshapeSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSubshapeSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("postSubshapeSaveAs", "fontsFolder");
	paramFormat = utils->getInvalidTestValue("postSubshapeSaveAs", "format", paramFormat);
	utils->initialize("postSubshapeSaveAs", "format", paramFormat);

	bool failed = true;
	try
	{
		api->downloadSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSubshapeSaveAs", "format");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSubshapeSaveAs", "format", paramFormat);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSubshapeSaveAs", "format");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSubshapeSaveAs", "format", paramFormat);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSubshapeSaveAs", "format"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSubshapeSaveAsInvalidOptions) {
	utility::string_t paramName = utils->getTestValue("postSubshapeSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postSubshapeSaveAs", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("postSubshapeSaveAs", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("postSubshapeSaveAs", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("postSubshapeSaveAs", "format");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("postSubshapeSaveAs", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("postSubshapeSaveAs", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("postSubshapeSaveAs", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("postSubshapeSaveAs", "bounds");
	utility::string_t paramPassword = utils->getTestValue("postSubshapeSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("postSubshapeSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSubshapeSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("postSubshapeSaveAs", "fontsFolder");
	paramOptions = utils->getInvalidTestValueForClass<>("postSubshapeSaveAs", "options", paramOptions);
	utils->initialize("postSubshapeSaveAs", "options", paramOptions);

	bool failed = true;
	try
	{
		api->downloadSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSubshapeSaveAs", "options");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSubshapeSaveAs", "options", paramOptions);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSubshapeSaveAs", "options");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSubshapeSaveAs", "options", paramOptions);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSubshapeSaveAs", "options"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSubshapeSaveAsInvalidScaleX) {
	utility::string_t paramName = utils->getTestValue("postSubshapeSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postSubshapeSaveAs", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("postSubshapeSaveAs", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("postSubshapeSaveAs", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("postSubshapeSaveAs", "format");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("postSubshapeSaveAs", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("postSubshapeSaveAs", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("postSubshapeSaveAs", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("postSubshapeSaveAs", "bounds");
	utility::string_t paramPassword = utils->getTestValue("postSubshapeSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("postSubshapeSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSubshapeSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("postSubshapeSaveAs", "fontsFolder");
	paramScaleX = utils->getInvalidDoubleTestValue("postSubshapeSaveAs", "scaleX", paramScaleX).value();
	utils->initialize("postSubshapeSaveAs", "scaleX", paramScaleX);

	bool failed = true;
	try
	{
		api->downloadSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSubshapeSaveAs", "scaleX");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSubshapeSaveAs", "scaleX", paramScaleX);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSubshapeSaveAs", "scaleX");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSubshapeSaveAs", "scaleX", paramScaleX);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSubshapeSaveAs", "scaleX"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSubshapeSaveAsInvalidScaleY) {
	utility::string_t paramName = utils->getTestValue("postSubshapeSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postSubshapeSaveAs", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("postSubshapeSaveAs", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("postSubshapeSaveAs", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("postSubshapeSaveAs", "format");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("postSubshapeSaveAs", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("postSubshapeSaveAs", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("postSubshapeSaveAs", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("postSubshapeSaveAs", "bounds");
	utility::string_t paramPassword = utils->getTestValue("postSubshapeSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("postSubshapeSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSubshapeSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("postSubshapeSaveAs", "fontsFolder");
	paramScaleY = utils->getInvalidDoubleTestValue("postSubshapeSaveAs", "scaleY", paramScaleY).value();
	utils->initialize("postSubshapeSaveAs", "scaleY", paramScaleY);

	bool failed = true;
	try
	{
		api->downloadSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSubshapeSaveAs", "scaleY");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSubshapeSaveAs", "scaleY", paramScaleY);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSubshapeSaveAs", "scaleY");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSubshapeSaveAs", "scaleY", paramScaleY);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSubshapeSaveAs", "scaleY"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSubshapeSaveAsInvalidBounds) {
	utility::string_t paramName = utils->getTestValue("postSubshapeSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postSubshapeSaveAs", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("postSubshapeSaveAs", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("postSubshapeSaveAs", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("postSubshapeSaveAs", "format");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("postSubshapeSaveAs", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("postSubshapeSaveAs", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("postSubshapeSaveAs", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("postSubshapeSaveAs", "bounds");
	utility::string_t paramPassword = utils->getTestValue("postSubshapeSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("postSubshapeSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSubshapeSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("postSubshapeSaveAs", "fontsFolder");
	paramBounds = utils->getInvalidTestValue("postSubshapeSaveAs", "bounds", paramBounds);
	utils->initialize("postSubshapeSaveAs", "bounds", paramBounds);

	bool failed = true;
	try
	{
		api->downloadSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSubshapeSaveAs", "bounds");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSubshapeSaveAs", "bounds", paramBounds);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSubshapeSaveAs", "bounds");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSubshapeSaveAs", "bounds", paramBounds);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSubshapeSaveAs", "bounds"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSubshapeSaveAsInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("postSubshapeSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postSubshapeSaveAs", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("postSubshapeSaveAs", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("postSubshapeSaveAs", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("postSubshapeSaveAs", "format");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("postSubshapeSaveAs", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("postSubshapeSaveAs", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("postSubshapeSaveAs", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("postSubshapeSaveAs", "bounds");
	utility::string_t paramPassword = utils->getTestValue("postSubshapeSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("postSubshapeSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSubshapeSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("postSubshapeSaveAs", "fontsFolder");
	paramPassword = utils->getInvalidTestValue("postSubshapeSaveAs", "password", paramPassword);
	utils->initialize("postSubshapeSaveAs", "password", paramPassword);

	bool failed = true;
	try
	{
		api->downloadSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSubshapeSaveAs", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSubshapeSaveAs", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSubshapeSaveAs", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSubshapeSaveAs", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSubshapeSaveAs", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSubshapeSaveAsInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("postSubshapeSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postSubshapeSaveAs", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("postSubshapeSaveAs", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("postSubshapeSaveAs", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("postSubshapeSaveAs", "format");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("postSubshapeSaveAs", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("postSubshapeSaveAs", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("postSubshapeSaveAs", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("postSubshapeSaveAs", "bounds");
	utility::string_t paramPassword = utils->getTestValue("postSubshapeSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("postSubshapeSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSubshapeSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("postSubshapeSaveAs", "fontsFolder");
	paramFolder = utils->getInvalidTestValue("postSubshapeSaveAs", "folder", paramFolder);
	utils->initialize("postSubshapeSaveAs", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->downloadSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSubshapeSaveAs", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSubshapeSaveAs", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSubshapeSaveAs", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSubshapeSaveAs", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSubshapeSaveAs", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSubshapeSaveAsInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("postSubshapeSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postSubshapeSaveAs", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("postSubshapeSaveAs", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("postSubshapeSaveAs", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("postSubshapeSaveAs", "format");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("postSubshapeSaveAs", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("postSubshapeSaveAs", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("postSubshapeSaveAs", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("postSubshapeSaveAs", "bounds");
	utility::string_t paramPassword = utils->getTestValue("postSubshapeSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("postSubshapeSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSubshapeSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("postSubshapeSaveAs", "fontsFolder");
	paramStorage = utils->getInvalidTestValue("postSubshapeSaveAs", "storage", paramStorage);
	utils->initialize("postSubshapeSaveAs", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->downloadSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSubshapeSaveAs", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSubshapeSaveAs", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSubshapeSaveAs", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSubshapeSaveAs", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSubshapeSaveAs", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSubshapeSaveAsInvalidFontsFolder) {
	utility::string_t paramName = utils->getTestValue("postSubshapeSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("postSubshapeSaveAs", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("postSubshapeSaveAs", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("postSubshapeSaveAs", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("postSubshapeSaveAs", "format");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("postSubshapeSaveAs", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("postSubshapeSaveAs", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("postSubshapeSaveAs", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("postSubshapeSaveAs", "bounds");
	utility::string_t paramPassword = utils->getTestValue("postSubshapeSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("postSubshapeSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("postSubshapeSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("postSubshapeSaveAs", "fontsFolder");
	paramFontsFolder = utils->getInvalidTestValue("postSubshapeSaveAs", "fontsFolder", paramFontsFolder);
	utils->initialize("postSubshapeSaveAs", "fontsFolder", paramFontsFolder);

	bool failed = true;
	try
	{
		api->downloadSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSubshapeSaveAs", "fontsFolder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSubshapeSaveAs", "fontsFolder", paramFontsFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSubshapeSaveAs", "fontsFolder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSubshapeSaveAs", "fontsFolder", paramFontsFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSubshapeSaveAs", "fontsFolder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putChartCategory) {
	utility::string_t paramName = utils->getTestValue("putChartCategory", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putChartCategory", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putChartCategory", "shapeIndex");
	int32_t paramCategoryIndex = utils->getIntTestValue("putChartCategory", "categoryIndex");
	std::shared_ptr<ChartCategory> paramCategory = utils->getTestValueForClass<ChartCategory>("putChartCategory", "category");
	utility::string_t paramPassword = utils->getTestValue("putChartCategory", "password");
	utility::string_t paramFolder = utils->getTestValue("putChartCategory", "folder");
	utility::string_t paramStorage = utils->getTestValue("putChartCategory", "storage");
	utils->initialize("putChartCategory", "");
	std::shared_ptr<Chart> result = api->updateChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategoryIndex, paramCategory, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, putChartCategoryInvalidName) {
	utility::string_t paramName = utils->getTestValue("putChartCategory", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putChartCategory", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putChartCategory", "shapeIndex");
	int32_t paramCategoryIndex = utils->getIntTestValue("putChartCategory", "categoryIndex");
	std::shared_ptr<ChartCategory> paramCategory = utils->getTestValueForClass<ChartCategory>("putChartCategory", "category");
	utility::string_t paramPassword = utils->getTestValue("putChartCategory", "password");
	utility::string_t paramFolder = utils->getTestValue("putChartCategory", "folder");
	utility::string_t paramStorage = utils->getTestValue("putChartCategory", "storage");
	paramName = utils->getInvalidTestValue("putChartCategory", "name", paramName);
	utils->initialize("putChartCategory", "name", paramName);

	bool failed = true;
	try
	{
		api->updateChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategoryIndex, paramCategory, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putChartCategory", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putChartCategory", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putChartCategory", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putChartCategory", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putChartCategory", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putChartCategoryInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("putChartCategory", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putChartCategory", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putChartCategory", "shapeIndex");
	int32_t paramCategoryIndex = utils->getIntTestValue("putChartCategory", "categoryIndex");
	std::shared_ptr<ChartCategory> paramCategory = utils->getTestValueForClass<ChartCategory>("putChartCategory", "category");
	utility::string_t paramPassword = utils->getTestValue("putChartCategory", "password");
	utility::string_t paramFolder = utils->getTestValue("putChartCategory", "folder");
	utility::string_t paramStorage = utils->getTestValue("putChartCategory", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("putChartCategory", "slideIndex", paramSlideIndex).value();
	utils->initialize("putChartCategory", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->updateChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategoryIndex, paramCategory, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putChartCategory", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putChartCategory", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putChartCategory", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putChartCategory", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putChartCategory", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putChartCategoryInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("putChartCategory", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putChartCategory", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putChartCategory", "shapeIndex");
	int32_t paramCategoryIndex = utils->getIntTestValue("putChartCategory", "categoryIndex");
	std::shared_ptr<ChartCategory> paramCategory = utils->getTestValueForClass<ChartCategory>("putChartCategory", "category");
	utility::string_t paramPassword = utils->getTestValue("putChartCategory", "password");
	utility::string_t paramFolder = utils->getTestValue("putChartCategory", "folder");
	utility::string_t paramStorage = utils->getTestValue("putChartCategory", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("putChartCategory", "shapeIndex", paramShapeIndex).value();
	utils->initialize("putChartCategory", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->updateChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategoryIndex, paramCategory, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putChartCategory", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putChartCategory", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putChartCategory", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putChartCategory", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putChartCategory", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putChartCategoryInvalidCategoryIndex) {
	utility::string_t paramName = utils->getTestValue("putChartCategory", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putChartCategory", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putChartCategory", "shapeIndex");
	int32_t paramCategoryIndex = utils->getIntTestValue("putChartCategory", "categoryIndex");
	std::shared_ptr<ChartCategory> paramCategory = utils->getTestValueForClass<ChartCategory>("putChartCategory", "category");
	utility::string_t paramPassword = utils->getTestValue("putChartCategory", "password");
	utility::string_t paramFolder = utils->getTestValue("putChartCategory", "folder");
	utility::string_t paramStorage = utils->getTestValue("putChartCategory", "storage");
	paramCategoryIndex = utils->getInvalidIntTestValue("putChartCategory", "categoryIndex", paramCategoryIndex).value();
	utils->initialize("putChartCategory", "categoryIndex", paramCategoryIndex);

	bool failed = true;
	try
	{
		api->updateChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategoryIndex, paramCategory, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putChartCategory", "categoryIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putChartCategory", "categoryIndex", paramCategoryIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putChartCategory", "categoryIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putChartCategory", "categoryIndex", paramCategoryIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putChartCategory", "categoryIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putChartCategoryInvalidCategory) {
	utility::string_t paramName = utils->getTestValue("putChartCategory", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putChartCategory", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putChartCategory", "shapeIndex");
	int32_t paramCategoryIndex = utils->getIntTestValue("putChartCategory", "categoryIndex");
	std::shared_ptr<ChartCategory> paramCategory = utils->getTestValueForClass<ChartCategory>("putChartCategory", "category");
	utility::string_t paramPassword = utils->getTestValue("putChartCategory", "password");
	utility::string_t paramFolder = utils->getTestValue("putChartCategory", "folder");
	utility::string_t paramStorage = utils->getTestValue("putChartCategory", "storage");
	paramCategory = utils->getInvalidTestValueForClass<>("putChartCategory", "category", paramCategory);
	utils->initialize("putChartCategory", "category", paramCategory);

	bool failed = true;
	try
	{
		api->updateChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategoryIndex, paramCategory, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putChartCategory", "category");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putChartCategory", "category", paramCategory);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putChartCategory", "category");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putChartCategory", "category", paramCategory);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putChartCategory", "category"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putChartCategoryInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("putChartCategory", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putChartCategory", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putChartCategory", "shapeIndex");
	int32_t paramCategoryIndex = utils->getIntTestValue("putChartCategory", "categoryIndex");
	std::shared_ptr<ChartCategory> paramCategory = utils->getTestValueForClass<ChartCategory>("putChartCategory", "category");
	utility::string_t paramPassword = utils->getTestValue("putChartCategory", "password");
	utility::string_t paramFolder = utils->getTestValue("putChartCategory", "folder");
	utility::string_t paramStorage = utils->getTestValue("putChartCategory", "storage");
	paramPassword = utils->getInvalidTestValue("putChartCategory", "password", paramPassword);
	utils->initialize("putChartCategory", "password", paramPassword);

	bool failed = true;
	try
	{
		api->updateChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategoryIndex, paramCategory, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putChartCategory", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putChartCategory", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putChartCategory", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putChartCategory", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putChartCategory", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putChartCategoryInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("putChartCategory", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putChartCategory", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putChartCategory", "shapeIndex");
	int32_t paramCategoryIndex = utils->getIntTestValue("putChartCategory", "categoryIndex");
	std::shared_ptr<ChartCategory> paramCategory = utils->getTestValueForClass<ChartCategory>("putChartCategory", "category");
	utility::string_t paramPassword = utils->getTestValue("putChartCategory", "password");
	utility::string_t paramFolder = utils->getTestValue("putChartCategory", "folder");
	utility::string_t paramStorage = utils->getTestValue("putChartCategory", "storage");
	paramFolder = utils->getInvalidTestValue("putChartCategory", "folder", paramFolder);
	utils->initialize("putChartCategory", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->updateChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategoryIndex, paramCategory, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putChartCategory", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putChartCategory", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putChartCategory", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putChartCategory", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putChartCategory", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putChartCategoryInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("putChartCategory", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putChartCategory", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putChartCategory", "shapeIndex");
	int32_t paramCategoryIndex = utils->getIntTestValue("putChartCategory", "categoryIndex");
	std::shared_ptr<ChartCategory> paramCategory = utils->getTestValueForClass<ChartCategory>("putChartCategory", "category");
	utility::string_t paramPassword = utils->getTestValue("putChartCategory", "password");
	utility::string_t paramFolder = utils->getTestValue("putChartCategory", "folder");
	utility::string_t paramStorage = utils->getTestValue("putChartCategory", "storage");
	paramStorage = utils->getInvalidTestValue("putChartCategory", "storage", paramStorage);
	utils->initialize("putChartCategory", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->updateChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategoryIndex, paramCategory, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putChartCategory", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putChartCategory", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putChartCategory", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putChartCategory", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putChartCategory", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putChartDataPoint) {
	utility::string_t paramName = utils->getTestValue("putChartDataPoint", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putChartDataPoint", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putChartDataPoint", "shapeIndex");
	int32_t paramSeriesIndex = utils->getIntTestValue("putChartDataPoint", "seriesIndex");
	int32_t paramPointIndex = utils->getIntTestValue("putChartDataPoint", "pointIndex");
	std::shared_ptr<DataPoint> paramDataPoint = utils->getTestValueForClass<ScatterChartDataPoint>("putChartDataPoint", "dataPoint");
	utility::string_t paramPassword = utils->getTestValue("putChartDataPoint", "password");
	utility::string_t paramFolder = utils->getTestValue("putChartDataPoint", "folder");
	utility::string_t paramStorage = utils->getTestValue("putChartDataPoint", "storage");
	utils->initialize("putChartDataPoint", "");
	std::shared_ptr<Chart> result = api->updateChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramDataPoint, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, putChartDataPointInvalidName) {
	utility::string_t paramName = utils->getTestValue("putChartDataPoint", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putChartDataPoint", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putChartDataPoint", "shapeIndex");
	int32_t paramSeriesIndex = utils->getIntTestValue("putChartDataPoint", "seriesIndex");
	int32_t paramPointIndex = utils->getIntTestValue("putChartDataPoint", "pointIndex");
	std::shared_ptr<DataPoint> paramDataPoint = utils->getTestValueForClass<ScatterChartDataPoint>("putChartDataPoint", "dataPoint");
	utility::string_t paramPassword = utils->getTestValue("putChartDataPoint", "password");
	utility::string_t paramFolder = utils->getTestValue("putChartDataPoint", "folder");
	utility::string_t paramStorage = utils->getTestValue("putChartDataPoint", "storage");
	paramName = utils->getInvalidTestValue("putChartDataPoint", "name", paramName);
	utils->initialize("putChartDataPoint", "name", paramName);

	bool failed = true;
	try
	{
		api->updateChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramDataPoint, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putChartDataPoint", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putChartDataPoint", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putChartDataPoint", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putChartDataPoint", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putChartDataPoint", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putChartDataPointInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("putChartDataPoint", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putChartDataPoint", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putChartDataPoint", "shapeIndex");
	int32_t paramSeriesIndex = utils->getIntTestValue("putChartDataPoint", "seriesIndex");
	int32_t paramPointIndex = utils->getIntTestValue("putChartDataPoint", "pointIndex");
	std::shared_ptr<DataPoint> paramDataPoint = utils->getTestValueForClass<ScatterChartDataPoint>("putChartDataPoint", "dataPoint");
	utility::string_t paramPassword = utils->getTestValue("putChartDataPoint", "password");
	utility::string_t paramFolder = utils->getTestValue("putChartDataPoint", "folder");
	utility::string_t paramStorage = utils->getTestValue("putChartDataPoint", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("putChartDataPoint", "slideIndex", paramSlideIndex).value();
	utils->initialize("putChartDataPoint", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->updateChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramDataPoint, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putChartDataPoint", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putChartDataPoint", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putChartDataPoint", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putChartDataPoint", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putChartDataPoint", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putChartDataPointInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("putChartDataPoint", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putChartDataPoint", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putChartDataPoint", "shapeIndex");
	int32_t paramSeriesIndex = utils->getIntTestValue("putChartDataPoint", "seriesIndex");
	int32_t paramPointIndex = utils->getIntTestValue("putChartDataPoint", "pointIndex");
	std::shared_ptr<DataPoint> paramDataPoint = utils->getTestValueForClass<ScatterChartDataPoint>("putChartDataPoint", "dataPoint");
	utility::string_t paramPassword = utils->getTestValue("putChartDataPoint", "password");
	utility::string_t paramFolder = utils->getTestValue("putChartDataPoint", "folder");
	utility::string_t paramStorage = utils->getTestValue("putChartDataPoint", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("putChartDataPoint", "shapeIndex", paramShapeIndex).value();
	utils->initialize("putChartDataPoint", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->updateChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramDataPoint, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putChartDataPoint", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putChartDataPoint", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putChartDataPoint", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putChartDataPoint", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putChartDataPoint", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putChartDataPointInvalidSeriesIndex) {
	utility::string_t paramName = utils->getTestValue("putChartDataPoint", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putChartDataPoint", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putChartDataPoint", "shapeIndex");
	int32_t paramSeriesIndex = utils->getIntTestValue("putChartDataPoint", "seriesIndex");
	int32_t paramPointIndex = utils->getIntTestValue("putChartDataPoint", "pointIndex");
	std::shared_ptr<DataPoint> paramDataPoint = utils->getTestValueForClass<ScatterChartDataPoint>("putChartDataPoint", "dataPoint");
	utility::string_t paramPassword = utils->getTestValue("putChartDataPoint", "password");
	utility::string_t paramFolder = utils->getTestValue("putChartDataPoint", "folder");
	utility::string_t paramStorage = utils->getTestValue("putChartDataPoint", "storage");
	paramSeriesIndex = utils->getInvalidIntTestValue("putChartDataPoint", "seriesIndex", paramSeriesIndex).value();
	utils->initialize("putChartDataPoint", "seriesIndex", paramSeriesIndex);

	bool failed = true;
	try
	{
		api->updateChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramDataPoint, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putChartDataPoint", "seriesIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putChartDataPoint", "seriesIndex", paramSeriesIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putChartDataPoint", "seriesIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putChartDataPoint", "seriesIndex", paramSeriesIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putChartDataPoint", "seriesIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putChartDataPointInvalidPointIndex) {
	utility::string_t paramName = utils->getTestValue("putChartDataPoint", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putChartDataPoint", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putChartDataPoint", "shapeIndex");
	int32_t paramSeriesIndex = utils->getIntTestValue("putChartDataPoint", "seriesIndex");
	int32_t paramPointIndex = utils->getIntTestValue("putChartDataPoint", "pointIndex");
	std::shared_ptr<DataPoint> paramDataPoint = utils->getTestValueForClass<ScatterChartDataPoint>("putChartDataPoint", "dataPoint");
	utility::string_t paramPassword = utils->getTestValue("putChartDataPoint", "password");
	utility::string_t paramFolder = utils->getTestValue("putChartDataPoint", "folder");
	utility::string_t paramStorage = utils->getTestValue("putChartDataPoint", "storage");
	paramPointIndex = utils->getInvalidIntTestValue("putChartDataPoint", "pointIndex", paramPointIndex).value();
	utils->initialize("putChartDataPoint", "pointIndex", paramPointIndex);

	bool failed = true;
	try
	{
		api->updateChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramDataPoint, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putChartDataPoint", "pointIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putChartDataPoint", "pointIndex", paramPointIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putChartDataPoint", "pointIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putChartDataPoint", "pointIndex", paramPointIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putChartDataPoint", "pointIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putChartDataPointInvalidDataPoint) {
	utility::string_t paramName = utils->getTestValue("putChartDataPoint", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putChartDataPoint", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putChartDataPoint", "shapeIndex");
	int32_t paramSeriesIndex = utils->getIntTestValue("putChartDataPoint", "seriesIndex");
	int32_t paramPointIndex = utils->getIntTestValue("putChartDataPoint", "pointIndex");
	std::shared_ptr<DataPoint> paramDataPoint = utils->getTestValueForClass<ScatterChartDataPoint>("putChartDataPoint", "dataPoint");
	utility::string_t paramPassword = utils->getTestValue("putChartDataPoint", "password");
	utility::string_t paramFolder = utils->getTestValue("putChartDataPoint", "folder");
	utility::string_t paramStorage = utils->getTestValue("putChartDataPoint", "storage");
	paramDataPoint = utils->getInvalidTestValueForClass<>("putChartDataPoint", "dataPoint", paramDataPoint);
	utils->initialize("putChartDataPoint", "dataPoint", paramDataPoint);

	bool failed = true;
	try
	{
		api->updateChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramDataPoint, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putChartDataPoint", "dataPoint");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putChartDataPoint", "dataPoint", paramDataPoint);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putChartDataPoint", "dataPoint");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putChartDataPoint", "dataPoint", paramDataPoint);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putChartDataPoint", "dataPoint"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putChartDataPointInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("putChartDataPoint", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putChartDataPoint", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putChartDataPoint", "shapeIndex");
	int32_t paramSeriesIndex = utils->getIntTestValue("putChartDataPoint", "seriesIndex");
	int32_t paramPointIndex = utils->getIntTestValue("putChartDataPoint", "pointIndex");
	std::shared_ptr<DataPoint> paramDataPoint = utils->getTestValueForClass<ScatterChartDataPoint>("putChartDataPoint", "dataPoint");
	utility::string_t paramPassword = utils->getTestValue("putChartDataPoint", "password");
	utility::string_t paramFolder = utils->getTestValue("putChartDataPoint", "folder");
	utility::string_t paramStorage = utils->getTestValue("putChartDataPoint", "storage");
	paramPassword = utils->getInvalidTestValue("putChartDataPoint", "password", paramPassword);
	utils->initialize("putChartDataPoint", "password", paramPassword);

	bool failed = true;
	try
	{
		api->updateChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramDataPoint, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putChartDataPoint", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putChartDataPoint", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putChartDataPoint", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putChartDataPoint", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putChartDataPoint", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putChartDataPointInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("putChartDataPoint", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putChartDataPoint", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putChartDataPoint", "shapeIndex");
	int32_t paramSeriesIndex = utils->getIntTestValue("putChartDataPoint", "seriesIndex");
	int32_t paramPointIndex = utils->getIntTestValue("putChartDataPoint", "pointIndex");
	std::shared_ptr<DataPoint> paramDataPoint = utils->getTestValueForClass<ScatterChartDataPoint>("putChartDataPoint", "dataPoint");
	utility::string_t paramPassword = utils->getTestValue("putChartDataPoint", "password");
	utility::string_t paramFolder = utils->getTestValue("putChartDataPoint", "folder");
	utility::string_t paramStorage = utils->getTestValue("putChartDataPoint", "storage");
	paramFolder = utils->getInvalidTestValue("putChartDataPoint", "folder", paramFolder);
	utils->initialize("putChartDataPoint", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->updateChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramDataPoint, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putChartDataPoint", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putChartDataPoint", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putChartDataPoint", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putChartDataPoint", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putChartDataPoint", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putChartDataPointInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("putChartDataPoint", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putChartDataPoint", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putChartDataPoint", "shapeIndex");
	int32_t paramSeriesIndex = utils->getIntTestValue("putChartDataPoint", "seriesIndex");
	int32_t paramPointIndex = utils->getIntTestValue("putChartDataPoint", "pointIndex");
	std::shared_ptr<DataPoint> paramDataPoint = utils->getTestValueForClass<ScatterChartDataPoint>("putChartDataPoint", "dataPoint");
	utility::string_t paramPassword = utils->getTestValue("putChartDataPoint", "password");
	utility::string_t paramFolder = utils->getTestValue("putChartDataPoint", "folder");
	utility::string_t paramStorage = utils->getTestValue("putChartDataPoint", "storage");
	paramStorage = utils->getInvalidTestValue("putChartDataPoint", "storage", paramStorage);
	utils->initialize("putChartDataPoint", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->updateChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramDataPoint, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putChartDataPoint", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putChartDataPoint", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putChartDataPoint", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putChartDataPoint", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putChartDataPoint", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putChartSeries) {
	utility::string_t paramName = utils->getTestValue("putChartSeries", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putChartSeries", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putChartSeries", "shapeIndex");
	int32_t paramSeriesIndex = utils->getIntTestValue("putChartSeries", "seriesIndex");
	std::shared_ptr<Series> paramSeries = utils->getTestValueForClass<Series>("putChartSeries", "series");
	utility::string_t paramPassword = utils->getTestValue("putChartSeries", "password");
	utility::string_t paramFolder = utils->getTestValue("putChartSeries", "folder");
	utility::string_t paramStorage = utils->getTestValue("putChartSeries", "storage");
	utils->initialize("putChartSeries", "");
	std::shared_ptr<Chart> result = api->updateChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramSeries, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, putChartSeriesInvalidName) {
	utility::string_t paramName = utils->getTestValue("putChartSeries", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putChartSeries", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putChartSeries", "shapeIndex");
	int32_t paramSeriesIndex = utils->getIntTestValue("putChartSeries", "seriesIndex");
	std::shared_ptr<Series> paramSeries = utils->getTestValueForClass<Series>("putChartSeries", "series");
	utility::string_t paramPassword = utils->getTestValue("putChartSeries", "password");
	utility::string_t paramFolder = utils->getTestValue("putChartSeries", "folder");
	utility::string_t paramStorage = utils->getTestValue("putChartSeries", "storage");
	paramName = utils->getInvalidTestValue("putChartSeries", "name", paramName);
	utils->initialize("putChartSeries", "name", paramName);

	bool failed = true;
	try
	{
		api->updateChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramSeries, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putChartSeries", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putChartSeries", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putChartSeries", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putChartSeries", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putChartSeries", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putChartSeriesInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("putChartSeries", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putChartSeries", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putChartSeries", "shapeIndex");
	int32_t paramSeriesIndex = utils->getIntTestValue("putChartSeries", "seriesIndex");
	std::shared_ptr<Series> paramSeries = utils->getTestValueForClass<Series>("putChartSeries", "series");
	utility::string_t paramPassword = utils->getTestValue("putChartSeries", "password");
	utility::string_t paramFolder = utils->getTestValue("putChartSeries", "folder");
	utility::string_t paramStorage = utils->getTestValue("putChartSeries", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("putChartSeries", "slideIndex", paramSlideIndex).value();
	utils->initialize("putChartSeries", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->updateChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramSeries, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putChartSeries", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putChartSeries", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putChartSeries", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putChartSeries", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putChartSeries", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putChartSeriesInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("putChartSeries", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putChartSeries", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putChartSeries", "shapeIndex");
	int32_t paramSeriesIndex = utils->getIntTestValue("putChartSeries", "seriesIndex");
	std::shared_ptr<Series> paramSeries = utils->getTestValueForClass<Series>("putChartSeries", "series");
	utility::string_t paramPassword = utils->getTestValue("putChartSeries", "password");
	utility::string_t paramFolder = utils->getTestValue("putChartSeries", "folder");
	utility::string_t paramStorage = utils->getTestValue("putChartSeries", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("putChartSeries", "shapeIndex", paramShapeIndex).value();
	utils->initialize("putChartSeries", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->updateChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramSeries, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putChartSeries", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putChartSeries", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putChartSeries", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putChartSeries", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putChartSeries", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putChartSeriesInvalidSeriesIndex) {
	utility::string_t paramName = utils->getTestValue("putChartSeries", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putChartSeries", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putChartSeries", "shapeIndex");
	int32_t paramSeriesIndex = utils->getIntTestValue("putChartSeries", "seriesIndex");
	std::shared_ptr<Series> paramSeries = utils->getTestValueForClass<Series>("putChartSeries", "series");
	utility::string_t paramPassword = utils->getTestValue("putChartSeries", "password");
	utility::string_t paramFolder = utils->getTestValue("putChartSeries", "folder");
	utility::string_t paramStorage = utils->getTestValue("putChartSeries", "storage");
	paramSeriesIndex = utils->getInvalidIntTestValue("putChartSeries", "seriesIndex", paramSeriesIndex).value();
	utils->initialize("putChartSeries", "seriesIndex", paramSeriesIndex);

	bool failed = true;
	try
	{
		api->updateChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramSeries, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putChartSeries", "seriesIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putChartSeries", "seriesIndex", paramSeriesIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putChartSeries", "seriesIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putChartSeries", "seriesIndex", paramSeriesIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putChartSeries", "seriesIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putChartSeriesInvalidSeries) {
	utility::string_t paramName = utils->getTestValue("putChartSeries", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putChartSeries", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putChartSeries", "shapeIndex");
	int32_t paramSeriesIndex = utils->getIntTestValue("putChartSeries", "seriesIndex");
	std::shared_ptr<Series> paramSeries = utils->getTestValueForClass<Series>("putChartSeries", "series");
	utility::string_t paramPassword = utils->getTestValue("putChartSeries", "password");
	utility::string_t paramFolder = utils->getTestValue("putChartSeries", "folder");
	utility::string_t paramStorage = utils->getTestValue("putChartSeries", "storage");
	paramSeries = utils->getInvalidTestValueForClass<>("putChartSeries", "series", paramSeries);
	utils->initialize("putChartSeries", "series", paramSeries);

	bool failed = true;
	try
	{
		api->updateChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramSeries, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putChartSeries", "series");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putChartSeries", "series", paramSeries);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putChartSeries", "series");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putChartSeries", "series", paramSeries);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putChartSeries", "series"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putChartSeriesInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("putChartSeries", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putChartSeries", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putChartSeries", "shapeIndex");
	int32_t paramSeriesIndex = utils->getIntTestValue("putChartSeries", "seriesIndex");
	std::shared_ptr<Series> paramSeries = utils->getTestValueForClass<Series>("putChartSeries", "series");
	utility::string_t paramPassword = utils->getTestValue("putChartSeries", "password");
	utility::string_t paramFolder = utils->getTestValue("putChartSeries", "folder");
	utility::string_t paramStorage = utils->getTestValue("putChartSeries", "storage");
	paramPassword = utils->getInvalidTestValue("putChartSeries", "password", paramPassword);
	utils->initialize("putChartSeries", "password", paramPassword);

	bool failed = true;
	try
	{
		api->updateChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramSeries, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putChartSeries", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putChartSeries", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putChartSeries", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putChartSeries", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putChartSeries", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putChartSeriesInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("putChartSeries", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putChartSeries", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putChartSeries", "shapeIndex");
	int32_t paramSeriesIndex = utils->getIntTestValue("putChartSeries", "seriesIndex");
	std::shared_ptr<Series> paramSeries = utils->getTestValueForClass<Series>("putChartSeries", "series");
	utility::string_t paramPassword = utils->getTestValue("putChartSeries", "password");
	utility::string_t paramFolder = utils->getTestValue("putChartSeries", "folder");
	utility::string_t paramStorage = utils->getTestValue("putChartSeries", "storage");
	paramFolder = utils->getInvalidTestValue("putChartSeries", "folder", paramFolder);
	utils->initialize("putChartSeries", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->updateChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramSeries, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putChartSeries", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putChartSeries", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putChartSeries", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putChartSeries", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putChartSeries", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putChartSeriesInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("putChartSeries", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putChartSeries", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putChartSeries", "shapeIndex");
	int32_t paramSeriesIndex = utils->getIntTestValue("putChartSeries", "seriesIndex");
	std::shared_ptr<Series> paramSeries = utils->getTestValueForClass<Series>("putChartSeries", "series");
	utility::string_t paramPassword = utils->getTestValue("putChartSeries", "password");
	utility::string_t paramFolder = utils->getTestValue("putChartSeries", "folder");
	utility::string_t paramStorage = utils->getTestValue("putChartSeries", "storage");
	paramStorage = utils->getInvalidTestValue("putChartSeries", "storage", paramStorage);
	utils->initialize("putChartSeries", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->updateChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramSeries, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putChartSeries", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putChartSeries", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putChartSeries", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putChartSeries", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putChartSeries", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putExportShape) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("putExportShape", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("putExportShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putExportShape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("putExportShape", "format");
	utility::string_t paramOutPath = utils->getTestValue("putExportShape", "outPath");
	utility::string_t paramPassword = utils->getTestValue("putExportShape", "password");
	utility::string_t paramStorage = utils->getTestValue("putExportShape", "storage");
	auto paramScaleX = utils->getOptionalDoubleTestValue("putExportShape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("putExportShape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("putExportShape", "bounds");
	utility::string_t paramFontsFolder = utils->getTestValue("putExportShape", "fontsFolder");
	utils->initialize("putExportShape", "");
	api->saveShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramPassword, paramStorage, paramScaleX, paramScaleY, paramBounds, paramFontsFolder).wait();
}

TEST_F(SlidesApiTest, putExportShapeInvalidDocument) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("putExportShape", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("putExportShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putExportShape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("putExportShape", "format");
	utility::string_t paramOutPath = utils->getTestValue("putExportShape", "outPath");
	utility::string_t paramPassword = utils->getTestValue("putExportShape", "password");
	utility::string_t paramStorage = utils->getTestValue("putExportShape", "storage");
	auto paramScaleX = utils->getOptionalDoubleTestValue("putExportShape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("putExportShape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("putExportShape", "bounds");
	utility::string_t paramFontsFolder = utils->getTestValue("putExportShape", "fontsFolder");
	paramDocument = utils->getInvalidBinaryTestValue("putExportShape", "document", paramDocument);
	utils->initialize("putExportShape", "document", paramDocument);

	bool failed = true;
	try
	{
		api->saveShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramPassword, paramStorage, paramScaleX, paramScaleY, paramBounds, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putExportShape", "document");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putExportShape", "document", paramDocument);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putExportShape", "document");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putExportShape", "document", paramDocument);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putExportShape", "document"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putExportShapeInvalidSlideIndex) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("putExportShape", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("putExportShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putExportShape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("putExportShape", "format");
	utility::string_t paramOutPath = utils->getTestValue("putExportShape", "outPath");
	utility::string_t paramPassword = utils->getTestValue("putExportShape", "password");
	utility::string_t paramStorage = utils->getTestValue("putExportShape", "storage");
	auto paramScaleX = utils->getOptionalDoubleTestValue("putExportShape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("putExportShape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("putExportShape", "bounds");
	utility::string_t paramFontsFolder = utils->getTestValue("putExportShape", "fontsFolder");
	paramSlideIndex = utils->getInvalidIntTestValue("putExportShape", "slideIndex", paramSlideIndex).value();
	utils->initialize("putExportShape", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->saveShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramPassword, paramStorage, paramScaleX, paramScaleY, paramBounds, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putExportShape", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putExportShape", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putExportShape", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putExportShape", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putExportShape", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putExportShapeInvalidShapeIndex) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("putExportShape", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("putExportShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putExportShape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("putExportShape", "format");
	utility::string_t paramOutPath = utils->getTestValue("putExportShape", "outPath");
	utility::string_t paramPassword = utils->getTestValue("putExportShape", "password");
	utility::string_t paramStorage = utils->getTestValue("putExportShape", "storage");
	auto paramScaleX = utils->getOptionalDoubleTestValue("putExportShape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("putExportShape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("putExportShape", "bounds");
	utility::string_t paramFontsFolder = utils->getTestValue("putExportShape", "fontsFolder");
	paramShapeIndex = utils->getInvalidIntTestValue("putExportShape", "shapeIndex", paramShapeIndex).value();
	utils->initialize("putExportShape", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->saveShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramPassword, paramStorage, paramScaleX, paramScaleY, paramBounds, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putExportShape", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putExportShape", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putExportShape", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putExportShape", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putExportShape", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putExportShapeInvalidFormat) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("putExportShape", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("putExportShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putExportShape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("putExportShape", "format");
	utility::string_t paramOutPath = utils->getTestValue("putExportShape", "outPath");
	utility::string_t paramPassword = utils->getTestValue("putExportShape", "password");
	utility::string_t paramStorage = utils->getTestValue("putExportShape", "storage");
	auto paramScaleX = utils->getOptionalDoubleTestValue("putExportShape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("putExportShape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("putExportShape", "bounds");
	utility::string_t paramFontsFolder = utils->getTestValue("putExportShape", "fontsFolder");
	paramFormat = utils->getInvalidTestValue("putExportShape", "format", paramFormat);
	utils->initialize("putExportShape", "format", paramFormat);

	bool failed = true;
	try
	{
		api->saveShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramPassword, paramStorage, paramScaleX, paramScaleY, paramBounds, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putExportShape", "format");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putExportShape", "format", paramFormat);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putExportShape", "format");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putExportShape", "format", paramFormat);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putExportShape", "format"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putExportShapeInvalidOutPath) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("putExportShape", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("putExportShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putExportShape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("putExportShape", "format");
	utility::string_t paramOutPath = utils->getTestValue("putExportShape", "outPath");
	utility::string_t paramPassword = utils->getTestValue("putExportShape", "password");
	utility::string_t paramStorage = utils->getTestValue("putExportShape", "storage");
	auto paramScaleX = utils->getOptionalDoubleTestValue("putExportShape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("putExportShape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("putExportShape", "bounds");
	utility::string_t paramFontsFolder = utils->getTestValue("putExportShape", "fontsFolder");
	paramOutPath = utils->getInvalidTestValue("putExportShape", "outPath", paramOutPath);
	utils->initialize("putExportShape", "outPath", paramOutPath);

	bool failed = true;
	try
	{
		api->saveShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramPassword, paramStorage, paramScaleX, paramScaleY, paramBounds, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putExportShape", "outPath");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putExportShape", "outPath", paramOutPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putExportShape", "outPath");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putExportShape", "outPath", paramOutPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putExportShape", "outPath"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putExportShapeInvalidPassword) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("putExportShape", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("putExportShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putExportShape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("putExportShape", "format");
	utility::string_t paramOutPath = utils->getTestValue("putExportShape", "outPath");
	utility::string_t paramPassword = utils->getTestValue("putExportShape", "password");
	utility::string_t paramStorage = utils->getTestValue("putExportShape", "storage");
	auto paramScaleX = utils->getOptionalDoubleTestValue("putExportShape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("putExportShape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("putExportShape", "bounds");
	utility::string_t paramFontsFolder = utils->getTestValue("putExportShape", "fontsFolder");
	paramPassword = utils->getInvalidTestValue("putExportShape", "password", paramPassword);
	utils->initialize("putExportShape", "password", paramPassword);

	bool failed = true;
	try
	{
		api->saveShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramPassword, paramStorage, paramScaleX, paramScaleY, paramBounds, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putExportShape", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putExportShape", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putExportShape", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putExportShape", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putExportShape", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putExportShapeInvalidStorage) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("putExportShape", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("putExportShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putExportShape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("putExportShape", "format");
	utility::string_t paramOutPath = utils->getTestValue("putExportShape", "outPath");
	utility::string_t paramPassword = utils->getTestValue("putExportShape", "password");
	utility::string_t paramStorage = utils->getTestValue("putExportShape", "storage");
	auto paramScaleX = utils->getOptionalDoubleTestValue("putExportShape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("putExportShape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("putExportShape", "bounds");
	utility::string_t paramFontsFolder = utils->getTestValue("putExportShape", "fontsFolder");
	paramStorage = utils->getInvalidTestValue("putExportShape", "storage", paramStorage);
	utils->initialize("putExportShape", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->saveShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramPassword, paramStorage, paramScaleX, paramScaleY, paramBounds, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putExportShape", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putExportShape", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putExportShape", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putExportShape", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putExportShape", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putExportShapeInvalidScaleX) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("putExportShape", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("putExportShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putExportShape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("putExportShape", "format");
	utility::string_t paramOutPath = utils->getTestValue("putExportShape", "outPath");
	utility::string_t paramPassword = utils->getTestValue("putExportShape", "password");
	utility::string_t paramStorage = utils->getTestValue("putExportShape", "storage");
	auto paramScaleX = utils->getOptionalDoubleTestValue("putExportShape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("putExportShape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("putExportShape", "bounds");
	utility::string_t paramFontsFolder = utils->getTestValue("putExportShape", "fontsFolder");
	paramScaleX = utils->getInvalidDoubleTestValue("putExportShape", "scaleX", paramScaleX).value();
	utils->initialize("putExportShape", "scaleX", paramScaleX);

	bool failed = true;
	try
	{
		api->saveShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramPassword, paramStorage, paramScaleX, paramScaleY, paramBounds, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putExportShape", "scaleX");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putExportShape", "scaleX", paramScaleX);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putExportShape", "scaleX");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putExportShape", "scaleX", paramScaleX);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putExportShape", "scaleX"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putExportShapeInvalidScaleY) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("putExportShape", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("putExportShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putExportShape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("putExportShape", "format");
	utility::string_t paramOutPath = utils->getTestValue("putExportShape", "outPath");
	utility::string_t paramPassword = utils->getTestValue("putExportShape", "password");
	utility::string_t paramStorage = utils->getTestValue("putExportShape", "storage");
	auto paramScaleX = utils->getOptionalDoubleTestValue("putExportShape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("putExportShape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("putExportShape", "bounds");
	utility::string_t paramFontsFolder = utils->getTestValue("putExportShape", "fontsFolder");
	paramScaleY = utils->getInvalidDoubleTestValue("putExportShape", "scaleY", paramScaleY).value();
	utils->initialize("putExportShape", "scaleY", paramScaleY);

	bool failed = true;
	try
	{
		api->saveShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramPassword, paramStorage, paramScaleX, paramScaleY, paramBounds, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putExportShape", "scaleY");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putExportShape", "scaleY", paramScaleY);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putExportShape", "scaleY");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putExportShape", "scaleY", paramScaleY);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putExportShape", "scaleY"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putExportShapeInvalidBounds) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("putExportShape", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("putExportShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putExportShape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("putExportShape", "format");
	utility::string_t paramOutPath = utils->getTestValue("putExportShape", "outPath");
	utility::string_t paramPassword = utils->getTestValue("putExportShape", "password");
	utility::string_t paramStorage = utils->getTestValue("putExportShape", "storage");
	auto paramScaleX = utils->getOptionalDoubleTestValue("putExportShape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("putExportShape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("putExportShape", "bounds");
	utility::string_t paramFontsFolder = utils->getTestValue("putExportShape", "fontsFolder");
	paramBounds = utils->getInvalidTestValue("putExportShape", "bounds", paramBounds);
	utils->initialize("putExportShape", "bounds", paramBounds);

	bool failed = true;
	try
	{
		api->saveShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramPassword, paramStorage, paramScaleX, paramScaleY, paramBounds, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putExportShape", "bounds");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putExportShape", "bounds", paramBounds);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putExportShape", "bounds");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putExportShape", "bounds", paramBounds);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putExportShape", "bounds"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putExportShapeInvalidFontsFolder) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("putExportShape", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("putExportShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putExportShape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("putExportShape", "format");
	utility::string_t paramOutPath = utils->getTestValue("putExportShape", "outPath");
	utility::string_t paramPassword = utils->getTestValue("putExportShape", "password");
	utility::string_t paramStorage = utils->getTestValue("putExportShape", "storage");
	auto paramScaleX = utils->getOptionalDoubleTestValue("putExportShape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("putExportShape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("putExportShape", "bounds");
	utility::string_t paramFontsFolder = utils->getTestValue("putExportShape", "fontsFolder");
	paramFontsFolder = utils->getInvalidTestValue("putExportShape", "fontsFolder", paramFontsFolder);
	utils->initialize("putExportShape", "fontsFolder", paramFontsFolder);

	bool failed = true;
	try
	{
		api->saveShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramPassword, paramStorage, paramScaleX, paramScaleY, paramBounds, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putExportShape", "fontsFolder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putExportShape", "fontsFolder", paramFontsFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putExportShape", "fontsFolder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putExportShape", "fontsFolder", paramFontsFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putExportShape", "fontsFolder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putExportSlide) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("putExportSlide", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("putExportSlide", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("putExportSlide", "format");
	utility::string_t paramOutPath = utils->getTestValue("putExportSlide", "outPath");
	auto paramWidth = utils->getOptionalIntTestValue("putExportSlide", "width");
	auto paramHeight = utils->getOptionalIntTestValue("putExportSlide", "height");
	utility::string_t paramPassword = utils->getTestValue("putExportSlide", "password");
	utility::string_t paramStorage = utils->getTestValue("putExportSlide", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("putExportSlide", "fontsFolder");
	utils->initialize("putExportSlide", "");
	api->saveSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramOutPath, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder).wait();
}

TEST_F(SlidesApiTest, putExportSlideInvalidDocument) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("putExportSlide", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("putExportSlide", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("putExportSlide", "format");
	utility::string_t paramOutPath = utils->getTestValue("putExportSlide", "outPath");
	auto paramWidth = utils->getOptionalIntTestValue("putExportSlide", "width");
	auto paramHeight = utils->getOptionalIntTestValue("putExportSlide", "height");
	utility::string_t paramPassword = utils->getTestValue("putExportSlide", "password");
	utility::string_t paramStorage = utils->getTestValue("putExportSlide", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("putExportSlide", "fontsFolder");
	paramDocument = utils->getInvalidBinaryTestValue("putExportSlide", "document", paramDocument);
	utils->initialize("putExportSlide", "document", paramDocument);

	bool failed = true;
	try
	{
		api->saveSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramOutPath, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putExportSlide", "document");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putExportSlide", "document", paramDocument);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putExportSlide", "document");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putExportSlide", "document", paramDocument);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putExportSlide", "document"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putExportSlideInvalidSlideIndex) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("putExportSlide", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("putExportSlide", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("putExportSlide", "format");
	utility::string_t paramOutPath = utils->getTestValue("putExportSlide", "outPath");
	auto paramWidth = utils->getOptionalIntTestValue("putExportSlide", "width");
	auto paramHeight = utils->getOptionalIntTestValue("putExportSlide", "height");
	utility::string_t paramPassword = utils->getTestValue("putExportSlide", "password");
	utility::string_t paramStorage = utils->getTestValue("putExportSlide", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("putExportSlide", "fontsFolder");
	paramSlideIndex = utils->getInvalidIntTestValue("putExportSlide", "slideIndex", paramSlideIndex).value();
	utils->initialize("putExportSlide", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->saveSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramOutPath, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putExportSlide", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putExportSlide", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putExportSlide", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putExportSlide", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putExportSlide", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putExportSlideInvalidFormat) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("putExportSlide", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("putExportSlide", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("putExportSlide", "format");
	utility::string_t paramOutPath = utils->getTestValue("putExportSlide", "outPath");
	auto paramWidth = utils->getOptionalIntTestValue("putExportSlide", "width");
	auto paramHeight = utils->getOptionalIntTestValue("putExportSlide", "height");
	utility::string_t paramPassword = utils->getTestValue("putExportSlide", "password");
	utility::string_t paramStorage = utils->getTestValue("putExportSlide", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("putExportSlide", "fontsFolder");
	paramFormat = utils->getInvalidTestValue("putExportSlide", "format", paramFormat);
	utils->initialize("putExportSlide", "format", paramFormat);

	bool failed = true;
	try
	{
		api->saveSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramOutPath, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putExportSlide", "format");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putExportSlide", "format", paramFormat);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putExportSlide", "format");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putExportSlide", "format", paramFormat);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putExportSlide", "format"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putExportSlideInvalidOutPath) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("putExportSlide", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("putExportSlide", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("putExportSlide", "format");
	utility::string_t paramOutPath = utils->getTestValue("putExportSlide", "outPath");
	auto paramWidth = utils->getOptionalIntTestValue("putExportSlide", "width");
	auto paramHeight = utils->getOptionalIntTestValue("putExportSlide", "height");
	utility::string_t paramPassword = utils->getTestValue("putExportSlide", "password");
	utility::string_t paramStorage = utils->getTestValue("putExportSlide", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("putExportSlide", "fontsFolder");
	paramOutPath = utils->getInvalidTestValue("putExportSlide", "outPath", paramOutPath);
	utils->initialize("putExportSlide", "outPath", paramOutPath);

	bool failed = true;
	try
	{
		api->saveSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramOutPath, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putExportSlide", "outPath");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putExportSlide", "outPath", paramOutPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putExportSlide", "outPath");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putExportSlide", "outPath", paramOutPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putExportSlide", "outPath"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putExportSlideInvalidWidth) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("putExportSlide", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("putExportSlide", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("putExportSlide", "format");
	utility::string_t paramOutPath = utils->getTestValue("putExportSlide", "outPath");
	auto paramWidth = utils->getOptionalIntTestValue("putExportSlide", "width");
	auto paramHeight = utils->getOptionalIntTestValue("putExportSlide", "height");
	utility::string_t paramPassword = utils->getTestValue("putExportSlide", "password");
	utility::string_t paramStorage = utils->getTestValue("putExportSlide", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("putExportSlide", "fontsFolder");
	paramWidth = utils->getInvalidIntTestValue("putExportSlide", "width", paramWidth).value();
	utils->initialize("putExportSlide", "width", paramWidth);

	bool failed = true;
	try
	{
		api->saveSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramOutPath, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putExportSlide", "width");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putExportSlide", "width", paramWidth);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putExportSlide", "width");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putExportSlide", "width", paramWidth);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putExportSlide", "width"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putExportSlideInvalidHeight) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("putExportSlide", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("putExportSlide", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("putExportSlide", "format");
	utility::string_t paramOutPath = utils->getTestValue("putExportSlide", "outPath");
	auto paramWidth = utils->getOptionalIntTestValue("putExportSlide", "width");
	auto paramHeight = utils->getOptionalIntTestValue("putExportSlide", "height");
	utility::string_t paramPassword = utils->getTestValue("putExportSlide", "password");
	utility::string_t paramStorage = utils->getTestValue("putExportSlide", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("putExportSlide", "fontsFolder");
	paramHeight = utils->getInvalidIntTestValue("putExportSlide", "height", paramHeight).value();
	utils->initialize("putExportSlide", "height", paramHeight);

	bool failed = true;
	try
	{
		api->saveSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramOutPath, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putExportSlide", "height");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putExportSlide", "height", paramHeight);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putExportSlide", "height");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putExportSlide", "height", paramHeight);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putExportSlide", "height"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putExportSlideInvalidPassword) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("putExportSlide", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("putExportSlide", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("putExportSlide", "format");
	utility::string_t paramOutPath = utils->getTestValue("putExportSlide", "outPath");
	auto paramWidth = utils->getOptionalIntTestValue("putExportSlide", "width");
	auto paramHeight = utils->getOptionalIntTestValue("putExportSlide", "height");
	utility::string_t paramPassword = utils->getTestValue("putExportSlide", "password");
	utility::string_t paramStorage = utils->getTestValue("putExportSlide", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("putExportSlide", "fontsFolder");
	paramPassword = utils->getInvalidTestValue("putExportSlide", "password", paramPassword);
	utils->initialize("putExportSlide", "password", paramPassword);

	bool failed = true;
	try
	{
		api->saveSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramOutPath, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putExportSlide", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putExportSlide", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putExportSlide", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putExportSlide", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putExportSlide", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putExportSlideInvalidStorage) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("putExportSlide", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("putExportSlide", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("putExportSlide", "format");
	utility::string_t paramOutPath = utils->getTestValue("putExportSlide", "outPath");
	auto paramWidth = utils->getOptionalIntTestValue("putExportSlide", "width");
	auto paramHeight = utils->getOptionalIntTestValue("putExportSlide", "height");
	utility::string_t paramPassword = utils->getTestValue("putExportSlide", "password");
	utility::string_t paramStorage = utils->getTestValue("putExportSlide", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("putExportSlide", "fontsFolder");
	paramStorage = utils->getInvalidTestValue("putExportSlide", "storage", paramStorage);
	utils->initialize("putExportSlide", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->saveSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramOutPath, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putExportSlide", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putExportSlide", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putExportSlide", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putExportSlide", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putExportSlide", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putExportSlideInvalidFontsFolder) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("putExportSlide", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("putExportSlide", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("putExportSlide", "format");
	utility::string_t paramOutPath = utils->getTestValue("putExportSlide", "outPath");
	auto paramWidth = utils->getOptionalIntTestValue("putExportSlide", "width");
	auto paramHeight = utils->getOptionalIntTestValue("putExportSlide", "height");
	utility::string_t paramPassword = utils->getTestValue("putExportSlide", "password");
	utility::string_t paramStorage = utils->getTestValue("putExportSlide", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("putExportSlide", "fontsFolder");
	paramFontsFolder = utils->getInvalidTestValue("putExportSlide", "fontsFolder", paramFontsFolder);
	utils->initialize("putExportSlide", "fontsFolder", paramFontsFolder);

	bool failed = true;
	try
	{
		api->saveSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramOutPath, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putExportSlide", "fontsFolder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putExportSlide", "fontsFolder", paramFontsFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putExportSlide", "fontsFolder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putExportSlide", "fontsFolder", paramFontsFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putExportSlide", "fontsFolder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putLayoutSlide) {
	utility::string_t paramName = utils->getTestValue("putLayoutSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putLayoutSlide", "slideIndex");
	std::shared_ptr<LayoutSlide> paramSlideDto = utils->getTestValueForClass<LayoutSlide>("putLayoutSlide", "slideDto");
	utility::string_t paramPassword = utils->getTestValue("putLayoutSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("putLayoutSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("putLayoutSlide", "storage");
	utils->initialize("putLayoutSlide", "");
	std::shared_ptr<LayoutSlide> result = api->updateLayoutSlide(paramName, paramSlideIndex, paramSlideDto, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, putLayoutSlideInvalidName) {
	utility::string_t paramName = utils->getTestValue("putLayoutSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putLayoutSlide", "slideIndex");
	std::shared_ptr<LayoutSlide> paramSlideDto = utils->getTestValueForClass<LayoutSlide>("putLayoutSlide", "slideDto");
	utility::string_t paramPassword = utils->getTestValue("putLayoutSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("putLayoutSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("putLayoutSlide", "storage");
	paramName = utils->getInvalidTestValue("putLayoutSlide", "name", paramName);
	utils->initialize("putLayoutSlide", "name", paramName);

	bool failed = true;
	try
	{
		api->updateLayoutSlide(paramName, paramSlideIndex, paramSlideDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putLayoutSlide", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putLayoutSlide", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putLayoutSlide", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putLayoutSlide", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putLayoutSlide", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putLayoutSlideInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("putLayoutSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putLayoutSlide", "slideIndex");
	std::shared_ptr<LayoutSlide> paramSlideDto = utils->getTestValueForClass<LayoutSlide>("putLayoutSlide", "slideDto");
	utility::string_t paramPassword = utils->getTestValue("putLayoutSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("putLayoutSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("putLayoutSlide", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("putLayoutSlide", "slideIndex", paramSlideIndex).value();
	utils->initialize("putLayoutSlide", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->updateLayoutSlide(paramName, paramSlideIndex, paramSlideDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putLayoutSlide", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putLayoutSlide", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putLayoutSlide", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putLayoutSlide", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putLayoutSlide", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putLayoutSlideInvalidSlideDto) {
	utility::string_t paramName = utils->getTestValue("putLayoutSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putLayoutSlide", "slideIndex");
	std::shared_ptr<LayoutSlide> paramSlideDto = utils->getTestValueForClass<LayoutSlide>("putLayoutSlide", "slideDto");
	utility::string_t paramPassword = utils->getTestValue("putLayoutSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("putLayoutSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("putLayoutSlide", "storage");
	paramSlideDto = utils->getInvalidTestValueForClass<>("putLayoutSlide", "slideDto", paramSlideDto);
	utils->initialize("putLayoutSlide", "slideDto", paramSlideDto);

	bool failed = true;
	try
	{
		api->updateLayoutSlide(paramName, paramSlideIndex, paramSlideDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putLayoutSlide", "slideDto");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putLayoutSlide", "slideDto", paramSlideDto);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putLayoutSlide", "slideDto");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putLayoutSlide", "slideDto", paramSlideDto);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putLayoutSlide", "slideDto"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putLayoutSlideInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("putLayoutSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putLayoutSlide", "slideIndex");
	std::shared_ptr<LayoutSlide> paramSlideDto = utils->getTestValueForClass<LayoutSlide>("putLayoutSlide", "slideDto");
	utility::string_t paramPassword = utils->getTestValue("putLayoutSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("putLayoutSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("putLayoutSlide", "storage");
	paramPassword = utils->getInvalidTestValue("putLayoutSlide", "password", paramPassword);
	utils->initialize("putLayoutSlide", "password", paramPassword);

	bool failed = true;
	try
	{
		api->updateLayoutSlide(paramName, paramSlideIndex, paramSlideDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putLayoutSlide", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putLayoutSlide", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putLayoutSlide", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putLayoutSlide", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putLayoutSlide", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putLayoutSlideInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("putLayoutSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putLayoutSlide", "slideIndex");
	std::shared_ptr<LayoutSlide> paramSlideDto = utils->getTestValueForClass<LayoutSlide>("putLayoutSlide", "slideDto");
	utility::string_t paramPassword = utils->getTestValue("putLayoutSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("putLayoutSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("putLayoutSlide", "storage");
	paramFolder = utils->getInvalidTestValue("putLayoutSlide", "folder", paramFolder);
	utils->initialize("putLayoutSlide", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->updateLayoutSlide(paramName, paramSlideIndex, paramSlideDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putLayoutSlide", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putLayoutSlide", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putLayoutSlide", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putLayoutSlide", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putLayoutSlide", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putLayoutSlideInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("putLayoutSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putLayoutSlide", "slideIndex");
	std::shared_ptr<LayoutSlide> paramSlideDto = utils->getTestValueForClass<LayoutSlide>("putLayoutSlide", "slideDto");
	utility::string_t paramPassword = utils->getTestValue("putLayoutSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("putLayoutSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("putLayoutSlide", "storage");
	paramStorage = utils->getInvalidTestValue("putLayoutSlide", "storage", paramStorage);
	utils->initialize("putLayoutSlide", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->updateLayoutSlide(paramName, paramSlideIndex, paramSlideDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putLayoutSlide", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putLayoutSlide", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putLayoutSlide", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putLayoutSlide", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putLayoutSlide", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putNotesSlideHeaderFooter) {
	utility::string_t paramName = utils->getTestValue("putNotesSlideHeaderFooter", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putNotesSlideHeaderFooter", "slideIndex");
	std::shared_ptr<NotesSlideHeaderFooter> paramDto = utils->getTestValueForClass<NotesSlideHeaderFooter>("putNotesSlideHeaderFooter", "dto");
	utility::string_t paramPassword = utils->getTestValue("putNotesSlideHeaderFooter", "password");
	utility::string_t paramFolder = utils->getTestValue("putNotesSlideHeaderFooter", "folder");
	utility::string_t paramStorage = utils->getTestValue("putNotesSlideHeaderFooter", "storage");
	utils->initialize("putNotesSlideHeaderFooter", "");
	std::shared_ptr<NotesSlideHeaderFooter> result = api->setNotesSlideHeaderFooter(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, putNotesSlideHeaderFooterInvalidName) {
	utility::string_t paramName = utils->getTestValue("putNotesSlideHeaderFooter", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putNotesSlideHeaderFooter", "slideIndex");
	std::shared_ptr<NotesSlideHeaderFooter> paramDto = utils->getTestValueForClass<NotesSlideHeaderFooter>("putNotesSlideHeaderFooter", "dto");
	utility::string_t paramPassword = utils->getTestValue("putNotesSlideHeaderFooter", "password");
	utility::string_t paramFolder = utils->getTestValue("putNotesSlideHeaderFooter", "folder");
	utility::string_t paramStorage = utils->getTestValue("putNotesSlideHeaderFooter", "storage");
	paramName = utils->getInvalidTestValue("putNotesSlideHeaderFooter", "name", paramName);
	utils->initialize("putNotesSlideHeaderFooter", "name", paramName);

	bool failed = true;
	try
	{
		api->setNotesSlideHeaderFooter(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putNotesSlideHeaderFooter", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putNotesSlideHeaderFooter", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putNotesSlideHeaderFooter", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putNotesSlideHeaderFooter", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putNotesSlideHeaderFooter", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putNotesSlideHeaderFooterInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("putNotesSlideHeaderFooter", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putNotesSlideHeaderFooter", "slideIndex");
	std::shared_ptr<NotesSlideHeaderFooter> paramDto = utils->getTestValueForClass<NotesSlideHeaderFooter>("putNotesSlideHeaderFooter", "dto");
	utility::string_t paramPassword = utils->getTestValue("putNotesSlideHeaderFooter", "password");
	utility::string_t paramFolder = utils->getTestValue("putNotesSlideHeaderFooter", "folder");
	utility::string_t paramStorage = utils->getTestValue("putNotesSlideHeaderFooter", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("putNotesSlideHeaderFooter", "slideIndex", paramSlideIndex).value();
	utils->initialize("putNotesSlideHeaderFooter", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->setNotesSlideHeaderFooter(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putNotesSlideHeaderFooter", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putNotesSlideHeaderFooter", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putNotesSlideHeaderFooter", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putNotesSlideHeaderFooter", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putNotesSlideHeaderFooter", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putNotesSlideHeaderFooterInvalidDto) {
	utility::string_t paramName = utils->getTestValue("putNotesSlideHeaderFooter", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putNotesSlideHeaderFooter", "slideIndex");
	std::shared_ptr<NotesSlideHeaderFooter> paramDto = utils->getTestValueForClass<NotesSlideHeaderFooter>("putNotesSlideHeaderFooter", "dto");
	utility::string_t paramPassword = utils->getTestValue("putNotesSlideHeaderFooter", "password");
	utility::string_t paramFolder = utils->getTestValue("putNotesSlideHeaderFooter", "folder");
	utility::string_t paramStorage = utils->getTestValue("putNotesSlideHeaderFooter", "storage");
	paramDto = utils->getInvalidTestValueForClass<>("putNotesSlideHeaderFooter", "dto", paramDto);
	utils->initialize("putNotesSlideHeaderFooter", "dto", paramDto);

	bool failed = true;
	try
	{
		api->setNotesSlideHeaderFooter(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putNotesSlideHeaderFooter", "dto");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putNotesSlideHeaderFooter", "dto", paramDto);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putNotesSlideHeaderFooter", "dto");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putNotesSlideHeaderFooter", "dto", paramDto);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putNotesSlideHeaderFooter", "dto"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putNotesSlideHeaderFooterInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("putNotesSlideHeaderFooter", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putNotesSlideHeaderFooter", "slideIndex");
	std::shared_ptr<NotesSlideHeaderFooter> paramDto = utils->getTestValueForClass<NotesSlideHeaderFooter>("putNotesSlideHeaderFooter", "dto");
	utility::string_t paramPassword = utils->getTestValue("putNotesSlideHeaderFooter", "password");
	utility::string_t paramFolder = utils->getTestValue("putNotesSlideHeaderFooter", "folder");
	utility::string_t paramStorage = utils->getTestValue("putNotesSlideHeaderFooter", "storage");
	paramPassword = utils->getInvalidTestValue("putNotesSlideHeaderFooter", "password", paramPassword);
	utils->initialize("putNotesSlideHeaderFooter", "password", paramPassword);

	bool failed = true;
	try
	{
		api->setNotesSlideHeaderFooter(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putNotesSlideHeaderFooter", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putNotesSlideHeaderFooter", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putNotesSlideHeaderFooter", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putNotesSlideHeaderFooter", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putNotesSlideHeaderFooter", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putNotesSlideHeaderFooterInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("putNotesSlideHeaderFooter", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putNotesSlideHeaderFooter", "slideIndex");
	std::shared_ptr<NotesSlideHeaderFooter> paramDto = utils->getTestValueForClass<NotesSlideHeaderFooter>("putNotesSlideHeaderFooter", "dto");
	utility::string_t paramPassword = utils->getTestValue("putNotesSlideHeaderFooter", "password");
	utility::string_t paramFolder = utils->getTestValue("putNotesSlideHeaderFooter", "folder");
	utility::string_t paramStorage = utils->getTestValue("putNotesSlideHeaderFooter", "storage");
	paramFolder = utils->getInvalidTestValue("putNotesSlideHeaderFooter", "folder", paramFolder);
	utils->initialize("putNotesSlideHeaderFooter", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->setNotesSlideHeaderFooter(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putNotesSlideHeaderFooter", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putNotesSlideHeaderFooter", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putNotesSlideHeaderFooter", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putNotesSlideHeaderFooter", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putNotesSlideHeaderFooter", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putNotesSlideHeaderFooterInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("putNotesSlideHeaderFooter", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putNotesSlideHeaderFooter", "slideIndex");
	std::shared_ptr<NotesSlideHeaderFooter> paramDto = utils->getTestValueForClass<NotesSlideHeaderFooter>("putNotesSlideHeaderFooter", "dto");
	utility::string_t paramPassword = utils->getTestValue("putNotesSlideHeaderFooter", "password");
	utility::string_t paramFolder = utils->getTestValue("putNotesSlideHeaderFooter", "folder");
	utility::string_t paramStorage = utils->getTestValue("putNotesSlideHeaderFooter", "storage");
	paramStorage = utils->getInvalidTestValue("putNotesSlideHeaderFooter", "storage", paramStorage);
	utils->initialize("putNotesSlideHeaderFooter", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->setNotesSlideHeaderFooter(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putNotesSlideHeaderFooter", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putNotesSlideHeaderFooter", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putNotesSlideHeaderFooter", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putNotesSlideHeaderFooter", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putNotesSlideHeaderFooter", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putNotesSlideShapeSaveAs) {
	utility::string_t paramName = utils->getTestValue("putNotesSlideShapeSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putNotesSlideShapeSaveAs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putNotesSlideShapeSaveAs", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("putNotesSlideShapeSaveAs", "format");
	utility::string_t paramOutPath = utils->getTestValue("putNotesSlideShapeSaveAs", "outPath");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("putNotesSlideShapeSaveAs", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("putNotesSlideShapeSaveAs", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("putNotesSlideShapeSaveAs", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("putNotesSlideShapeSaveAs", "bounds");
	utility::string_t paramPassword = utils->getTestValue("putNotesSlideShapeSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("putNotesSlideShapeSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("putNotesSlideShapeSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("putNotesSlideShapeSaveAs", "fontsFolder");
	utils->initialize("putNotesSlideShapeSaveAs", "");
	api->saveNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
}

TEST_F(SlidesApiTest, putNotesSlideShapeSaveAsInvalidName) {
	utility::string_t paramName = utils->getTestValue("putNotesSlideShapeSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putNotesSlideShapeSaveAs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putNotesSlideShapeSaveAs", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("putNotesSlideShapeSaveAs", "format");
	utility::string_t paramOutPath = utils->getTestValue("putNotesSlideShapeSaveAs", "outPath");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("putNotesSlideShapeSaveAs", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("putNotesSlideShapeSaveAs", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("putNotesSlideShapeSaveAs", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("putNotesSlideShapeSaveAs", "bounds");
	utility::string_t paramPassword = utils->getTestValue("putNotesSlideShapeSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("putNotesSlideShapeSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("putNotesSlideShapeSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("putNotesSlideShapeSaveAs", "fontsFolder");
	paramName = utils->getInvalidTestValue("putNotesSlideShapeSaveAs", "name", paramName);
	utils->initialize("putNotesSlideShapeSaveAs", "name", paramName);

	bool failed = true;
	try
	{
		api->saveNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putNotesSlideShapeSaveAs", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putNotesSlideShapeSaveAs", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putNotesSlideShapeSaveAs", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putNotesSlideShapeSaveAs", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putNotesSlideShapeSaveAs", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putNotesSlideShapeSaveAsInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("putNotesSlideShapeSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putNotesSlideShapeSaveAs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putNotesSlideShapeSaveAs", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("putNotesSlideShapeSaveAs", "format");
	utility::string_t paramOutPath = utils->getTestValue("putNotesSlideShapeSaveAs", "outPath");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("putNotesSlideShapeSaveAs", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("putNotesSlideShapeSaveAs", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("putNotesSlideShapeSaveAs", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("putNotesSlideShapeSaveAs", "bounds");
	utility::string_t paramPassword = utils->getTestValue("putNotesSlideShapeSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("putNotesSlideShapeSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("putNotesSlideShapeSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("putNotesSlideShapeSaveAs", "fontsFolder");
	paramSlideIndex = utils->getInvalidIntTestValue("putNotesSlideShapeSaveAs", "slideIndex", paramSlideIndex).value();
	utils->initialize("putNotesSlideShapeSaveAs", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->saveNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putNotesSlideShapeSaveAs", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putNotesSlideShapeSaveAs", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putNotesSlideShapeSaveAs", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putNotesSlideShapeSaveAs", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putNotesSlideShapeSaveAs", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putNotesSlideShapeSaveAsInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("putNotesSlideShapeSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putNotesSlideShapeSaveAs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putNotesSlideShapeSaveAs", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("putNotesSlideShapeSaveAs", "format");
	utility::string_t paramOutPath = utils->getTestValue("putNotesSlideShapeSaveAs", "outPath");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("putNotesSlideShapeSaveAs", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("putNotesSlideShapeSaveAs", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("putNotesSlideShapeSaveAs", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("putNotesSlideShapeSaveAs", "bounds");
	utility::string_t paramPassword = utils->getTestValue("putNotesSlideShapeSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("putNotesSlideShapeSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("putNotesSlideShapeSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("putNotesSlideShapeSaveAs", "fontsFolder");
	paramShapeIndex = utils->getInvalidIntTestValue("putNotesSlideShapeSaveAs", "shapeIndex", paramShapeIndex).value();
	utils->initialize("putNotesSlideShapeSaveAs", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->saveNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putNotesSlideShapeSaveAs", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putNotesSlideShapeSaveAs", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putNotesSlideShapeSaveAs", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putNotesSlideShapeSaveAs", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putNotesSlideShapeSaveAs", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putNotesSlideShapeSaveAsInvalidFormat) {
	utility::string_t paramName = utils->getTestValue("putNotesSlideShapeSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putNotesSlideShapeSaveAs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putNotesSlideShapeSaveAs", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("putNotesSlideShapeSaveAs", "format");
	utility::string_t paramOutPath = utils->getTestValue("putNotesSlideShapeSaveAs", "outPath");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("putNotesSlideShapeSaveAs", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("putNotesSlideShapeSaveAs", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("putNotesSlideShapeSaveAs", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("putNotesSlideShapeSaveAs", "bounds");
	utility::string_t paramPassword = utils->getTestValue("putNotesSlideShapeSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("putNotesSlideShapeSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("putNotesSlideShapeSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("putNotesSlideShapeSaveAs", "fontsFolder");
	paramFormat = utils->getInvalidTestValue("putNotesSlideShapeSaveAs", "format", paramFormat);
	utils->initialize("putNotesSlideShapeSaveAs", "format", paramFormat);

	bool failed = true;
	try
	{
		api->saveNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putNotesSlideShapeSaveAs", "format");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putNotesSlideShapeSaveAs", "format", paramFormat);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putNotesSlideShapeSaveAs", "format");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putNotesSlideShapeSaveAs", "format", paramFormat);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putNotesSlideShapeSaveAs", "format"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putNotesSlideShapeSaveAsInvalidOutPath) {
	utility::string_t paramName = utils->getTestValue("putNotesSlideShapeSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putNotesSlideShapeSaveAs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putNotesSlideShapeSaveAs", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("putNotesSlideShapeSaveAs", "format");
	utility::string_t paramOutPath = utils->getTestValue("putNotesSlideShapeSaveAs", "outPath");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("putNotesSlideShapeSaveAs", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("putNotesSlideShapeSaveAs", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("putNotesSlideShapeSaveAs", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("putNotesSlideShapeSaveAs", "bounds");
	utility::string_t paramPassword = utils->getTestValue("putNotesSlideShapeSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("putNotesSlideShapeSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("putNotesSlideShapeSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("putNotesSlideShapeSaveAs", "fontsFolder");
	paramOutPath = utils->getInvalidTestValue("putNotesSlideShapeSaveAs", "outPath", paramOutPath);
	utils->initialize("putNotesSlideShapeSaveAs", "outPath", paramOutPath);

	bool failed = true;
	try
	{
		api->saveNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putNotesSlideShapeSaveAs", "outPath");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putNotesSlideShapeSaveAs", "outPath", paramOutPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putNotesSlideShapeSaveAs", "outPath");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putNotesSlideShapeSaveAs", "outPath", paramOutPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putNotesSlideShapeSaveAs", "outPath"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putNotesSlideShapeSaveAsInvalidOptions) {
	utility::string_t paramName = utils->getTestValue("putNotesSlideShapeSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putNotesSlideShapeSaveAs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putNotesSlideShapeSaveAs", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("putNotesSlideShapeSaveAs", "format");
	utility::string_t paramOutPath = utils->getTestValue("putNotesSlideShapeSaveAs", "outPath");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("putNotesSlideShapeSaveAs", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("putNotesSlideShapeSaveAs", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("putNotesSlideShapeSaveAs", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("putNotesSlideShapeSaveAs", "bounds");
	utility::string_t paramPassword = utils->getTestValue("putNotesSlideShapeSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("putNotesSlideShapeSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("putNotesSlideShapeSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("putNotesSlideShapeSaveAs", "fontsFolder");
	paramOptions = utils->getInvalidTestValueForClass<>("putNotesSlideShapeSaveAs", "options", paramOptions);
	utils->initialize("putNotesSlideShapeSaveAs", "options", paramOptions);

	bool failed = true;
	try
	{
		api->saveNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putNotesSlideShapeSaveAs", "options");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putNotesSlideShapeSaveAs", "options", paramOptions);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putNotesSlideShapeSaveAs", "options");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putNotesSlideShapeSaveAs", "options", paramOptions);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putNotesSlideShapeSaveAs", "options"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putNotesSlideShapeSaveAsInvalidScaleX) {
	utility::string_t paramName = utils->getTestValue("putNotesSlideShapeSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putNotesSlideShapeSaveAs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putNotesSlideShapeSaveAs", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("putNotesSlideShapeSaveAs", "format");
	utility::string_t paramOutPath = utils->getTestValue("putNotesSlideShapeSaveAs", "outPath");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("putNotesSlideShapeSaveAs", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("putNotesSlideShapeSaveAs", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("putNotesSlideShapeSaveAs", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("putNotesSlideShapeSaveAs", "bounds");
	utility::string_t paramPassword = utils->getTestValue("putNotesSlideShapeSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("putNotesSlideShapeSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("putNotesSlideShapeSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("putNotesSlideShapeSaveAs", "fontsFolder");
	paramScaleX = utils->getInvalidDoubleTestValue("putNotesSlideShapeSaveAs", "scaleX", paramScaleX).value();
	utils->initialize("putNotesSlideShapeSaveAs", "scaleX", paramScaleX);

	bool failed = true;
	try
	{
		api->saveNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putNotesSlideShapeSaveAs", "scaleX");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putNotesSlideShapeSaveAs", "scaleX", paramScaleX);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putNotesSlideShapeSaveAs", "scaleX");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putNotesSlideShapeSaveAs", "scaleX", paramScaleX);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putNotesSlideShapeSaveAs", "scaleX"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putNotesSlideShapeSaveAsInvalidScaleY) {
	utility::string_t paramName = utils->getTestValue("putNotesSlideShapeSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putNotesSlideShapeSaveAs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putNotesSlideShapeSaveAs", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("putNotesSlideShapeSaveAs", "format");
	utility::string_t paramOutPath = utils->getTestValue("putNotesSlideShapeSaveAs", "outPath");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("putNotesSlideShapeSaveAs", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("putNotesSlideShapeSaveAs", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("putNotesSlideShapeSaveAs", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("putNotesSlideShapeSaveAs", "bounds");
	utility::string_t paramPassword = utils->getTestValue("putNotesSlideShapeSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("putNotesSlideShapeSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("putNotesSlideShapeSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("putNotesSlideShapeSaveAs", "fontsFolder");
	paramScaleY = utils->getInvalidDoubleTestValue("putNotesSlideShapeSaveAs", "scaleY", paramScaleY).value();
	utils->initialize("putNotesSlideShapeSaveAs", "scaleY", paramScaleY);

	bool failed = true;
	try
	{
		api->saveNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putNotesSlideShapeSaveAs", "scaleY");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putNotesSlideShapeSaveAs", "scaleY", paramScaleY);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putNotesSlideShapeSaveAs", "scaleY");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putNotesSlideShapeSaveAs", "scaleY", paramScaleY);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putNotesSlideShapeSaveAs", "scaleY"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putNotesSlideShapeSaveAsInvalidBounds) {
	utility::string_t paramName = utils->getTestValue("putNotesSlideShapeSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putNotesSlideShapeSaveAs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putNotesSlideShapeSaveAs", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("putNotesSlideShapeSaveAs", "format");
	utility::string_t paramOutPath = utils->getTestValue("putNotesSlideShapeSaveAs", "outPath");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("putNotesSlideShapeSaveAs", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("putNotesSlideShapeSaveAs", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("putNotesSlideShapeSaveAs", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("putNotesSlideShapeSaveAs", "bounds");
	utility::string_t paramPassword = utils->getTestValue("putNotesSlideShapeSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("putNotesSlideShapeSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("putNotesSlideShapeSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("putNotesSlideShapeSaveAs", "fontsFolder");
	paramBounds = utils->getInvalidTestValue("putNotesSlideShapeSaveAs", "bounds", paramBounds);
	utils->initialize("putNotesSlideShapeSaveAs", "bounds", paramBounds);

	bool failed = true;
	try
	{
		api->saveNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putNotesSlideShapeSaveAs", "bounds");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putNotesSlideShapeSaveAs", "bounds", paramBounds);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putNotesSlideShapeSaveAs", "bounds");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putNotesSlideShapeSaveAs", "bounds", paramBounds);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putNotesSlideShapeSaveAs", "bounds"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putNotesSlideShapeSaveAsInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("putNotesSlideShapeSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putNotesSlideShapeSaveAs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putNotesSlideShapeSaveAs", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("putNotesSlideShapeSaveAs", "format");
	utility::string_t paramOutPath = utils->getTestValue("putNotesSlideShapeSaveAs", "outPath");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("putNotesSlideShapeSaveAs", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("putNotesSlideShapeSaveAs", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("putNotesSlideShapeSaveAs", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("putNotesSlideShapeSaveAs", "bounds");
	utility::string_t paramPassword = utils->getTestValue("putNotesSlideShapeSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("putNotesSlideShapeSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("putNotesSlideShapeSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("putNotesSlideShapeSaveAs", "fontsFolder");
	paramPassword = utils->getInvalidTestValue("putNotesSlideShapeSaveAs", "password", paramPassword);
	utils->initialize("putNotesSlideShapeSaveAs", "password", paramPassword);

	bool failed = true;
	try
	{
		api->saveNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putNotesSlideShapeSaveAs", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putNotesSlideShapeSaveAs", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putNotesSlideShapeSaveAs", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putNotesSlideShapeSaveAs", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putNotesSlideShapeSaveAs", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putNotesSlideShapeSaveAsInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("putNotesSlideShapeSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putNotesSlideShapeSaveAs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putNotesSlideShapeSaveAs", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("putNotesSlideShapeSaveAs", "format");
	utility::string_t paramOutPath = utils->getTestValue("putNotesSlideShapeSaveAs", "outPath");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("putNotesSlideShapeSaveAs", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("putNotesSlideShapeSaveAs", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("putNotesSlideShapeSaveAs", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("putNotesSlideShapeSaveAs", "bounds");
	utility::string_t paramPassword = utils->getTestValue("putNotesSlideShapeSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("putNotesSlideShapeSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("putNotesSlideShapeSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("putNotesSlideShapeSaveAs", "fontsFolder");
	paramFolder = utils->getInvalidTestValue("putNotesSlideShapeSaveAs", "folder", paramFolder);
	utils->initialize("putNotesSlideShapeSaveAs", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->saveNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putNotesSlideShapeSaveAs", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putNotesSlideShapeSaveAs", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putNotesSlideShapeSaveAs", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putNotesSlideShapeSaveAs", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putNotesSlideShapeSaveAs", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putNotesSlideShapeSaveAsInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("putNotesSlideShapeSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putNotesSlideShapeSaveAs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putNotesSlideShapeSaveAs", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("putNotesSlideShapeSaveAs", "format");
	utility::string_t paramOutPath = utils->getTestValue("putNotesSlideShapeSaveAs", "outPath");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("putNotesSlideShapeSaveAs", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("putNotesSlideShapeSaveAs", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("putNotesSlideShapeSaveAs", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("putNotesSlideShapeSaveAs", "bounds");
	utility::string_t paramPassword = utils->getTestValue("putNotesSlideShapeSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("putNotesSlideShapeSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("putNotesSlideShapeSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("putNotesSlideShapeSaveAs", "fontsFolder");
	paramStorage = utils->getInvalidTestValue("putNotesSlideShapeSaveAs", "storage", paramStorage);
	utils->initialize("putNotesSlideShapeSaveAs", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->saveNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putNotesSlideShapeSaveAs", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putNotesSlideShapeSaveAs", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putNotesSlideShapeSaveAs", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putNotesSlideShapeSaveAs", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putNotesSlideShapeSaveAs", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putNotesSlideShapeSaveAsInvalidFontsFolder) {
	utility::string_t paramName = utils->getTestValue("putNotesSlideShapeSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putNotesSlideShapeSaveAs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putNotesSlideShapeSaveAs", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("putNotesSlideShapeSaveAs", "format");
	utility::string_t paramOutPath = utils->getTestValue("putNotesSlideShapeSaveAs", "outPath");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("putNotesSlideShapeSaveAs", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("putNotesSlideShapeSaveAs", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("putNotesSlideShapeSaveAs", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("putNotesSlideShapeSaveAs", "bounds");
	utility::string_t paramPassword = utils->getTestValue("putNotesSlideShapeSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("putNotesSlideShapeSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("putNotesSlideShapeSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("putNotesSlideShapeSaveAs", "fontsFolder");
	paramFontsFolder = utils->getInvalidTestValue("putNotesSlideShapeSaveAs", "fontsFolder", paramFontsFolder);
	utils->initialize("putNotesSlideShapeSaveAs", "fontsFolder", paramFontsFolder);

	bool failed = true;
	try
	{
		api->saveNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putNotesSlideShapeSaveAs", "fontsFolder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putNotesSlideShapeSaveAs", "fontsFolder", paramFontsFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putNotesSlideShapeSaveAs", "fontsFolder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putNotesSlideShapeSaveAs", "fontsFolder", paramFontsFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putNotesSlideShapeSaveAs", "fontsFolder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putPresentationMerge) {
	utility::string_t paramName = utils->getTestValue("putPresentationMerge", "name");
	std::shared_ptr<OrderedMergeRequest> paramRequest = utils->getTestValueForClass<OrderedMergeRequest>("putPresentationMerge", "request");
	utility::string_t paramPassword = utils->getTestValue("putPresentationMerge", "password");
	utility::string_t paramFolder = utils->getTestValue("putPresentationMerge", "folder");
	utility::string_t paramStorage = utils->getTestValue("putPresentationMerge", "storage");
	utils->initialize("putPresentationMerge", "");
	std::shared_ptr<Document> result = api->orderedMerge(paramName, paramRequest, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, putPresentationMergeInvalidName) {
	utility::string_t paramName = utils->getTestValue("putPresentationMerge", "name");
	std::shared_ptr<OrderedMergeRequest> paramRequest = utils->getTestValueForClass<OrderedMergeRequest>("putPresentationMerge", "request");
	utility::string_t paramPassword = utils->getTestValue("putPresentationMerge", "password");
	utility::string_t paramFolder = utils->getTestValue("putPresentationMerge", "folder");
	utility::string_t paramStorage = utils->getTestValue("putPresentationMerge", "storage");
	paramName = utils->getInvalidTestValue("putPresentationMerge", "name", paramName);
	utils->initialize("putPresentationMerge", "name", paramName);

	bool failed = true;
	try
	{
		api->orderedMerge(paramName, paramRequest, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putPresentationMerge", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putPresentationMerge", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putPresentationMerge", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putPresentationMerge", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putPresentationMerge", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putPresentationMergeInvalidRequest) {
	utility::string_t paramName = utils->getTestValue("putPresentationMerge", "name");
	std::shared_ptr<OrderedMergeRequest> paramRequest = utils->getTestValueForClass<OrderedMergeRequest>("putPresentationMerge", "request");
	utility::string_t paramPassword = utils->getTestValue("putPresentationMerge", "password");
	utility::string_t paramFolder = utils->getTestValue("putPresentationMerge", "folder");
	utility::string_t paramStorage = utils->getTestValue("putPresentationMerge", "storage");
	paramRequest = utils->getInvalidTestValueForClass<>("putPresentationMerge", "request", paramRequest);
	utils->initialize("putPresentationMerge", "request", paramRequest);

	bool failed = true;
	try
	{
		api->orderedMerge(paramName, paramRequest, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putPresentationMerge", "request");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putPresentationMerge", "request", paramRequest);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putPresentationMerge", "request");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putPresentationMerge", "request", paramRequest);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putPresentationMerge", "request"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putPresentationMergeInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("putPresentationMerge", "name");
	std::shared_ptr<OrderedMergeRequest> paramRequest = utils->getTestValueForClass<OrderedMergeRequest>("putPresentationMerge", "request");
	utility::string_t paramPassword = utils->getTestValue("putPresentationMerge", "password");
	utility::string_t paramFolder = utils->getTestValue("putPresentationMerge", "folder");
	utility::string_t paramStorage = utils->getTestValue("putPresentationMerge", "storage");
	paramPassword = utils->getInvalidTestValue("putPresentationMerge", "password", paramPassword);
	utils->initialize("putPresentationMerge", "password", paramPassword);

	bool failed = true;
	try
	{
		api->orderedMerge(paramName, paramRequest, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putPresentationMerge", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putPresentationMerge", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putPresentationMerge", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putPresentationMerge", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putPresentationMerge", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putPresentationMergeInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("putPresentationMerge", "name");
	std::shared_ptr<OrderedMergeRequest> paramRequest = utils->getTestValueForClass<OrderedMergeRequest>("putPresentationMerge", "request");
	utility::string_t paramPassword = utils->getTestValue("putPresentationMerge", "password");
	utility::string_t paramFolder = utils->getTestValue("putPresentationMerge", "folder");
	utility::string_t paramStorage = utils->getTestValue("putPresentationMerge", "storage");
	paramFolder = utils->getInvalidTestValue("putPresentationMerge", "folder", paramFolder);
	utils->initialize("putPresentationMerge", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->orderedMerge(paramName, paramRequest, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putPresentationMerge", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putPresentationMerge", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putPresentationMerge", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putPresentationMerge", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putPresentationMerge", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putPresentationMergeInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("putPresentationMerge", "name");
	std::shared_ptr<OrderedMergeRequest> paramRequest = utils->getTestValueForClass<OrderedMergeRequest>("putPresentationMerge", "request");
	utility::string_t paramPassword = utils->getTestValue("putPresentationMerge", "password");
	utility::string_t paramFolder = utils->getTestValue("putPresentationMerge", "folder");
	utility::string_t paramStorage = utils->getTestValue("putPresentationMerge", "storage");
	paramStorage = utils->getInvalidTestValue("putPresentationMerge", "storage", paramStorage);
	utils->initialize("putPresentationMerge", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->orderedMerge(paramName, paramRequest, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putPresentationMerge", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putPresentationMerge", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putPresentationMerge", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putPresentationMerge", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putPresentationMerge", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putPresentationSplit) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("putPresentationSplit", "document");
	utility::string_t paramFormat = utils->getTestValue("putPresentationSplit", "format");
	utility::string_t paramDestFolder = utils->getTestValue("putPresentationSplit", "destFolder");
	auto paramWidth = utils->getOptionalIntTestValue("putPresentationSplit", "width");
	auto paramHeight = utils->getOptionalIntTestValue("putPresentationSplit", "height");
	auto paramFrom = utils->getOptionalIntTestValue("putPresentationSplit", "from");
	auto paramTo = utils->getOptionalIntTestValue("putPresentationSplit", "to");
	utility::string_t paramPassword = utils->getTestValue("putPresentationSplit", "password");
	utility::string_t paramStorage = utils->getTestValue("putPresentationSplit", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("putPresentationSplit", "fontsFolder");
	utils->initialize("putPresentationSplit", "");
	std::shared_ptr<SplitDocumentResult> result = api->splitAndSaveOnline(paramDocument, paramFormat, paramDestFolder, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, putPresentationSplitInvalidDocument) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("putPresentationSplit", "document");
	utility::string_t paramFormat = utils->getTestValue("putPresentationSplit", "format");
	utility::string_t paramDestFolder = utils->getTestValue("putPresentationSplit", "destFolder");
	auto paramWidth = utils->getOptionalIntTestValue("putPresentationSplit", "width");
	auto paramHeight = utils->getOptionalIntTestValue("putPresentationSplit", "height");
	auto paramFrom = utils->getOptionalIntTestValue("putPresentationSplit", "from");
	auto paramTo = utils->getOptionalIntTestValue("putPresentationSplit", "to");
	utility::string_t paramPassword = utils->getTestValue("putPresentationSplit", "password");
	utility::string_t paramStorage = utils->getTestValue("putPresentationSplit", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("putPresentationSplit", "fontsFolder");
	paramDocument = utils->getInvalidBinaryTestValue("putPresentationSplit", "document", paramDocument);
	utils->initialize("putPresentationSplit", "document", paramDocument);

	bool failed = true;
	try
	{
		api->splitAndSaveOnline(paramDocument, paramFormat, paramDestFolder, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putPresentationSplit", "document");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putPresentationSplit", "document", paramDocument);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putPresentationSplit", "document");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putPresentationSplit", "document", paramDocument);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putPresentationSplit", "document"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putPresentationSplitInvalidFormat) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("putPresentationSplit", "document");
	utility::string_t paramFormat = utils->getTestValue("putPresentationSplit", "format");
	utility::string_t paramDestFolder = utils->getTestValue("putPresentationSplit", "destFolder");
	auto paramWidth = utils->getOptionalIntTestValue("putPresentationSplit", "width");
	auto paramHeight = utils->getOptionalIntTestValue("putPresentationSplit", "height");
	auto paramFrom = utils->getOptionalIntTestValue("putPresentationSplit", "from");
	auto paramTo = utils->getOptionalIntTestValue("putPresentationSplit", "to");
	utility::string_t paramPassword = utils->getTestValue("putPresentationSplit", "password");
	utility::string_t paramStorage = utils->getTestValue("putPresentationSplit", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("putPresentationSplit", "fontsFolder");
	paramFormat = utils->getInvalidTestValue("putPresentationSplit", "format", paramFormat);
	utils->initialize("putPresentationSplit", "format", paramFormat);

	bool failed = true;
	try
	{
		api->splitAndSaveOnline(paramDocument, paramFormat, paramDestFolder, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putPresentationSplit", "format");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putPresentationSplit", "format", paramFormat);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putPresentationSplit", "format");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putPresentationSplit", "format", paramFormat);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putPresentationSplit", "format"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putPresentationSplitInvalidDestFolder) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("putPresentationSplit", "document");
	utility::string_t paramFormat = utils->getTestValue("putPresentationSplit", "format");
	utility::string_t paramDestFolder = utils->getTestValue("putPresentationSplit", "destFolder");
	auto paramWidth = utils->getOptionalIntTestValue("putPresentationSplit", "width");
	auto paramHeight = utils->getOptionalIntTestValue("putPresentationSplit", "height");
	auto paramFrom = utils->getOptionalIntTestValue("putPresentationSplit", "from");
	auto paramTo = utils->getOptionalIntTestValue("putPresentationSplit", "to");
	utility::string_t paramPassword = utils->getTestValue("putPresentationSplit", "password");
	utility::string_t paramStorage = utils->getTestValue("putPresentationSplit", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("putPresentationSplit", "fontsFolder");
	paramDestFolder = utils->getInvalidTestValue("putPresentationSplit", "destFolder", paramDestFolder);
	utils->initialize("putPresentationSplit", "destFolder", paramDestFolder);

	bool failed = true;
	try
	{
		api->splitAndSaveOnline(paramDocument, paramFormat, paramDestFolder, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putPresentationSplit", "destFolder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putPresentationSplit", "destFolder", paramDestFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putPresentationSplit", "destFolder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putPresentationSplit", "destFolder", paramDestFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putPresentationSplit", "destFolder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putPresentationSplitInvalidWidth) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("putPresentationSplit", "document");
	utility::string_t paramFormat = utils->getTestValue("putPresentationSplit", "format");
	utility::string_t paramDestFolder = utils->getTestValue("putPresentationSplit", "destFolder");
	auto paramWidth = utils->getOptionalIntTestValue("putPresentationSplit", "width");
	auto paramHeight = utils->getOptionalIntTestValue("putPresentationSplit", "height");
	auto paramFrom = utils->getOptionalIntTestValue("putPresentationSplit", "from");
	auto paramTo = utils->getOptionalIntTestValue("putPresentationSplit", "to");
	utility::string_t paramPassword = utils->getTestValue("putPresentationSplit", "password");
	utility::string_t paramStorage = utils->getTestValue("putPresentationSplit", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("putPresentationSplit", "fontsFolder");
	paramWidth = utils->getInvalidIntTestValue("putPresentationSplit", "width", paramWidth).value();
	utils->initialize("putPresentationSplit", "width", paramWidth);

	bool failed = true;
	try
	{
		api->splitAndSaveOnline(paramDocument, paramFormat, paramDestFolder, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putPresentationSplit", "width");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putPresentationSplit", "width", paramWidth);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putPresentationSplit", "width");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putPresentationSplit", "width", paramWidth);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putPresentationSplit", "width"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putPresentationSplitInvalidHeight) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("putPresentationSplit", "document");
	utility::string_t paramFormat = utils->getTestValue("putPresentationSplit", "format");
	utility::string_t paramDestFolder = utils->getTestValue("putPresentationSplit", "destFolder");
	auto paramWidth = utils->getOptionalIntTestValue("putPresentationSplit", "width");
	auto paramHeight = utils->getOptionalIntTestValue("putPresentationSplit", "height");
	auto paramFrom = utils->getOptionalIntTestValue("putPresentationSplit", "from");
	auto paramTo = utils->getOptionalIntTestValue("putPresentationSplit", "to");
	utility::string_t paramPassword = utils->getTestValue("putPresentationSplit", "password");
	utility::string_t paramStorage = utils->getTestValue("putPresentationSplit", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("putPresentationSplit", "fontsFolder");
	paramHeight = utils->getInvalidIntTestValue("putPresentationSplit", "height", paramHeight).value();
	utils->initialize("putPresentationSplit", "height", paramHeight);

	bool failed = true;
	try
	{
		api->splitAndSaveOnline(paramDocument, paramFormat, paramDestFolder, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putPresentationSplit", "height");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putPresentationSplit", "height", paramHeight);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putPresentationSplit", "height");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putPresentationSplit", "height", paramHeight);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putPresentationSplit", "height"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putPresentationSplitInvalidFrom) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("putPresentationSplit", "document");
	utility::string_t paramFormat = utils->getTestValue("putPresentationSplit", "format");
	utility::string_t paramDestFolder = utils->getTestValue("putPresentationSplit", "destFolder");
	auto paramWidth = utils->getOptionalIntTestValue("putPresentationSplit", "width");
	auto paramHeight = utils->getOptionalIntTestValue("putPresentationSplit", "height");
	auto paramFrom = utils->getOptionalIntTestValue("putPresentationSplit", "from");
	auto paramTo = utils->getOptionalIntTestValue("putPresentationSplit", "to");
	utility::string_t paramPassword = utils->getTestValue("putPresentationSplit", "password");
	utility::string_t paramStorage = utils->getTestValue("putPresentationSplit", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("putPresentationSplit", "fontsFolder");
	paramFrom = utils->getInvalidIntTestValue("putPresentationSplit", "from", paramFrom).value();
	utils->initialize("putPresentationSplit", "from", paramFrom);

	bool failed = true;
	try
	{
		api->splitAndSaveOnline(paramDocument, paramFormat, paramDestFolder, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putPresentationSplit", "from");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putPresentationSplit", "from", paramFrom);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putPresentationSplit", "from");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putPresentationSplit", "from", paramFrom);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putPresentationSplit", "from"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putPresentationSplitInvalidTo) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("putPresentationSplit", "document");
	utility::string_t paramFormat = utils->getTestValue("putPresentationSplit", "format");
	utility::string_t paramDestFolder = utils->getTestValue("putPresentationSplit", "destFolder");
	auto paramWidth = utils->getOptionalIntTestValue("putPresentationSplit", "width");
	auto paramHeight = utils->getOptionalIntTestValue("putPresentationSplit", "height");
	auto paramFrom = utils->getOptionalIntTestValue("putPresentationSplit", "from");
	auto paramTo = utils->getOptionalIntTestValue("putPresentationSplit", "to");
	utility::string_t paramPassword = utils->getTestValue("putPresentationSplit", "password");
	utility::string_t paramStorage = utils->getTestValue("putPresentationSplit", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("putPresentationSplit", "fontsFolder");
	paramTo = utils->getInvalidIntTestValue("putPresentationSplit", "to", paramTo).value();
	utils->initialize("putPresentationSplit", "to", paramTo);

	bool failed = true;
	try
	{
		api->splitAndSaveOnline(paramDocument, paramFormat, paramDestFolder, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putPresentationSplit", "to");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putPresentationSplit", "to", paramTo);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putPresentationSplit", "to");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putPresentationSplit", "to", paramTo);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putPresentationSplit", "to"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putPresentationSplitInvalidPassword) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("putPresentationSplit", "document");
	utility::string_t paramFormat = utils->getTestValue("putPresentationSplit", "format");
	utility::string_t paramDestFolder = utils->getTestValue("putPresentationSplit", "destFolder");
	auto paramWidth = utils->getOptionalIntTestValue("putPresentationSplit", "width");
	auto paramHeight = utils->getOptionalIntTestValue("putPresentationSplit", "height");
	auto paramFrom = utils->getOptionalIntTestValue("putPresentationSplit", "from");
	auto paramTo = utils->getOptionalIntTestValue("putPresentationSplit", "to");
	utility::string_t paramPassword = utils->getTestValue("putPresentationSplit", "password");
	utility::string_t paramStorage = utils->getTestValue("putPresentationSplit", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("putPresentationSplit", "fontsFolder");
	paramPassword = utils->getInvalidTestValue("putPresentationSplit", "password", paramPassword);
	utils->initialize("putPresentationSplit", "password", paramPassword);

	bool failed = true;
	try
	{
		api->splitAndSaveOnline(paramDocument, paramFormat, paramDestFolder, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putPresentationSplit", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putPresentationSplit", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putPresentationSplit", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putPresentationSplit", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putPresentationSplit", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putPresentationSplitInvalidStorage) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("putPresentationSplit", "document");
	utility::string_t paramFormat = utils->getTestValue("putPresentationSplit", "format");
	utility::string_t paramDestFolder = utils->getTestValue("putPresentationSplit", "destFolder");
	auto paramWidth = utils->getOptionalIntTestValue("putPresentationSplit", "width");
	auto paramHeight = utils->getOptionalIntTestValue("putPresentationSplit", "height");
	auto paramFrom = utils->getOptionalIntTestValue("putPresentationSplit", "from");
	auto paramTo = utils->getOptionalIntTestValue("putPresentationSplit", "to");
	utility::string_t paramPassword = utils->getTestValue("putPresentationSplit", "password");
	utility::string_t paramStorage = utils->getTestValue("putPresentationSplit", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("putPresentationSplit", "fontsFolder");
	paramStorage = utils->getInvalidTestValue("putPresentationSplit", "storage", paramStorage);
	utils->initialize("putPresentationSplit", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->splitAndSaveOnline(paramDocument, paramFormat, paramDestFolder, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putPresentationSplit", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putPresentationSplit", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putPresentationSplit", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putPresentationSplit", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putPresentationSplit", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putPresentationSplitInvalidFontsFolder) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("putPresentationSplit", "document");
	utility::string_t paramFormat = utils->getTestValue("putPresentationSplit", "format");
	utility::string_t paramDestFolder = utils->getTestValue("putPresentationSplit", "destFolder");
	auto paramWidth = utils->getOptionalIntTestValue("putPresentationSplit", "width");
	auto paramHeight = utils->getOptionalIntTestValue("putPresentationSplit", "height");
	auto paramFrom = utils->getOptionalIntTestValue("putPresentationSplit", "from");
	auto paramTo = utils->getOptionalIntTestValue("putPresentationSplit", "to");
	utility::string_t paramPassword = utils->getTestValue("putPresentationSplit", "password");
	utility::string_t paramStorage = utils->getTestValue("putPresentationSplit", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("putPresentationSplit", "fontsFolder");
	paramFontsFolder = utils->getInvalidTestValue("putPresentationSplit", "fontsFolder", paramFontsFolder);
	utils->initialize("putPresentationSplit", "fontsFolder", paramFontsFolder);

	bool failed = true;
	try
	{
		api->splitAndSaveOnline(paramDocument, paramFormat, paramDestFolder, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putPresentationSplit", "fontsFolder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putPresentationSplit", "fontsFolder", paramFontsFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putPresentationSplit", "fontsFolder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putPresentationSplit", "fontsFolder", paramFontsFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putPresentationSplit", "fontsFolder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSection) {
	utility::string_t paramName = utils->getTestValue("putSection", "name");
	int32_t paramSectionIndex = utils->getIntTestValue("putSection", "sectionIndex");
	utility::string_t paramSectionName = utils->getTestValue("putSection", "sectionName");
	utility::string_t paramPassword = utils->getTestValue("putSection", "password");
	utility::string_t paramFolder = utils->getTestValue("putSection", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSection", "storage");
	utils->initialize("putSection", "");
	std::shared_ptr<Sections> result = api->updateSection(paramName, paramSectionIndex, paramSectionName, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, putSectionInvalidName) {
	utility::string_t paramName = utils->getTestValue("putSection", "name");
	int32_t paramSectionIndex = utils->getIntTestValue("putSection", "sectionIndex");
	utility::string_t paramSectionName = utils->getTestValue("putSection", "sectionName");
	utility::string_t paramPassword = utils->getTestValue("putSection", "password");
	utility::string_t paramFolder = utils->getTestValue("putSection", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSection", "storage");
	paramName = utils->getInvalidTestValue("putSection", "name", paramName);
	utils->initialize("putSection", "name", paramName);

	bool failed = true;
	try
	{
		api->updateSection(paramName, paramSectionIndex, paramSectionName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSection", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSection", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSection", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSection", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSection", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSectionInvalidSectionIndex) {
	utility::string_t paramName = utils->getTestValue("putSection", "name");
	int32_t paramSectionIndex = utils->getIntTestValue("putSection", "sectionIndex");
	utility::string_t paramSectionName = utils->getTestValue("putSection", "sectionName");
	utility::string_t paramPassword = utils->getTestValue("putSection", "password");
	utility::string_t paramFolder = utils->getTestValue("putSection", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSection", "storage");
	paramSectionIndex = utils->getInvalidIntTestValue("putSection", "sectionIndex", paramSectionIndex).value();
	utils->initialize("putSection", "sectionIndex", paramSectionIndex);

	bool failed = true;
	try
	{
		api->updateSection(paramName, paramSectionIndex, paramSectionName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSection", "sectionIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSection", "sectionIndex", paramSectionIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSection", "sectionIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSection", "sectionIndex", paramSectionIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSection", "sectionIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSectionInvalidSectionName) {
	utility::string_t paramName = utils->getTestValue("putSection", "name");
	int32_t paramSectionIndex = utils->getIntTestValue("putSection", "sectionIndex");
	utility::string_t paramSectionName = utils->getTestValue("putSection", "sectionName");
	utility::string_t paramPassword = utils->getTestValue("putSection", "password");
	utility::string_t paramFolder = utils->getTestValue("putSection", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSection", "storage");
	paramSectionName = utils->getInvalidTestValue("putSection", "sectionName", paramSectionName);
	utils->initialize("putSection", "sectionName", paramSectionName);

	bool failed = true;
	try
	{
		api->updateSection(paramName, paramSectionIndex, paramSectionName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSection", "sectionName");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSection", "sectionName", paramSectionName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSection", "sectionName");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSection", "sectionName", paramSectionName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSection", "sectionName"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSectionInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("putSection", "name");
	int32_t paramSectionIndex = utils->getIntTestValue("putSection", "sectionIndex");
	utility::string_t paramSectionName = utils->getTestValue("putSection", "sectionName");
	utility::string_t paramPassword = utils->getTestValue("putSection", "password");
	utility::string_t paramFolder = utils->getTestValue("putSection", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSection", "storage");
	paramPassword = utils->getInvalidTestValue("putSection", "password", paramPassword);
	utils->initialize("putSection", "password", paramPassword);

	bool failed = true;
	try
	{
		api->updateSection(paramName, paramSectionIndex, paramSectionName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSection", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSection", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSection", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSection", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSection", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSectionInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("putSection", "name");
	int32_t paramSectionIndex = utils->getIntTestValue("putSection", "sectionIndex");
	utility::string_t paramSectionName = utils->getTestValue("putSection", "sectionName");
	utility::string_t paramPassword = utils->getTestValue("putSection", "password");
	utility::string_t paramFolder = utils->getTestValue("putSection", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSection", "storage");
	paramFolder = utils->getInvalidTestValue("putSection", "folder", paramFolder);
	utils->initialize("putSection", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->updateSection(paramName, paramSectionIndex, paramSectionName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSection", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSection", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSection", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSection", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSection", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSectionInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("putSection", "name");
	int32_t paramSectionIndex = utils->getIntTestValue("putSection", "sectionIndex");
	utility::string_t paramSectionName = utils->getTestValue("putSection", "sectionName");
	utility::string_t paramPassword = utils->getTestValue("putSection", "password");
	utility::string_t paramFolder = utils->getTestValue("putSection", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSection", "storage");
	paramStorage = utils->getInvalidTestValue("putSection", "storage", paramStorage);
	utils->initialize("putSection", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->updateSection(paramName, paramSectionIndex, paramSectionName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSection", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSection", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSection", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSection", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSection", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSections) {
	utility::string_t paramName = utils->getTestValue("putSections", "name");
	std::shared_ptr<Sections> paramSections = utils->getTestValueForClass<Sections>("putSections", "sections");
	utility::string_t paramPassword = utils->getTestValue("putSections", "password");
	utility::string_t paramFolder = utils->getTestValue("putSections", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSections", "storage");
	utils->initialize("putSections", "");
	std::shared_ptr<Sections> result = api->setSections(paramName, paramSections, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, putSectionsInvalidName) {
	utility::string_t paramName = utils->getTestValue("putSections", "name");
	std::shared_ptr<Sections> paramSections = utils->getTestValueForClass<Sections>("putSections", "sections");
	utility::string_t paramPassword = utils->getTestValue("putSections", "password");
	utility::string_t paramFolder = utils->getTestValue("putSections", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSections", "storage");
	paramName = utils->getInvalidTestValue("putSections", "name", paramName);
	utils->initialize("putSections", "name", paramName);

	bool failed = true;
	try
	{
		api->setSections(paramName, paramSections, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSections", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSections", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSections", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSections", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSections", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSectionsInvalidSections) {
	utility::string_t paramName = utils->getTestValue("putSections", "name");
	std::shared_ptr<Sections> paramSections = utils->getTestValueForClass<Sections>("putSections", "sections");
	utility::string_t paramPassword = utils->getTestValue("putSections", "password");
	utility::string_t paramFolder = utils->getTestValue("putSections", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSections", "storage");
	paramSections = utils->getInvalidTestValueForClass<>("putSections", "sections", paramSections);
	utils->initialize("putSections", "sections", paramSections);

	bool failed = true;
	try
	{
		api->setSections(paramName, paramSections, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSections", "sections");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSections", "sections", paramSections);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSections", "sections");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSections", "sections", paramSections);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSections", "sections"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSectionsInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("putSections", "name");
	std::shared_ptr<Sections> paramSections = utils->getTestValueForClass<Sections>("putSections", "sections");
	utility::string_t paramPassword = utils->getTestValue("putSections", "password");
	utility::string_t paramFolder = utils->getTestValue("putSections", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSections", "storage");
	paramPassword = utils->getInvalidTestValue("putSections", "password", paramPassword);
	utils->initialize("putSections", "password", paramPassword);

	bool failed = true;
	try
	{
		api->setSections(paramName, paramSections, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSections", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSections", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSections", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSections", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSections", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSectionsInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("putSections", "name");
	std::shared_ptr<Sections> paramSections = utils->getTestValueForClass<Sections>("putSections", "sections");
	utility::string_t paramPassword = utils->getTestValue("putSections", "password");
	utility::string_t paramFolder = utils->getTestValue("putSections", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSections", "storage");
	paramFolder = utils->getInvalidTestValue("putSections", "folder", paramFolder);
	utils->initialize("putSections", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->setSections(paramName, paramSections, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSections", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSections", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSections", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSections", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSections", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSectionsInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("putSections", "name");
	std::shared_ptr<Sections> paramSections = utils->getTestValueForClass<Sections>("putSections", "sections");
	utility::string_t paramPassword = utils->getTestValue("putSections", "password");
	utility::string_t paramFolder = utils->getTestValue("putSections", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSections", "storage");
	paramStorage = utils->getInvalidTestValue("putSections", "storage", paramStorage);
	utils->initialize("putSections", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->setSections(paramName, paramSections, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSections", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSections", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSections", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSections", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSections", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSetParagraphPortionProperties) {
	utility::string_t paramName = utils->getTestValue("putSetParagraphPortionProperties", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSetParagraphPortionProperties", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putSetParagraphPortionProperties", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("putSetParagraphPortionProperties", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("putSetParagraphPortionProperties", "portionIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("putSetParagraphPortionProperties", "dto");
	utility::string_t paramPassword = utils->getTestValue("putSetParagraphPortionProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("putSetParagraphPortionProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSetParagraphPortionProperties", "storage");
	utils->initialize("putSetParagraphPortionProperties", "");
	std::shared_ptr<Portion> result = api->updatePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, putSetParagraphPortionPropertiesInvalidName) {
	utility::string_t paramName = utils->getTestValue("putSetParagraphPortionProperties", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSetParagraphPortionProperties", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putSetParagraphPortionProperties", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("putSetParagraphPortionProperties", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("putSetParagraphPortionProperties", "portionIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("putSetParagraphPortionProperties", "dto");
	utility::string_t paramPassword = utils->getTestValue("putSetParagraphPortionProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("putSetParagraphPortionProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSetParagraphPortionProperties", "storage");
	paramName = utils->getInvalidTestValue("putSetParagraphPortionProperties", "name", paramName);
	utils->initialize("putSetParagraphPortionProperties", "name", paramName);

	bool failed = true;
	try
	{
		api->updatePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSetParagraphPortionProperties", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSetParagraphPortionProperties", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSetParagraphPortionProperties", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSetParagraphPortionProperties", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSetParagraphPortionProperties", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSetParagraphPortionPropertiesInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("putSetParagraphPortionProperties", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSetParagraphPortionProperties", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putSetParagraphPortionProperties", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("putSetParagraphPortionProperties", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("putSetParagraphPortionProperties", "portionIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("putSetParagraphPortionProperties", "dto");
	utility::string_t paramPassword = utils->getTestValue("putSetParagraphPortionProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("putSetParagraphPortionProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSetParagraphPortionProperties", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("putSetParagraphPortionProperties", "slideIndex", paramSlideIndex).value();
	utils->initialize("putSetParagraphPortionProperties", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->updatePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSetParagraphPortionProperties", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSetParagraphPortionProperties", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSetParagraphPortionProperties", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSetParagraphPortionProperties", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSetParagraphPortionProperties", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSetParagraphPortionPropertiesInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("putSetParagraphPortionProperties", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSetParagraphPortionProperties", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putSetParagraphPortionProperties", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("putSetParagraphPortionProperties", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("putSetParagraphPortionProperties", "portionIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("putSetParagraphPortionProperties", "dto");
	utility::string_t paramPassword = utils->getTestValue("putSetParagraphPortionProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("putSetParagraphPortionProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSetParagraphPortionProperties", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("putSetParagraphPortionProperties", "shapeIndex", paramShapeIndex).value();
	utils->initialize("putSetParagraphPortionProperties", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->updatePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSetParagraphPortionProperties", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSetParagraphPortionProperties", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSetParagraphPortionProperties", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSetParagraphPortionProperties", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSetParagraphPortionProperties", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSetParagraphPortionPropertiesInvalidParagraphIndex) {
	utility::string_t paramName = utils->getTestValue("putSetParagraphPortionProperties", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSetParagraphPortionProperties", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putSetParagraphPortionProperties", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("putSetParagraphPortionProperties", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("putSetParagraphPortionProperties", "portionIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("putSetParagraphPortionProperties", "dto");
	utility::string_t paramPassword = utils->getTestValue("putSetParagraphPortionProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("putSetParagraphPortionProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSetParagraphPortionProperties", "storage");
	paramParagraphIndex = utils->getInvalidIntTestValue("putSetParagraphPortionProperties", "paragraphIndex", paramParagraphIndex).value();
	utils->initialize("putSetParagraphPortionProperties", "paragraphIndex", paramParagraphIndex);

	bool failed = true;
	try
	{
		api->updatePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSetParagraphPortionProperties", "paragraphIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSetParagraphPortionProperties", "paragraphIndex", paramParagraphIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSetParagraphPortionProperties", "paragraphIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSetParagraphPortionProperties", "paragraphIndex", paramParagraphIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSetParagraphPortionProperties", "paragraphIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSetParagraphPortionPropertiesInvalidPortionIndex) {
	utility::string_t paramName = utils->getTestValue("putSetParagraphPortionProperties", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSetParagraphPortionProperties", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putSetParagraphPortionProperties", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("putSetParagraphPortionProperties", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("putSetParagraphPortionProperties", "portionIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("putSetParagraphPortionProperties", "dto");
	utility::string_t paramPassword = utils->getTestValue("putSetParagraphPortionProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("putSetParagraphPortionProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSetParagraphPortionProperties", "storage");
	paramPortionIndex = utils->getInvalidIntTestValue("putSetParagraphPortionProperties", "portionIndex", paramPortionIndex).value();
	utils->initialize("putSetParagraphPortionProperties", "portionIndex", paramPortionIndex);

	bool failed = true;
	try
	{
		api->updatePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSetParagraphPortionProperties", "portionIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSetParagraphPortionProperties", "portionIndex", paramPortionIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSetParagraphPortionProperties", "portionIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSetParagraphPortionProperties", "portionIndex", paramPortionIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSetParagraphPortionProperties", "portionIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSetParagraphPortionPropertiesInvalidDto) {
	utility::string_t paramName = utils->getTestValue("putSetParagraphPortionProperties", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSetParagraphPortionProperties", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putSetParagraphPortionProperties", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("putSetParagraphPortionProperties", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("putSetParagraphPortionProperties", "portionIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("putSetParagraphPortionProperties", "dto");
	utility::string_t paramPassword = utils->getTestValue("putSetParagraphPortionProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("putSetParagraphPortionProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSetParagraphPortionProperties", "storage");
	paramDto = utils->getInvalidTestValueForClass<>("putSetParagraphPortionProperties", "dto", paramDto);
	utils->initialize("putSetParagraphPortionProperties", "dto", paramDto);

	bool failed = true;
	try
	{
		api->updatePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSetParagraphPortionProperties", "dto");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSetParagraphPortionProperties", "dto", paramDto);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSetParagraphPortionProperties", "dto");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSetParagraphPortionProperties", "dto", paramDto);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSetParagraphPortionProperties", "dto"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSetParagraphPortionPropertiesInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("putSetParagraphPortionProperties", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSetParagraphPortionProperties", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putSetParagraphPortionProperties", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("putSetParagraphPortionProperties", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("putSetParagraphPortionProperties", "portionIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("putSetParagraphPortionProperties", "dto");
	utility::string_t paramPassword = utils->getTestValue("putSetParagraphPortionProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("putSetParagraphPortionProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSetParagraphPortionProperties", "storage");
	paramPassword = utils->getInvalidTestValue("putSetParagraphPortionProperties", "password", paramPassword);
	utils->initialize("putSetParagraphPortionProperties", "password", paramPassword);

	bool failed = true;
	try
	{
		api->updatePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSetParagraphPortionProperties", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSetParagraphPortionProperties", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSetParagraphPortionProperties", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSetParagraphPortionProperties", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSetParagraphPortionProperties", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSetParagraphPortionPropertiesInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("putSetParagraphPortionProperties", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSetParagraphPortionProperties", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putSetParagraphPortionProperties", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("putSetParagraphPortionProperties", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("putSetParagraphPortionProperties", "portionIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("putSetParagraphPortionProperties", "dto");
	utility::string_t paramPassword = utils->getTestValue("putSetParagraphPortionProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("putSetParagraphPortionProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSetParagraphPortionProperties", "storage");
	paramFolder = utils->getInvalidTestValue("putSetParagraphPortionProperties", "folder", paramFolder);
	utils->initialize("putSetParagraphPortionProperties", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->updatePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSetParagraphPortionProperties", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSetParagraphPortionProperties", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSetParagraphPortionProperties", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSetParagraphPortionProperties", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSetParagraphPortionProperties", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSetParagraphPortionPropertiesInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("putSetParagraphPortionProperties", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSetParagraphPortionProperties", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putSetParagraphPortionProperties", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("putSetParagraphPortionProperties", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("putSetParagraphPortionProperties", "portionIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("putSetParagraphPortionProperties", "dto");
	utility::string_t paramPassword = utils->getTestValue("putSetParagraphPortionProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("putSetParagraphPortionProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSetParagraphPortionProperties", "storage");
	paramStorage = utils->getInvalidTestValue("putSetParagraphPortionProperties", "storage", paramStorage);
	utils->initialize("putSetParagraphPortionProperties", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->updatePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSetParagraphPortionProperties", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSetParagraphPortionProperties", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSetParagraphPortionProperties", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSetParagraphPortionProperties", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSetParagraphPortionProperties", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSetParagraphProperties) {
	utility::string_t paramName = utils->getTestValue("putSetParagraphProperties", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSetParagraphProperties", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putSetParagraphProperties", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("putSetParagraphProperties", "paragraphIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("putSetParagraphProperties", "dto");
	utility::string_t paramPassword = utils->getTestValue("putSetParagraphProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("putSetParagraphProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSetParagraphProperties", "storage");
	utils->initialize("putSetParagraphProperties", "");
	std::shared_ptr<Paragraph> result = api->updateParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, putSetParagraphPropertiesInvalidName) {
	utility::string_t paramName = utils->getTestValue("putSetParagraphProperties", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSetParagraphProperties", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putSetParagraphProperties", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("putSetParagraphProperties", "paragraphIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("putSetParagraphProperties", "dto");
	utility::string_t paramPassword = utils->getTestValue("putSetParagraphProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("putSetParagraphProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSetParagraphProperties", "storage");
	paramName = utils->getInvalidTestValue("putSetParagraphProperties", "name", paramName);
	utils->initialize("putSetParagraphProperties", "name", paramName);

	bool failed = true;
	try
	{
		api->updateParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSetParagraphProperties", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSetParagraphProperties", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSetParagraphProperties", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSetParagraphProperties", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSetParagraphProperties", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSetParagraphPropertiesInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("putSetParagraphProperties", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSetParagraphProperties", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putSetParagraphProperties", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("putSetParagraphProperties", "paragraphIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("putSetParagraphProperties", "dto");
	utility::string_t paramPassword = utils->getTestValue("putSetParagraphProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("putSetParagraphProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSetParagraphProperties", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("putSetParagraphProperties", "slideIndex", paramSlideIndex).value();
	utils->initialize("putSetParagraphProperties", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->updateParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSetParagraphProperties", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSetParagraphProperties", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSetParagraphProperties", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSetParagraphProperties", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSetParagraphProperties", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSetParagraphPropertiesInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("putSetParagraphProperties", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSetParagraphProperties", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putSetParagraphProperties", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("putSetParagraphProperties", "paragraphIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("putSetParagraphProperties", "dto");
	utility::string_t paramPassword = utils->getTestValue("putSetParagraphProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("putSetParagraphProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSetParagraphProperties", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("putSetParagraphProperties", "shapeIndex", paramShapeIndex).value();
	utils->initialize("putSetParagraphProperties", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->updateParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSetParagraphProperties", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSetParagraphProperties", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSetParagraphProperties", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSetParagraphProperties", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSetParagraphProperties", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSetParagraphPropertiesInvalidParagraphIndex) {
	utility::string_t paramName = utils->getTestValue("putSetParagraphProperties", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSetParagraphProperties", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putSetParagraphProperties", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("putSetParagraphProperties", "paragraphIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("putSetParagraphProperties", "dto");
	utility::string_t paramPassword = utils->getTestValue("putSetParagraphProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("putSetParagraphProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSetParagraphProperties", "storage");
	paramParagraphIndex = utils->getInvalidIntTestValue("putSetParagraphProperties", "paragraphIndex", paramParagraphIndex).value();
	utils->initialize("putSetParagraphProperties", "paragraphIndex", paramParagraphIndex);

	bool failed = true;
	try
	{
		api->updateParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSetParagraphProperties", "paragraphIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSetParagraphProperties", "paragraphIndex", paramParagraphIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSetParagraphProperties", "paragraphIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSetParagraphProperties", "paragraphIndex", paramParagraphIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSetParagraphProperties", "paragraphIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSetParagraphPropertiesInvalidDto) {
	utility::string_t paramName = utils->getTestValue("putSetParagraphProperties", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSetParagraphProperties", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putSetParagraphProperties", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("putSetParagraphProperties", "paragraphIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("putSetParagraphProperties", "dto");
	utility::string_t paramPassword = utils->getTestValue("putSetParagraphProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("putSetParagraphProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSetParagraphProperties", "storage");
	paramDto = utils->getInvalidTestValueForClass<>("putSetParagraphProperties", "dto", paramDto);
	utils->initialize("putSetParagraphProperties", "dto", paramDto);

	bool failed = true;
	try
	{
		api->updateParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSetParagraphProperties", "dto");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSetParagraphProperties", "dto", paramDto);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSetParagraphProperties", "dto");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSetParagraphProperties", "dto", paramDto);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSetParagraphProperties", "dto"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSetParagraphPropertiesInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("putSetParagraphProperties", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSetParagraphProperties", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putSetParagraphProperties", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("putSetParagraphProperties", "paragraphIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("putSetParagraphProperties", "dto");
	utility::string_t paramPassword = utils->getTestValue("putSetParagraphProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("putSetParagraphProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSetParagraphProperties", "storage");
	paramPassword = utils->getInvalidTestValue("putSetParagraphProperties", "password", paramPassword);
	utils->initialize("putSetParagraphProperties", "password", paramPassword);

	bool failed = true;
	try
	{
		api->updateParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSetParagraphProperties", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSetParagraphProperties", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSetParagraphProperties", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSetParagraphProperties", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSetParagraphProperties", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSetParagraphPropertiesInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("putSetParagraphProperties", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSetParagraphProperties", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putSetParagraphProperties", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("putSetParagraphProperties", "paragraphIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("putSetParagraphProperties", "dto");
	utility::string_t paramPassword = utils->getTestValue("putSetParagraphProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("putSetParagraphProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSetParagraphProperties", "storage");
	paramFolder = utils->getInvalidTestValue("putSetParagraphProperties", "folder", paramFolder);
	utils->initialize("putSetParagraphProperties", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->updateParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSetParagraphProperties", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSetParagraphProperties", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSetParagraphProperties", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSetParagraphProperties", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSetParagraphProperties", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSetParagraphPropertiesInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("putSetParagraphProperties", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSetParagraphProperties", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putSetParagraphProperties", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("putSetParagraphProperties", "paragraphIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("putSetParagraphProperties", "dto");
	utility::string_t paramPassword = utils->getTestValue("putSetParagraphProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("putSetParagraphProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSetParagraphProperties", "storage");
	paramStorage = utils->getInvalidTestValue("putSetParagraphProperties", "storage", paramStorage);
	utils->initialize("putSetParagraphProperties", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->updateParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSetParagraphProperties", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSetParagraphProperties", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSetParagraphProperties", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSetParagraphProperties", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSetParagraphProperties", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSetSubshapeParagraphPortionProperties) {
	utility::string_t paramName = utils->getTestValue("putSetSubshapeParagraphPortionProperties", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSetSubshapeParagraphPortionProperties", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("putSetSubshapeParagraphPortionProperties", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("putSetSubshapeParagraphPortionProperties", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("putSetSubshapeParagraphPortionProperties", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("putSetSubshapeParagraphPortionProperties", "portionIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("putSetSubshapeParagraphPortionProperties", "dto");
	utility::string_t paramPassword = utils->getTestValue("putSetSubshapeParagraphPortionProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("putSetSubshapeParagraphPortionProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSetSubshapeParagraphPortionProperties", "storage");
	utils->initialize("putSetSubshapeParagraphPortionProperties", "");
	std::shared_ptr<Portion> result = api->updateSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, putSetSubshapeParagraphPortionPropertiesInvalidName) {
	utility::string_t paramName = utils->getTestValue("putSetSubshapeParagraphPortionProperties", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSetSubshapeParagraphPortionProperties", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("putSetSubshapeParagraphPortionProperties", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("putSetSubshapeParagraphPortionProperties", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("putSetSubshapeParagraphPortionProperties", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("putSetSubshapeParagraphPortionProperties", "portionIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("putSetSubshapeParagraphPortionProperties", "dto");
	utility::string_t paramPassword = utils->getTestValue("putSetSubshapeParagraphPortionProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("putSetSubshapeParagraphPortionProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSetSubshapeParagraphPortionProperties", "storage");
	paramName = utils->getInvalidTestValue("putSetSubshapeParagraphPortionProperties", "name", paramName);
	utils->initialize("putSetSubshapeParagraphPortionProperties", "name", paramName);

	bool failed = true;
	try
	{
		api->updateSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSetSubshapeParagraphPortionProperties", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSetSubshapeParagraphPortionProperties", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSetSubshapeParagraphPortionProperties", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSetSubshapeParagraphPortionProperties", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSetSubshapeParagraphPortionProperties", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSetSubshapeParagraphPortionPropertiesInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("putSetSubshapeParagraphPortionProperties", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSetSubshapeParagraphPortionProperties", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("putSetSubshapeParagraphPortionProperties", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("putSetSubshapeParagraphPortionProperties", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("putSetSubshapeParagraphPortionProperties", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("putSetSubshapeParagraphPortionProperties", "portionIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("putSetSubshapeParagraphPortionProperties", "dto");
	utility::string_t paramPassword = utils->getTestValue("putSetSubshapeParagraphPortionProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("putSetSubshapeParagraphPortionProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSetSubshapeParagraphPortionProperties", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("putSetSubshapeParagraphPortionProperties", "slideIndex", paramSlideIndex).value();
	utils->initialize("putSetSubshapeParagraphPortionProperties", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->updateSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSetSubshapeParagraphPortionProperties", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSetSubshapeParagraphPortionProperties", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSetSubshapeParagraphPortionProperties", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSetSubshapeParagraphPortionProperties", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSetSubshapeParagraphPortionProperties", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSetSubshapeParagraphPortionPropertiesInvalidPath) {
	utility::string_t paramName = utils->getTestValue("putSetSubshapeParagraphPortionProperties", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSetSubshapeParagraphPortionProperties", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("putSetSubshapeParagraphPortionProperties", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("putSetSubshapeParagraphPortionProperties", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("putSetSubshapeParagraphPortionProperties", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("putSetSubshapeParagraphPortionProperties", "portionIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("putSetSubshapeParagraphPortionProperties", "dto");
	utility::string_t paramPassword = utils->getTestValue("putSetSubshapeParagraphPortionProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("putSetSubshapeParagraphPortionProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSetSubshapeParagraphPortionProperties", "storage");
	paramPath = utils->getInvalidTestValue("putSetSubshapeParagraphPortionProperties", "path", paramPath);
	utils->initialize("putSetSubshapeParagraphPortionProperties", "path", paramPath);

	bool failed = true;
	try
	{
		api->updateSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSetSubshapeParagraphPortionProperties", "path");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSetSubshapeParagraphPortionProperties", "path", paramPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSetSubshapeParagraphPortionProperties", "path");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSetSubshapeParagraphPortionProperties", "path", paramPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSetSubshapeParagraphPortionProperties", "path"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSetSubshapeParagraphPortionPropertiesInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("putSetSubshapeParagraphPortionProperties", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSetSubshapeParagraphPortionProperties", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("putSetSubshapeParagraphPortionProperties", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("putSetSubshapeParagraphPortionProperties", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("putSetSubshapeParagraphPortionProperties", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("putSetSubshapeParagraphPortionProperties", "portionIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("putSetSubshapeParagraphPortionProperties", "dto");
	utility::string_t paramPassword = utils->getTestValue("putSetSubshapeParagraphPortionProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("putSetSubshapeParagraphPortionProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSetSubshapeParagraphPortionProperties", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("putSetSubshapeParagraphPortionProperties", "shapeIndex", paramShapeIndex).value();
	utils->initialize("putSetSubshapeParagraphPortionProperties", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->updateSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSetSubshapeParagraphPortionProperties", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSetSubshapeParagraphPortionProperties", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSetSubshapeParagraphPortionProperties", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSetSubshapeParagraphPortionProperties", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSetSubshapeParagraphPortionProperties", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSetSubshapeParagraphPortionPropertiesInvalidParagraphIndex) {
	utility::string_t paramName = utils->getTestValue("putSetSubshapeParagraphPortionProperties", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSetSubshapeParagraphPortionProperties", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("putSetSubshapeParagraphPortionProperties", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("putSetSubshapeParagraphPortionProperties", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("putSetSubshapeParagraphPortionProperties", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("putSetSubshapeParagraphPortionProperties", "portionIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("putSetSubshapeParagraphPortionProperties", "dto");
	utility::string_t paramPassword = utils->getTestValue("putSetSubshapeParagraphPortionProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("putSetSubshapeParagraphPortionProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSetSubshapeParagraphPortionProperties", "storage");
	paramParagraphIndex = utils->getInvalidIntTestValue("putSetSubshapeParagraphPortionProperties", "paragraphIndex", paramParagraphIndex).value();
	utils->initialize("putSetSubshapeParagraphPortionProperties", "paragraphIndex", paramParagraphIndex);

	bool failed = true;
	try
	{
		api->updateSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSetSubshapeParagraphPortionProperties", "paragraphIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSetSubshapeParagraphPortionProperties", "paragraphIndex", paramParagraphIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSetSubshapeParagraphPortionProperties", "paragraphIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSetSubshapeParagraphPortionProperties", "paragraphIndex", paramParagraphIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSetSubshapeParagraphPortionProperties", "paragraphIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSetSubshapeParagraphPortionPropertiesInvalidPortionIndex) {
	utility::string_t paramName = utils->getTestValue("putSetSubshapeParagraphPortionProperties", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSetSubshapeParagraphPortionProperties", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("putSetSubshapeParagraphPortionProperties", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("putSetSubshapeParagraphPortionProperties", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("putSetSubshapeParagraphPortionProperties", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("putSetSubshapeParagraphPortionProperties", "portionIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("putSetSubshapeParagraphPortionProperties", "dto");
	utility::string_t paramPassword = utils->getTestValue("putSetSubshapeParagraphPortionProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("putSetSubshapeParagraphPortionProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSetSubshapeParagraphPortionProperties", "storage");
	paramPortionIndex = utils->getInvalidIntTestValue("putSetSubshapeParagraphPortionProperties", "portionIndex", paramPortionIndex).value();
	utils->initialize("putSetSubshapeParagraphPortionProperties", "portionIndex", paramPortionIndex);

	bool failed = true;
	try
	{
		api->updateSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSetSubshapeParagraphPortionProperties", "portionIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSetSubshapeParagraphPortionProperties", "portionIndex", paramPortionIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSetSubshapeParagraphPortionProperties", "portionIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSetSubshapeParagraphPortionProperties", "portionIndex", paramPortionIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSetSubshapeParagraphPortionProperties", "portionIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSetSubshapeParagraphPortionPropertiesInvalidDto) {
	utility::string_t paramName = utils->getTestValue("putSetSubshapeParagraphPortionProperties", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSetSubshapeParagraphPortionProperties", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("putSetSubshapeParagraphPortionProperties", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("putSetSubshapeParagraphPortionProperties", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("putSetSubshapeParagraphPortionProperties", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("putSetSubshapeParagraphPortionProperties", "portionIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("putSetSubshapeParagraphPortionProperties", "dto");
	utility::string_t paramPassword = utils->getTestValue("putSetSubshapeParagraphPortionProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("putSetSubshapeParagraphPortionProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSetSubshapeParagraphPortionProperties", "storage");
	paramDto = utils->getInvalidTestValueForClass<>("putSetSubshapeParagraphPortionProperties", "dto", paramDto);
	utils->initialize("putSetSubshapeParagraphPortionProperties", "dto", paramDto);

	bool failed = true;
	try
	{
		api->updateSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSetSubshapeParagraphPortionProperties", "dto");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSetSubshapeParagraphPortionProperties", "dto", paramDto);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSetSubshapeParagraphPortionProperties", "dto");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSetSubshapeParagraphPortionProperties", "dto", paramDto);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSetSubshapeParagraphPortionProperties", "dto"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSetSubshapeParagraphPortionPropertiesInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("putSetSubshapeParagraphPortionProperties", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSetSubshapeParagraphPortionProperties", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("putSetSubshapeParagraphPortionProperties", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("putSetSubshapeParagraphPortionProperties", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("putSetSubshapeParagraphPortionProperties", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("putSetSubshapeParagraphPortionProperties", "portionIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("putSetSubshapeParagraphPortionProperties", "dto");
	utility::string_t paramPassword = utils->getTestValue("putSetSubshapeParagraphPortionProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("putSetSubshapeParagraphPortionProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSetSubshapeParagraphPortionProperties", "storage");
	paramPassword = utils->getInvalidTestValue("putSetSubshapeParagraphPortionProperties", "password", paramPassword);
	utils->initialize("putSetSubshapeParagraphPortionProperties", "password", paramPassword);

	bool failed = true;
	try
	{
		api->updateSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSetSubshapeParagraphPortionProperties", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSetSubshapeParagraphPortionProperties", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSetSubshapeParagraphPortionProperties", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSetSubshapeParagraphPortionProperties", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSetSubshapeParagraphPortionProperties", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSetSubshapeParagraphPortionPropertiesInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("putSetSubshapeParagraphPortionProperties", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSetSubshapeParagraphPortionProperties", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("putSetSubshapeParagraphPortionProperties", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("putSetSubshapeParagraphPortionProperties", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("putSetSubshapeParagraphPortionProperties", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("putSetSubshapeParagraphPortionProperties", "portionIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("putSetSubshapeParagraphPortionProperties", "dto");
	utility::string_t paramPassword = utils->getTestValue("putSetSubshapeParagraphPortionProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("putSetSubshapeParagraphPortionProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSetSubshapeParagraphPortionProperties", "storage");
	paramFolder = utils->getInvalidTestValue("putSetSubshapeParagraphPortionProperties", "folder", paramFolder);
	utils->initialize("putSetSubshapeParagraphPortionProperties", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->updateSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSetSubshapeParagraphPortionProperties", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSetSubshapeParagraphPortionProperties", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSetSubshapeParagraphPortionProperties", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSetSubshapeParagraphPortionProperties", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSetSubshapeParagraphPortionProperties", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSetSubshapeParagraphPortionPropertiesInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("putSetSubshapeParagraphPortionProperties", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSetSubshapeParagraphPortionProperties", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("putSetSubshapeParagraphPortionProperties", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("putSetSubshapeParagraphPortionProperties", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("putSetSubshapeParagraphPortionProperties", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("putSetSubshapeParagraphPortionProperties", "portionIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("putSetSubshapeParagraphPortionProperties", "dto");
	utility::string_t paramPassword = utils->getTestValue("putSetSubshapeParagraphPortionProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("putSetSubshapeParagraphPortionProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSetSubshapeParagraphPortionProperties", "storage");
	paramStorage = utils->getInvalidTestValue("putSetSubshapeParagraphPortionProperties", "storage", paramStorage);
	utils->initialize("putSetSubshapeParagraphPortionProperties", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->updateSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSetSubshapeParagraphPortionProperties", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSetSubshapeParagraphPortionProperties", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSetSubshapeParagraphPortionProperties", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSetSubshapeParagraphPortionProperties", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSetSubshapeParagraphPortionProperties", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSetSubshapeParagraphProperties) {
	utility::string_t paramName = utils->getTestValue("putSetSubshapeParagraphProperties", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSetSubshapeParagraphProperties", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("putSetSubshapeParagraphProperties", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("putSetSubshapeParagraphProperties", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("putSetSubshapeParagraphProperties", "paragraphIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("putSetSubshapeParagraphProperties", "dto");
	utility::string_t paramPassword = utils->getTestValue("putSetSubshapeParagraphProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("putSetSubshapeParagraphProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSetSubshapeParagraphProperties", "storage");
	utils->initialize("putSetSubshapeParagraphProperties", "");
	std::shared_ptr<Paragraph> result = api->updateSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, putSetSubshapeParagraphPropertiesInvalidName) {
	utility::string_t paramName = utils->getTestValue("putSetSubshapeParagraphProperties", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSetSubshapeParagraphProperties", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("putSetSubshapeParagraphProperties", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("putSetSubshapeParagraphProperties", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("putSetSubshapeParagraphProperties", "paragraphIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("putSetSubshapeParagraphProperties", "dto");
	utility::string_t paramPassword = utils->getTestValue("putSetSubshapeParagraphProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("putSetSubshapeParagraphProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSetSubshapeParagraphProperties", "storage");
	paramName = utils->getInvalidTestValue("putSetSubshapeParagraphProperties", "name", paramName);
	utils->initialize("putSetSubshapeParagraphProperties", "name", paramName);

	bool failed = true;
	try
	{
		api->updateSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSetSubshapeParagraphProperties", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSetSubshapeParagraphProperties", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSetSubshapeParagraphProperties", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSetSubshapeParagraphProperties", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSetSubshapeParagraphProperties", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSetSubshapeParagraphPropertiesInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("putSetSubshapeParagraphProperties", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSetSubshapeParagraphProperties", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("putSetSubshapeParagraphProperties", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("putSetSubshapeParagraphProperties", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("putSetSubshapeParagraphProperties", "paragraphIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("putSetSubshapeParagraphProperties", "dto");
	utility::string_t paramPassword = utils->getTestValue("putSetSubshapeParagraphProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("putSetSubshapeParagraphProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSetSubshapeParagraphProperties", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("putSetSubshapeParagraphProperties", "slideIndex", paramSlideIndex).value();
	utils->initialize("putSetSubshapeParagraphProperties", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->updateSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSetSubshapeParagraphProperties", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSetSubshapeParagraphProperties", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSetSubshapeParagraphProperties", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSetSubshapeParagraphProperties", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSetSubshapeParagraphProperties", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSetSubshapeParagraphPropertiesInvalidPath) {
	utility::string_t paramName = utils->getTestValue("putSetSubshapeParagraphProperties", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSetSubshapeParagraphProperties", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("putSetSubshapeParagraphProperties", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("putSetSubshapeParagraphProperties", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("putSetSubshapeParagraphProperties", "paragraphIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("putSetSubshapeParagraphProperties", "dto");
	utility::string_t paramPassword = utils->getTestValue("putSetSubshapeParagraphProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("putSetSubshapeParagraphProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSetSubshapeParagraphProperties", "storage");
	paramPath = utils->getInvalidTestValue("putSetSubshapeParagraphProperties", "path", paramPath);
	utils->initialize("putSetSubshapeParagraphProperties", "path", paramPath);

	bool failed = true;
	try
	{
		api->updateSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSetSubshapeParagraphProperties", "path");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSetSubshapeParagraphProperties", "path", paramPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSetSubshapeParagraphProperties", "path");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSetSubshapeParagraphProperties", "path", paramPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSetSubshapeParagraphProperties", "path"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSetSubshapeParagraphPropertiesInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("putSetSubshapeParagraphProperties", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSetSubshapeParagraphProperties", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("putSetSubshapeParagraphProperties", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("putSetSubshapeParagraphProperties", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("putSetSubshapeParagraphProperties", "paragraphIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("putSetSubshapeParagraphProperties", "dto");
	utility::string_t paramPassword = utils->getTestValue("putSetSubshapeParagraphProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("putSetSubshapeParagraphProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSetSubshapeParagraphProperties", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("putSetSubshapeParagraphProperties", "shapeIndex", paramShapeIndex).value();
	utils->initialize("putSetSubshapeParagraphProperties", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->updateSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSetSubshapeParagraphProperties", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSetSubshapeParagraphProperties", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSetSubshapeParagraphProperties", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSetSubshapeParagraphProperties", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSetSubshapeParagraphProperties", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSetSubshapeParagraphPropertiesInvalidParagraphIndex) {
	utility::string_t paramName = utils->getTestValue("putSetSubshapeParagraphProperties", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSetSubshapeParagraphProperties", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("putSetSubshapeParagraphProperties", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("putSetSubshapeParagraphProperties", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("putSetSubshapeParagraphProperties", "paragraphIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("putSetSubshapeParagraphProperties", "dto");
	utility::string_t paramPassword = utils->getTestValue("putSetSubshapeParagraphProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("putSetSubshapeParagraphProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSetSubshapeParagraphProperties", "storage");
	paramParagraphIndex = utils->getInvalidIntTestValue("putSetSubshapeParagraphProperties", "paragraphIndex", paramParagraphIndex).value();
	utils->initialize("putSetSubshapeParagraphProperties", "paragraphIndex", paramParagraphIndex);

	bool failed = true;
	try
	{
		api->updateSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSetSubshapeParagraphProperties", "paragraphIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSetSubshapeParagraphProperties", "paragraphIndex", paramParagraphIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSetSubshapeParagraphProperties", "paragraphIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSetSubshapeParagraphProperties", "paragraphIndex", paramParagraphIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSetSubshapeParagraphProperties", "paragraphIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSetSubshapeParagraphPropertiesInvalidDto) {
	utility::string_t paramName = utils->getTestValue("putSetSubshapeParagraphProperties", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSetSubshapeParagraphProperties", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("putSetSubshapeParagraphProperties", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("putSetSubshapeParagraphProperties", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("putSetSubshapeParagraphProperties", "paragraphIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("putSetSubshapeParagraphProperties", "dto");
	utility::string_t paramPassword = utils->getTestValue("putSetSubshapeParagraphProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("putSetSubshapeParagraphProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSetSubshapeParagraphProperties", "storage");
	paramDto = utils->getInvalidTestValueForClass<>("putSetSubshapeParagraphProperties", "dto", paramDto);
	utils->initialize("putSetSubshapeParagraphProperties", "dto", paramDto);

	bool failed = true;
	try
	{
		api->updateSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSetSubshapeParagraphProperties", "dto");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSetSubshapeParagraphProperties", "dto", paramDto);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSetSubshapeParagraphProperties", "dto");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSetSubshapeParagraphProperties", "dto", paramDto);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSetSubshapeParagraphProperties", "dto"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSetSubshapeParagraphPropertiesInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("putSetSubshapeParagraphProperties", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSetSubshapeParagraphProperties", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("putSetSubshapeParagraphProperties", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("putSetSubshapeParagraphProperties", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("putSetSubshapeParagraphProperties", "paragraphIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("putSetSubshapeParagraphProperties", "dto");
	utility::string_t paramPassword = utils->getTestValue("putSetSubshapeParagraphProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("putSetSubshapeParagraphProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSetSubshapeParagraphProperties", "storage");
	paramPassword = utils->getInvalidTestValue("putSetSubshapeParagraphProperties", "password", paramPassword);
	utils->initialize("putSetSubshapeParagraphProperties", "password", paramPassword);

	bool failed = true;
	try
	{
		api->updateSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSetSubshapeParagraphProperties", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSetSubshapeParagraphProperties", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSetSubshapeParagraphProperties", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSetSubshapeParagraphProperties", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSetSubshapeParagraphProperties", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSetSubshapeParagraphPropertiesInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("putSetSubshapeParagraphProperties", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSetSubshapeParagraphProperties", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("putSetSubshapeParagraphProperties", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("putSetSubshapeParagraphProperties", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("putSetSubshapeParagraphProperties", "paragraphIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("putSetSubshapeParagraphProperties", "dto");
	utility::string_t paramPassword = utils->getTestValue("putSetSubshapeParagraphProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("putSetSubshapeParagraphProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSetSubshapeParagraphProperties", "storage");
	paramFolder = utils->getInvalidTestValue("putSetSubshapeParagraphProperties", "folder", paramFolder);
	utils->initialize("putSetSubshapeParagraphProperties", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->updateSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSetSubshapeParagraphProperties", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSetSubshapeParagraphProperties", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSetSubshapeParagraphProperties", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSetSubshapeParagraphProperties", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSetSubshapeParagraphProperties", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSetSubshapeParagraphPropertiesInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("putSetSubshapeParagraphProperties", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSetSubshapeParagraphProperties", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("putSetSubshapeParagraphProperties", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("putSetSubshapeParagraphProperties", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("putSetSubshapeParagraphProperties", "paragraphIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("putSetSubshapeParagraphProperties", "dto");
	utility::string_t paramPassword = utils->getTestValue("putSetSubshapeParagraphProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("putSetSubshapeParagraphProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSetSubshapeParagraphProperties", "storage");
	paramStorage = utils->getInvalidTestValue("putSetSubshapeParagraphProperties", "storage", paramStorage);
	utils->initialize("putSetSubshapeParagraphProperties", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->updateSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSetSubshapeParagraphProperties", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSetSubshapeParagraphProperties", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSetSubshapeParagraphProperties", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSetSubshapeParagraphProperties", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSetSubshapeParagraphProperties", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putShapeSaveAs) {
	utility::string_t paramName = utils->getTestValue("putShapeSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putShapeSaveAs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putShapeSaveAs", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("putShapeSaveAs", "format");
	utility::string_t paramOutPath = utils->getTestValue("putShapeSaveAs", "outPath");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("putShapeSaveAs", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("putShapeSaveAs", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("putShapeSaveAs", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("putShapeSaveAs", "bounds");
	utility::string_t paramPassword = utils->getTestValue("putShapeSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("putShapeSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("putShapeSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("putShapeSaveAs", "fontsFolder");
	utils->initialize("putShapeSaveAs", "");
	api->saveShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
}

TEST_F(SlidesApiTest, putShapeSaveAsInvalidName) {
	utility::string_t paramName = utils->getTestValue("putShapeSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putShapeSaveAs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putShapeSaveAs", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("putShapeSaveAs", "format");
	utility::string_t paramOutPath = utils->getTestValue("putShapeSaveAs", "outPath");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("putShapeSaveAs", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("putShapeSaveAs", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("putShapeSaveAs", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("putShapeSaveAs", "bounds");
	utility::string_t paramPassword = utils->getTestValue("putShapeSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("putShapeSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("putShapeSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("putShapeSaveAs", "fontsFolder");
	paramName = utils->getInvalidTestValue("putShapeSaveAs", "name", paramName);
	utils->initialize("putShapeSaveAs", "name", paramName);

	bool failed = true;
	try
	{
		api->saveShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putShapeSaveAs", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putShapeSaveAs", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putShapeSaveAs", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putShapeSaveAs", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putShapeSaveAs", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putShapeSaveAsInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("putShapeSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putShapeSaveAs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putShapeSaveAs", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("putShapeSaveAs", "format");
	utility::string_t paramOutPath = utils->getTestValue("putShapeSaveAs", "outPath");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("putShapeSaveAs", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("putShapeSaveAs", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("putShapeSaveAs", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("putShapeSaveAs", "bounds");
	utility::string_t paramPassword = utils->getTestValue("putShapeSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("putShapeSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("putShapeSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("putShapeSaveAs", "fontsFolder");
	paramSlideIndex = utils->getInvalidIntTestValue("putShapeSaveAs", "slideIndex", paramSlideIndex).value();
	utils->initialize("putShapeSaveAs", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->saveShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putShapeSaveAs", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putShapeSaveAs", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putShapeSaveAs", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putShapeSaveAs", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putShapeSaveAs", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putShapeSaveAsInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("putShapeSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putShapeSaveAs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putShapeSaveAs", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("putShapeSaveAs", "format");
	utility::string_t paramOutPath = utils->getTestValue("putShapeSaveAs", "outPath");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("putShapeSaveAs", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("putShapeSaveAs", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("putShapeSaveAs", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("putShapeSaveAs", "bounds");
	utility::string_t paramPassword = utils->getTestValue("putShapeSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("putShapeSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("putShapeSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("putShapeSaveAs", "fontsFolder");
	paramShapeIndex = utils->getInvalidIntTestValue("putShapeSaveAs", "shapeIndex", paramShapeIndex).value();
	utils->initialize("putShapeSaveAs", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->saveShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putShapeSaveAs", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putShapeSaveAs", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putShapeSaveAs", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putShapeSaveAs", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putShapeSaveAs", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putShapeSaveAsInvalidFormat) {
	utility::string_t paramName = utils->getTestValue("putShapeSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putShapeSaveAs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putShapeSaveAs", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("putShapeSaveAs", "format");
	utility::string_t paramOutPath = utils->getTestValue("putShapeSaveAs", "outPath");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("putShapeSaveAs", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("putShapeSaveAs", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("putShapeSaveAs", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("putShapeSaveAs", "bounds");
	utility::string_t paramPassword = utils->getTestValue("putShapeSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("putShapeSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("putShapeSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("putShapeSaveAs", "fontsFolder");
	paramFormat = utils->getInvalidTestValue("putShapeSaveAs", "format", paramFormat);
	utils->initialize("putShapeSaveAs", "format", paramFormat);

	bool failed = true;
	try
	{
		api->saveShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putShapeSaveAs", "format");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putShapeSaveAs", "format", paramFormat);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putShapeSaveAs", "format");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putShapeSaveAs", "format", paramFormat);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putShapeSaveAs", "format"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putShapeSaveAsInvalidOutPath) {
	utility::string_t paramName = utils->getTestValue("putShapeSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putShapeSaveAs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putShapeSaveAs", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("putShapeSaveAs", "format");
	utility::string_t paramOutPath = utils->getTestValue("putShapeSaveAs", "outPath");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("putShapeSaveAs", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("putShapeSaveAs", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("putShapeSaveAs", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("putShapeSaveAs", "bounds");
	utility::string_t paramPassword = utils->getTestValue("putShapeSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("putShapeSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("putShapeSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("putShapeSaveAs", "fontsFolder");
	paramOutPath = utils->getInvalidTestValue("putShapeSaveAs", "outPath", paramOutPath);
	utils->initialize("putShapeSaveAs", "outPath", paramOutPath);

	bool failed = true;
	try
	{
		api->saveShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putShapeSaveAs", "outPath");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putShapeSaveAs", "outPath", paramOutPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putShapeSaveAs", "outPath");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putShapeSaveAs", "outPath", paramOutPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putShapeSaveAs", "outPath"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putShapeSaveAsInvalidOptions) {
	utility::string_t paramName = utils->getTestValue("putShapeSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putShapeSaveAs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putShapeSaveAs", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("putShapeSaveAs", "format");
	utility::string_t paramOutPath = utils->getTestValue("putShapeSaveAs", "outPath");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("putShapeSaveAs", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("putShapeSaveAs", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("putShapeSaveAs", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("putShapeSaveAs", "bounds");
	utility::string_t paramPassword = utils->getTestValue("putShapeSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("putShapeSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("putShapeSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("putShapeSaveAs", "fontsFolder");
	paramOptions = utils->getInvalidTestValueForClass<>("putShapeSaveAs", "options", paramOptions);
	utils->initialize("putShapeSaveAs", "options", paramOptions);

	bool failed = true;
	try
	{
		api->saveShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putShapeSaveAs", "options");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putShapeSaveAs", "options", paramOptions);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putShapeSaveAs", "options");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putShapeSaveAs", "options", paramOptions);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putShapeSaveAs", "options"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putShapeSaveAsInvalidScaleX) {
	utility::string_t paramName = utils->getTestValue("putShapeSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putShapeSaveAs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putShapeSaveAs", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("putShapeSaveAs", "format");
	utility::string_t paramOutPath = utils->getTestValue("putShapeSaveAs", "outPath");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("putShapeSaveAs", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("putShapeSaveAs", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("putShapeSaveAs", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("putShapeSaveAs", "bounds");
	utility::string_t paramPassword = utils->getTestValue("putShapeSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("putShapeSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("putShapeSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("putShapeSaveAs", "fontsFolder");
	paramScaleX = utils->getInvalidDoubleTestValue("putShapeSaveAs", "scaleX", paramScaleX).value();
	utils->initialize("putShapeSaveAs", "scaleX", paramScaleX);

	bool failed = true;
	try
	{
		api->saveShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putShapeSaveAs", "scaleX");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putShapeSaveAs", "scaleX", paramScaleX);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putShapeSaveAs", "scaleX");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putShapeSaveAs", "scaleX", paramScaleX);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putShapeSaveAs", "scaleX"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putShapeSaveAsInvalidScaleY) {
	utility::string_t paramName = utils->getTestValue("putShapeSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putShapeSaveAs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putShapeSaveAs", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("putShapeSaveAs", "format");
	utility::string_t paramOutPath = utils->getTestValue("putShapeSaveAs", "outPath");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("putShapeSaveAs", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("putShapeSaveAs", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("putShapeSaveAs", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("putShapeSaveAs", "bounds");
	utility::string_t paramPassword = utils->getTestValue("putShapeSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("putShapeSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("putShapeSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("putShapeSaveAs", "fontsFolder");
	paramScaleY = utils->getInvalidDoubleTestValue("putShapeSaveAs", "scaleY", paramScaleY).value();
	utils->initialize("putShapeSaveAs", "scaleY", paramScaleY);

	bool failed = true;
	try
	{
		api->saveShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putShapeSaveAs", "scaleY");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putShapeSaveAs", "scaleY", paramScaleY);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putShapeSaveAs", "scaleY");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putShapeSaveAs", "scaleY", paramScaleY);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putShapeSaveAs", "scaleY"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putShapeSaveAsInvalidBounds) {
	utility::string_t paramName = utils->getTestValue("putShapeSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putShapeSaveAs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putShapeSaveAs", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("putShapeSaveAs", "format");
	utility::string_t paramOutPath = utils->getTestValue("putShapeSaveAs", "outPath");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("putShapeSaveAs", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("putShapeSaveAs", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("putShapeSaveAs", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("putShapeSaveAs", "bounds");
	utility::string_t paramPassword = utils->getTestValue("putShapeSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("putShapeSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("putShapeSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("putShapeSaveAs", "fontsFolder");
	paramBounds = utils->getInvalidTestValue("putShapeSaveAs", "bounds", paramBounds);
	utils->initialize("putShapeSaveAs", "bounds", paramBounds);

	bool failed = true;
	try
	{
		api->saveShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putShapeSaveAs", "bounds");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putShapeSaveAs", "bounds", paramBounds);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putShapeSaveAs", "bounds");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putShapeSaveAs", "bounds", paramBounds);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putShapeSaveAs", "bounds"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putShapeSaveAsInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("putShapeSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putShapeSaveAs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putShapeSaveAs", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("putShapeSaveAs", "format");
	utility::string_t paramOutPath = utils->getTestValue("putShapeSaveAs", "outPath");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("putShapeSaveAs", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("putShapeSaveAs", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("putShapeSaveAs", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("putShapeSaveAs", "bounds");
	utility::string_t paramPassword = utils->getTestValue("putShapeSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("putShapeSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("putShapeSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("putShapeSaveAs", "fontsFolder");
	paramPassword = utils->getInvalidTestValue("putShapeSaveAs", "password", paramPassword);
	utils->initialize("putShapeSaveAs", "password", paramPassword);

	bool failed = true;
	try
	{
		api->saveShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putShapeSaveAs", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putShapeSaveAs", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putShapeSaveAs", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putShapeSaveAs", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putShapeSaveAs", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putShapeSaveAsInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("putShapeSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putShapeSaveAs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putShapeSaveAs", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("putShapeSaveAs", "format");
	utility::string_t paramOutPath = utils->getTestValue("putShapeSaveAs", "outPath");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("putShapeSaveAs", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("putShapeSaveAs", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("putShapeSaveAs", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("putShapeSaveAs", "bounds");
	utility::string_t paramPassword = utils->getTestValue("putShapeSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("putShapeSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("putShapeSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("putShapeSaveAs", "fontsFolder");
	paramFolder = utils->getInvalidTestValue("putShapeSaveAs", "folder", paramFolder);
	utils->initialize("putShapeSaveAs", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->saveShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putShapeSaveAs", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putShapeSaveAs", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putShapeSaveAs", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putShapeSaveAs", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putShapeSaveAs", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putShapeSaveAsInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("putShapeSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putShapeSaveAs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putShapeSaveAs", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("putShapeSaveAs", "format");
	utility::string_t paramOutPath = utils->getTestValue("putShapeSaveAs", "outPath");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("putShapeSaveAs", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("putShapeSaveAs", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("putShapeSaveAs", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("putShapeSaveAs", "bounds");
	utility::string_t paramPassword = utils->getTestValue("putShapeSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("putShapeSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("putShapeSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("putShapeSaveAs", "fontsFolder");
	paramStorage = utils->getInvalidTestValue("putShapeSaveAs", "storage", paramStorage);
	utils->initialize("putShapeSaveAs", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->saveShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putShapeSaveAs", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putShapeSaveAs", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putShapeSaveAs", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putShapeSaveAs", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putShapeSaveAs", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putShapeSaveAsInvalidFontsFolder) {
	utility::string_t paramName = utils->getTestValue("putShapeSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putShapeSaveAs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putShapeSaveAs", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("putShapeSaveAs", "format");
	utility::string_t paramOutPath = utils->getTestValue("putShapeSaveAs", "outPath");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("putShapeSaveAs", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("putShapeSaveAs", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("putShapeSaveAs", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("putShapeSaveAs", "bounds");
	utility::string_t paramPassword = utils->getTestValue("putShapeSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("putShapeSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("putShapeSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("putShapeSaveAs", "fontsFolder");
	paramFontsFolder = utils->getInvalidTestValue("putShapeSaveAs", "fontsFolder", paramFontsFolder);
	utils->initialize("putShapeSaveAs", "fontsFolder", paramFontsFolder);

	bool failed = true;
	try
	{
		api->saveShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putShapeSaveAs", "fontsFolder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putShapeSaveAs", "fontsFolder", paramFontsFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putShapeSaveAs", "fontsFolder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putShapeSaveAs", "fontsFolder", paramFontsFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putShapeSaveAs", "fontsFolder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideAnimation) {
	utility::string_t paramName = utils->getTestValue("putSlideAnimation", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSlideAnimation", "slideIndex");
	std::shared_ptr<SlideAnimation> paramAnimation = utils->getTestValueForClass<SlideAnimation>("putSlideAnimation", "animation");
	utility::string_t paramPassword = utils->getTestValue("putSlideAnimation", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlideAnimation", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlideAnimation", "storage");
	utils->initialize("putSlideAnimation", "");
	std::shared_ptr<SlideAnimation> result = api->setAnimation(paramName, paramSlideIndex, paramAnimation, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, putSlideAnimationInvalidName) {
	utility::string_t paramName = utils->getTestValue("putSlideAnimation", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSlideAnimation", "slideIndex");
	std::shared_ptr<SlideAnimation> paramAnimation = utils->getTestValueForClass<SlideAnimation>("putSlideAnimation", "animation");
	utility::string_t paramPassword = utils->getTestValue("putSlideAnimation", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlideAnimation", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlideAnimation", "storage");
	paramName = utils->getInvalidTestValue("putSlideAnimation", "name", paramName);
	utils->initialize("putSlideAnimation", "name", paramName);

	bool failed = true;
	try
	{
		api->setAnimation(paramName, paramSlideIndex, paramAnimation, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideAnimation", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideAnimation", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideAnimation", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideAnimation", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideAnimation", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideAnimationInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("putSlideAnimation", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSlideAnimation", "slideIndex");
	std::shared_ptr<SlideAnimation> paramAnimation = utils->getTestValueForClass<SlideAnimation>("putSlideAnimation", "animation");
	utility::string_t paramPassword = utils->getTestValue("putSlideAnimation", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlideAnimation", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlideAnimation", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("putSlideAnimation", "slideIndex", paramSlideIndex).value();
	utils->initialize("putSlideAnimation", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->setAnimation(paramName, paramSlideIndex, paramAnimation, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideAnimation", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideAnimation", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideAnimation", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideAnimation", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideAnimation", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideAnimationInvalidAnimation) {
	utility::string_t paramName = utils->getTestValue("putSlideAnimation", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSlideAnimation", "slideIndex");
	std::shared_ptr<SlideAnimation> paramAnimation = utils->getTestValueForClass<SlideAnimation>("putSlideAnimation", "animation");
	utility::string_t paramPassword = utils->getTestValue("putSlideAnimation", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlideAnimation", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlideAnimation", "storage");
	paramAnimation = utils->getInvalidTestValueForClass<>("putSlideAnimation", "animation", paramAnimation);
	utils->initialize("putSlideAnimation", "animation", paramAnimation);

	bool failed = true;
	try
	{
		api->setAnimation(paramName, paramSlideIndex, paramAnimation, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideAnimation", "animation");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideAnimation", "animation", paramAnimation);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideAnimation", "animation");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideAnimation", "animation", paramAnimation);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideAnimation", "animation"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideAnimationInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("putSlideAnimation", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSlideAnimation", "slideIndex");
	std::shared_ptr<SlideAnimation> paramAnimation = utils->getTestValueForClass<SlideAnimation>("putSlideAnimation", "animation");
	utility::string_t paramPassword = utils->getTestValue("putSlideAnimation", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlideAnimation", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlideAnimation", "storage");
	paramPassword = utils->getInvalidTestValue("putSlideAnimation", "password", paramPassword);
	utils->initialize("putSlideAnimation", "password", paramPassword);

	bool failed = true;
	try
	{
		api->setAnimation(paramName, paramSlideIndex, paramAnimation, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideAnimation", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideAnimation", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideAnimation", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideAnimation", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideAnimation", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideAnimationInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("putSlideAnimation", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSlideAnimation", "slideIndex");
	std::shared_ptr<SlideAnimation> paramAnimation = utils->getTestValueForClass<SlideAnimation>("putSlideAnimation", "animation");
	utility::string_t paramPassword = utils->getTestValue("putSlideAnimation", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlideAnimation", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlideAnimation", "storage");
	paramFolder = utils->getInvalidTestValue("putSlideAnimation", "folder", paramFolder);
	utils->initialize("putSlideAnimation", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->setAnimation(paramName, paramSlideIndex, paramAnimation, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideAnimation", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideAnimation", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideAnimation", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideAnimation", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideAnimation", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideAnimationInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("putSlideAnimation", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSlideAnimation", "slideIndex");
	std::shared_ptr<SlideAnimation> paramAnimation = utils->getTestValueForClass<SlideAnimation>("putSlideAnimation", "animation");
	utility::string_t paramPassword = utils->getTestValue("putSlideAnimation", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlideAnimation", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlideAnimation", "storage");
	paramStorage = utils->getInvalidTestValue("putSlideAnimation", "storage", paramStorage);
	utils->initialize("putSlideAnimation", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->setAnimation(paramName, paramSlideIndex, paramAnimation, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideAnimation", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideAnimation", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideAnimation", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideAnimation", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideAnimation", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideAnimationEffect) {
	utility::string_t paramName = utils->getTestValue("putSlideAnimationEffect", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSlideAnimationEffect", "slideIndex");
	int32_t paramEffectIndex = utils->getIntTestValue("putSlideAnimationEffect", "effectIndex");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("putSlideAnimationEffect", "effect");
	utility::string_t paramPassword = utils->getTestValue("putSlideAnimationEffect", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlideAnimationEffect", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlideAnimationEffect", "storage");
	utils->initialize("putSlideAnimationEffect", "");
	std::shared_ptr<SlideAnimation> result = api->updateAnimationEffect(paramName, paramSlideIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, putSlideAnimationEffectInvalidName) {
	utility::string_t paramName = utils->getTestValue("putSlideAnimationEffect", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSlideAnimationEffect", "slideIndex");
	int32_t paramEffectIndex = utils->getIntTestValue("putSlideAnimationEffect", "effectIndex");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("putSlideAnimationEffect", "effect");
	utility::string_t paramPassword = utils->getTestValue("putSlideAnimationEffect", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlideAnimationEffect", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlideAnimationEffect", "storage");
	paramName = utils->getInvalidTestValue("putSlideAnimationEffect", "name", paramName);
	utils->initialize("putSlideAnimationEffect", "name", paramName);

	bool failed = true;
	try
	{
		api->updateAnimationEffect(paramName, paramSlideIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideAnimationEffect", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideAnimationEffect", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideAnimationEffect", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideAnimationEffect", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideAnimationEffect", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideAnimationEffectInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("putSlideAnimationEffect", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSlideAnimationEffect", "slideIndex");
	int32_t paramEffectIndex = utils->getIntTestValue("putSlideAnimationEffect", "effectIndex");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("putSlideAnimationEffect", "effect");
	utility::string_t paramPassword = utils->getTestValue("putSlideAnimationEffect", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlideAnimationEffect", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlideAnimationEffect", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("putSlideAnimationEffect", "slideIndex", paramSlideIndex).value();
	utils->initialize("putSlideAnimationEffect", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->updateAnimationEffect(paramName, paramSlideIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideAnimationEffect", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideAnimationEffect", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideAnimationEffect", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideAnimationEffect", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideAnimationEffect", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideAnimationEffectInvalidEffectIndex) {
	utility::string_t paramName = utils->getTestValue("putSlideAnimationEffect", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSlideAnimationEffect", "slideIndex");
	int32_t paramEffectIndex = utils->getIntTestValue("putSlideAnimationEffect", "effectIndex");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("putSlideAnimationEffect", "effect");
	utility::string_t paramPassword = utils->getTestValue("putSlideAnimationEffect", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlideAnimationEffect", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlideAnimationEffect", "storage");
	paramEffectIndex = utils->getInvalidIntTestValue("putSlideAnimationEffect", "effectIndex", paramEffectIndex).value();
	utils->initialize("putSlideAnimationEffect", "effectIndex", paramEffectIndex);

	bool failed = true;
	try
	{
		api->updateAnimationEffect(paramName, paramSlideIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideAnimationEffect", "effectIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideAnimationEffect", "effectIndex", paramEffectIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideAnimationEffect", "effectIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideAnimationEffect", "effectIndex", paramEffectIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideAnimationEffect", "effectIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideAnimationEffectInvalidEffect) {
	utility::string_t paramName = utils->getTestValue("putSlideAnimationEffect", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSlideAnimationEffect", "slideIndex");
	int32_t paramEffectIndex = utils->getIntTestValue("putSlideAnimationEffect", "effectIndex");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("putSlideAnimationEffect", "effect");
	utility::string_t paramPassword = utils->getTestValue("putSlideAnimationEffect", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlideAnimationEffect", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlideAnimationEffect", "storage");
	paramEffect = utils->getInvalidTestValueForClass<>("putSlideAnimationEffect", "effect", paramEffect);
	utils->initialize("putSlideAnimationEffect", "effect", paramEffect);

	bool failed = true;
	try
	{
		api->updateAnimationEffect(paramName, paramSlideIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideAnimationEffect", "effect");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideAnimationEffect", "effect", paramEffect);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideAnimationEffect", "effect");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideAnimationEffect", "effect", paramEffect);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideAnimationEffect", "effect"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideAnimationEffectInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("putSlideAnimationEffect", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSlideAnimationEffect", "slideIndex");
	int32_t paramEffectIndex = utils->getIntTestValue("putSlideAnimationEffect", "effectIndex");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("putSlideAnimationEffect", "effect");
	utility::string_t paramPassword = utils->getTestValue("putSlideAnimationEffect", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlideAnimationEffect", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlideAnimationEffect", "storage");
	paramPassword = utils->getInvalidTestValue("putSlideAnimationEffect", "password", paramPassword);
	utils->initialize("putSlideAnimationEffect", "password", paramPassword);

	bool failed = true;
	try
	{
		api->updateAnimationEffect(paramName, paramSlideIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideAnimationEffect", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideAnimationEffect", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideAnimationEffect", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideAnimationEffect", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideAnimationEffect", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideAnimationEffectInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("putSlideAnimationEffect", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSlideAnimationEffect", "slideIndex");
	int32_t paramEffectIndex = utils->getIntTestValue("putSlideAnimationEffect", "effectIndex");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("putSlideAnimationEffect", "effect");
	utility::string_t paramPassword = utils->getTestValue("putSlideAnimationEffect", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlideAnimationEffect", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlideAnimationEffect", "storage");
	paramFolder = utils->getInvalidTestValue("putSlideAnimationEffect", "folder", paramFolder);
	utils->initialize("putSlideAnimationEffect", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->updateAnimationEffect(paramName, paramSlideIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideAnimationEffect", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideAnimationEffect", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideAnimationEffect", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideAnimationEffect", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideAnimationEffect", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideAnimationEffectInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("putSlideAnimationEffect", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSlideAnimationEffect", "slideIndex");
	int32_t paramEffectIndex = utils->getIntTestValue("putSlideAnimationEffect", "effectIndex");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("putSlideAnimationEffect", "effect");
	utility::string_t paramPassword = utils->getTestValue("putSlideAnimationEffect", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlideAnimationEffect", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlideAnimationEffect", "storage");
	paramStorage = utils->getInvalidTestValue("putSlideAnimationEffect", "storage", paramStorage);
	utils->initialize("putSlideAnimationEffect", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->updateAnimationEffect(paramName, paramSlideIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideAnimationEffect", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideAnimationEffect", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideAnimationEffect", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideAnimationEffect", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideAnimationEffect", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideAnimationInteractiveSequenceEffect) {
	utility::string_t paramName = utils->getTestValue("putSlideAnimationInteractiveSequenceEffect", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSlideAnimationInteractiveSequenceEffect", "slideIndex");
	int32_t paramSequenceIndex = utils->getIntTestValue("putSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
	int32_t paramEffectIndex = utils->getIntTestValue("putSlideAnimationInteractiveSequenceEffect", "effectIndex");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("putSlideAnimationInteractiveSequenceEffect", "effect");
	utility::string_t paramPassword = utils->getTestValue("putSlideAnimationInteractiveSequenceEffect", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlideAnimationInteractiveSequenceEffect", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlideAnimationInteractiveSequenceEffect", "storage");
	utils->initialize("putSlideAnimationInteractiveSequenceEffect", "");
	std::shared_ptr<SlideAnimation> result = api->updateAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, putSlideAnimationInteractiveSequenceEffectInvalidName) {
	utility::string_t paramName = utils->getTestValue("putSlideAnimationInteractiveSequenceEffect", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSlideAnimationInteractiveSequenceEffect", "slideIndex");
	int32_t paramSequenceIndex = utils->getIntTestValue("putSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
	int32_t paramEffectIndex = utils->getIntTestValue("putSlideAnimationInteractiveSequenceEffect", "effectIndex");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("putSlideAnimationInteractiveSequenceEffect", "effect");
	utility::string_t paramPassword = utils->getTestValue("putSlideAnimationInteractiveSequenceEffect", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlideAnimationInteractiveSequenceEffect", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlideAnimationInteractiveSequenceEffect", "storage");
	paramName = utils->getInvalidTestValue("putSlideAnimationInteractiveSequenceEffect", "name", paramName);
	utils->initialize("putSlideAnimationInteractiveSequenceEffect", "name", paramName);

	bool failed = true;
	try
	{
		api->updateAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideAnimationInteractiveSequenceEffect", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideAnimationInteractiveSequenceEffect", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideAnimationInteractiveSequenceEffect", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideAnimationInteractiveSequenceEffect", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideAnimationInteractiveSequenceEffect", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideAnimationInteractiveSequenceEffectInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("putSlideAnimationInteractiveSequenceEffect", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSlideAnimationInteractiveSequenceEffect", "slideIndex");
	int32_t paramSequenceIndex = utils->getIntTestValue("putSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
	int32_t paramEffectIndex = utils->getIntTestValue("putSlideAnimationInteractiveSequenceEffect", "effectIndex");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("putSlideAnimationInteractiveSequenceEffect", "effect");
	utility::string_t paramPassword = utils->getTestValue("putSlideAnimationInteractiveSequenceEffect", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlideAnimationInteractiveSequenceEffect", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlideAnimationInteractiveSequenceEffect", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("putSlideAnimationInteractiveSequenceEffect", "slideIndex", paramSlideIndex).value();
	utils->initialize("putSlideAnimationInteractiveSequenceEffect", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->updateAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideAnimationInteractiveSequenceEffect", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideAnimationInteractiveSequenceEffect", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideAnimationInteractiveSequenceEffect", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideAnimationInteractiveSequenceEffect", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideAnimationInteractiveSequenceEffect", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideAnimationInteractiveSequenceEffectInvalidSequenceIndex) {
	utility::string_t paramName = utils->getTestValue("putSlideAnimationInteractiveSequenceEffect", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSlideAnimationInteractiveSequenceEffect", "slideIndex");
	int32_t paramSequenceIndex = utils->getIntTestValue("putSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
	int32_t paramEffectIndex = utils->getIntTestValue("putSlideAnimationInteractiveSequenceEffect", "effectIndex");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("putSlideAnimationInteractiveSequenceEffect", "effect");
	utility::string_t paramPassword = utils->getTestValue("putSlideAnimationInteractiveSequenceEffect", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlideAnimationInteractiveSequenceEffect", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlideAnimationInteractiveSequenceEffect", "storage");
	paramSequenceIndex = utils->getInvalidIntTestValue("putSlideAnimationInteractiveSequenceEffect", "sequenceIndex", paramSequenceIndex).value();
	utils->initialize("putSlideAnimationInteractiveSequenceEffect", "sequenceIndex", paramSequenceIndex);

	bool failed = true;
	try
	{
		api->updateAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideAnimationInteractiveSequenceEffect", "sequenceIndex", paramSequenceIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideAnimationInteractiveSequenceEffect", "sequenceIndex", paramSequenceIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideAnimationInteractiveSequenceEffect", "sequenceIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideAnimationInteractiveSequenceEffectInvalidEffectIndex) {
	utility::string_t paramName = utils->getTestValue("putSlideAnimationInteractiveSequenceEffect", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSlideAnimationInteractiveSequenceEffect", "slideIndex");
	int32_t paramSequenceIndex = utils->getIntTestValue("putSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
	int32_t paramEffectIndex = utils->getIntTestValue("putSlideAnimationInteractiveSequenceEffect", "effectIndex");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("putSlideAnimationInteractiveSequenceEffect", "effect");
	utility::string_t paramPassword = utils->getTestValue("putSlideAnimationInteractiveSequenceEffect", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlideAnimationInteractiveSequenceEffect", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlideAnimationInteractiveSequenceEffect", "storage");
	paramEffectIndex = utils->getInvalidIntTestValue("putSlideAnimationInteractiveSequenceEffect", "effectIndex", paramEffectIndex).value();
	utils->initialize("putSlideAnimationInteractiveSequenceEffect", "effectIndex", paramEffectIndex);

	bool failed = true;
	try
	{
		api->updateAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideAnimationInteractiveSequenceEffect", "effectIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideAnimationInteractiveSequenceEffect", "effectIndex", paramEffectIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideAnimationInteractiveSequenceEffect", "effectIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideAnimationInteractiveSequenceEffect", "effectIndex", paramEffectIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideAnimationInteractiveSequenceEffect", "effectIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideAnimationInteractiveSequenceEffectInvalidEffect) {
	utility::string_t paramName = utils->getTestValue("putSlideAnimationInteractiveSequenceEffect", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSlideAnimationInteractiveSequenceEffect", "slideIndex");
	int32_t paramSequenceIndex = utils->getIntTestValue("putSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
	int32_t paramEffectIndex = utils->getIntTestValue("putSlideAnimationInteractiveSequenceEffect", "effectIndex");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("putSlideAnimationInteractiveSequenceEffect", "effect");
	utility::string_t paramPassword = utils->getTestValue("putSlideAnimationInteractiveSequenceEffect", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlideAnimationInteractiveSequenceEffect", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlideAnimationInteractiveSequenceEffect", "storage");
	paramEffect = utils->getInvalidTestValueForClass<>("putSlideAnimationInteractiveSequenceEffect", "effect", paramEffect);
	utils->initialize("putSlideAnimationInteractiveSequenceEffect", "effect", paramEffect);

	bool failed = true;
	try
	{
		api->updateAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideAnimationInteractiveSequenceEffect", "effect");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideAnimationInteractiveSequenceEffect", "effect", paramEffect);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideAnimationInteractiveSequenceEffect", "effect");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideAnimationInteractiveSequenceEffect", "effect", paramEffect);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideAnimationInteractiveSequenceEffect", "effect"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideAnimationInteractiveSequenceEffectInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("putSlideAnimationInteractiveSequenceEffect", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSlideAnimationInteractiveSequenceEffect", "slideIndex");
	int32_t paramSequenceIndex = utils->getIntTestValue("putSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
	int32_t paramEffectIndex = utils->getIntTestValue("putSlideAnimationInteractiveSequenceEffect", "effectIndex");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("putSlideAnimationInteractiveSequenceEffect", "effect");
	utility::string_t paramPassword = utils->getTestValue("putSlideAnimationInteractiveSequenceEffect", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlideAnimationInteractiveSequenceEffect", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlideAnimationInteractiveSequenceEffect", "storage");
	paramPassword = utils->getInvalidTestValue("putSlideAnimationInteractiveSequenceEffect", "password", paramPassword);
	utils->initialize("putSlideAnimationInteractiveSequenceEffect", "password", paramPassword);

	bool failed = true;
	try
	{
		api->updateAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideAnimationInteractiveSequenceEffect", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideAnimationInteractiveSequenceEffect", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideAnimationInteractiveSequenceEffect", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideAnimationInteractiveSequenceEffect", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideAnimationInteractiveSequenceEffect", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideAnimationInteractiveSequenceEffectInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("putSlideAnimationInteractiveSequenceEffect", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSlideAnimationInteractiveSequenceEffect", "slideIndex");
	int32_t paramSequenceIndex = utils->getIntTestValue("putSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
	int32_t paramEffectIndex = utils->getIntTestValue("putSlideAnimationInteractiveSequenceEffect", "effectIndex");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("putSlideAnimationInteractiveSequenceEffect", "effect");
	utility::string_t paramPassword = utils->getTestValue("putSlideAnimationInteractiveSequenceEffect", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlideAnimationInteractiveSequenceEffect", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlideAnimationInteractiveSequenceEffect", "storage");
	paramFolder = utils->getInvalidTestValue("putSlideAnimationInteractiveSequenceEffect", "folder", paramFolder);
	utils->initialize("putSlideAnimationInteractiveSequenceEffect", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->updateAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideAnimationInteractiveSequenceEffect", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideAnimationInteractiveSequenceEffect", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideAnimationInteractiveSequenceEffect", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideAnimationInteractiveSequenceEffect", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideAnimationInteractiveSequenceEffect", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideAnimationInteractiveSequenceEffectInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("putSlideAnimationInteractiveSequenceEffect", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSlideAnimationInteractiveSequenceEffect", "slideIndex");
	int32_t paramSequenceIndex = utils->getIntTestValue("putSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
	int32_t paramEffectIndex = utils->getIntTestValue("putSlideAnimationInteractiveSequenceEffect", "effectIndex");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("putSlideAnimationInteractiveSequenceEffect", "effect");
	utility::string_t paramPassword = utils->getTestValue("putSlideAnimationInteractiveSequenceEffect", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlideAnimationInteractiveSequenceEffect", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlideAnimationInteractiveSequenceEffect", "storage");
	paramStorage = utils->getInvalidTestValue("putSlideAnimationInteractiveSequenceEffect", "storage", paramStorage);
	utils->initialize("putSlideAnimationInteractiveSequenceEffect", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->updateAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideAnimationInteractiveSequenceEffect", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideAnimationInteractiveSequenceEffect", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideAnimationInteractiveSequenceEffect", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideAnimationInteractiveSequenceEffect", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideAnimationInteractiveSequenceEffect", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideHeaderFooter) {
	utility::string_t paramName = utils->getTestValue("putSlideHeaderFooter", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSlideHeaderFooter", "slideIndex");
	std::shared_ptr<HeaderFooter> paramDto = utils->getTestValueForClass<HeaderFooter>("putSlideHeaderFooter", "dto");
	utility::string_t paramPassword = utils->getTestValue("putSlideHeaderFooter", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlideHeaderFooter", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlideHeaderFooter", "storage");
	utils->initialize("putSlideHeaderFooter", "");
	std::shared_ptr<HeaderFooter> result = api->setSlideHeaderFooter(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, putSlideHeaderFooterInvalidName) {
	utility::string_t paramName = utils->getTestValue("putSlideHeaderFooter", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSlideHeaderFooter", "slideIndex");
	std::shared_ptr<HeaderFooter> paramDto = utils->getTestValueForClass<HeaderFooter>("putSlideHeaderFooter", "dto");
	utility::string_t paramPassword = utils->getTestValue("putSlideHeaderFooter", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlideHeaderFooter", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlideHeaderFooter", "storage");
	paramName = utils->getInvalidTestValue("putSlideHeaderFooter", "name", paramName);
	utils->initialize("putSlideHeaderFooter", "name", paramName);

	bool failed = true;
	try
	{
		api->setSlideHeaderFooter(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideHeaderFooter", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideHeaderFooter", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideHeaderFooter", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideHeaderFooter", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideHeaderFooter", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideHeaderFooterInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("putSlideHeaderFooter", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSlideHeaderFooter", "slideIndex");
	std::shared_ptr<HeaderFooter> paramDto = utils->getTestValueForClass<HeaderFooter>("putSlideHeaderFooter", "dto");
	utility::string_t paramPassword = utils->getTestValue("putSlideHeaderFooter", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlideHeaderFooter", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlideHeaderFooter", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("putSlideHeaderFooter", "slideIndex", paramSlideIndex).value();
	utils->initialize("putSlideHeaderFooter", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->setSlideHeaderFooter(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideHeaderFooter", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideHeaderFooter", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideHeaderFooter", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideHeaderFooter", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideHeaderFooter", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideHeaderFooterInvalidDto) {
	utility::string_t paramName = utils->getTestValue("putSlideHeaderFooter", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSlideHeaderFooter", "slideIndex");
	std::shared_ptr<HeaderFooter> paramDto = utils->getTestValueForClass<HeaderFooter>("putSlideHeaderFooter", "dto");
	utility::string_t paramPassword = utils->getTestValue("putSlideHeaderFooter", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlideHeaderFooter", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlideHeaderFooter", "storage");
	paramDto = utils->getInvalidTestValueForClass<>("putSlideHeaderFooter", "dto", paramDto);
	utils->initialize("putSlideHeaderFooter", "dto", paramDto);

	bool failed = true;
	try
	{
		api->setSlideHeaderFooter(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideHeaderFooter", "dto");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideHeaderFooter", "dto", paramDto);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideHeaderFooter", "dto");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideHeaderFooter", "dto", paramDto);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideHeaderFooter", "dto"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideHeaderFooterInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("putSlideHeaderFooter", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSlideHeaderFooter", "slideIndex");
	std::shared_ptr<HeaderFooter> paramDto = utils->getTestValueForClass<HeaderFooter>("putSlideHeaderFooter", "dto");
	utility::string_t paramPassword = utils->getTestValue("putSlideHeaderFooter", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlideHeaderFooter", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlideHeaderFooter", "storage");
	paramPassword = utils->getInvalidTestValue("putSlideHeaderFooter", "password", paramPassword);
	utils->initialize("putSlideHeaderFooter", "password", paramPassword);

	bool failed = true;
	try
	{
		api->setSlideHeaderFooter(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideHeaderFooter", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideHeaderFooter", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideHeaderFooter", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideHeaderFooter", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideHeaderFooter", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideHeaderFooterInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("putSlideHeaderFooter", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSlideHeaderFooter", "slideIndex");
	std::shared_ptr<HeaderFooter> paramDto = utils->getTestValueForClass<HeaderFooter>("putSlideHeaderFooter", "dto");
	utility::string_t paramPassword = utils->getTestValue("putSlideHeaderFooter", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlideHeaderFooter", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlideHeaderFooter", "storage");
	paramFolder = utils->getInvalidTestValue("putSlideHeaderFooter", "folder", paramFolder);
	utils->initialize("putSlideHeaderFooter", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->setSlideHeaderFooter(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideHeaderFooter", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideHeaderFooter", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideHeaderFooter", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideHeaderFooter", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideHeaderFooter", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideHeaderFooterInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("putSlideHeaderFooter", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSlideHeaderFooter", "slideIndex");
	std::shared_ptr<HeaderFooter> paramDto = utils->getTestValueForClass<HeaderFooter>("putSlideHeaderFooter", "dto");
	utility::string_t paramPassword = utils->getTestValue("putSlideHeaderFooter", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlideHeaderFooter", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlideHeaderFooter", "storage");
	paramStorage = utils->getInvalidTestValue("putSlideHeaderFooter", "storage", paramStorage);
	utils->initialize("putSlideHeaderFooter", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->setSlideHeaderFooter(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideHeaderFooter", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideHeaderFooter", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideHeaderFooter", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideHeaderFooter", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideHeaderFooter", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideSaveAs) {
	utility::string_t paramName = utils->getTestValue("putSlideSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSlideSaveAs", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("putSlideSaveAs", "format");
	utility::string_t paramOutPath = utils->getTestValue("putSlideSaveAs", "outPath");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("putSlideSaveAs", "options");
	auto paramWidth = utils->getOptionalIntTestValue("putSlideSaveAs", "width");
	auto paramHeight = utils->getOptionalIntTestValue("putSlideSaveAs", "height");
	utility::string_t paramPassword = utils->getTestValue("putSlideSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlideSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlideSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("putSlideSaveAs", "fontsFolder");
	utils->initialize("putSlideSaveAs", "");
	api->saveSlide(paramName, paramSlideIndex, paramFormat, paramOutPath, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
}

TEST_F(SlidesApiTest, putSlideSaveAsInvalidName) {
	utility::string_t paramName = utils->getTestValue("putSlideSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSlideSaveAs", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("putSlideSaveAs", "format");
	utility::string_t paramOutPath = utils->getTestValue("putSlideSaveAs", "outPath");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("putSlideSaveAs", "options");
	auto paramWidth = utils->getOptionalIntTestValue("putSlideSaveAs", "width");
	auto paramHeight = utils->getOptionalIntTestValue("putSlideSaveAs", "height");
	utility::string_t paramPassword = utils->getTestValue("putSlideSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlideSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlideSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("putSlideSaveAs", "fontsFolder");
	paramName = utils->getInvalidTestValue("putSlideSaveAs", "name", paramName);
	utils->initialize("putSlideSaveAs", "name", paramName);

	bool failed = true;
	try
	{
		api->saveSlide(paramName, paramSlideIndex, paramFormat, paramOutPath, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideSaveAs", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideSaveAs", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideSaveAs", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideSaveAs", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideSaveAs", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideSaveAsInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("putSlideSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSlideSaveAs", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("putSlideSaveAs", "format");
	utility::string_t paramOutPath = utils->getTestValue("putSlideSaveAs", "outPath");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("putSlideSaveAs", "options");
	auto paramWidth = utils->getOptionalIntTestValue("putSlideSaveAs", "width");
	auto paramHeight = utils->getOptionalIntTestValue("putSlideSaveAs", "height");
	utility::string_t paramPassword = utils->getTestValue("putSlideSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlideSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlideSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("putSlideSaveAs", "fontsFolder");
	paramSlideIndex = utils->getInvalidIntTestValue("putSlideSaveAs", "slideIndex", paramSlideIndex).value();
	utils->initialize("putSlideSaveAs", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->saveSlide(paramName, paramSlideIndex, paramFormat, paramOutPath, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideSaveAs", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideSaveAs", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideSaveAs", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideSaveAs", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideSaveAs", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideSaveAsInvalidFormat) {
	utility::string_t paramName = utils->getTestValue("putSlideSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSlideSaveAs", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("putSlideSaveAs", "format");
	utility::string_t paramOutPath = utils->getTestValue("putSlideSaveAs", "outPath");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("putSlideSaveAs", "options");
	auto paramWidth = utils->getOptionalIntTestValue("putSlideSaveAs", "width");
	auto paramHeight = utils->getOptionalIntTestValue("putSlideSaveAs", "height");
	utility::string_t paramPassword = utils->getTestValue("putSlideSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlideSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlideSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("putSlideSaveAs", "fontsFolder");
	paramFormat = utils->getInvalidTestValue("putSlideSaveAs", "format", paramFormat);
	utils->initialize("putSlideSaveAs", "format", paramFormat);

	bool failed = true;
	try
	{
		api->saveSlide(paramName, paramSlideIndex, paramFormat, paramOutPath, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideSaveAs", "format");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideSaveAs", "format", paramFormat);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideSaveAs", "format");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideSaveAs", "format", paramFormat);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideSaveAs", "format"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideSaveAsInvalidOutPath) {
	utility::string_t paramName = utils->getTestValue("putSlideSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSlideSaveAs", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("putSlideSaveAs", "format");
	utility::string_t paramOutPath = utils->getTestValue("putSlideSaveAs", "outPath");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("putSlideSaveAs", "options");
	auto paramWidth = utils->getOptionalIntTestValue("putSlideSaveAs", "width");
	auto paramHeight = utils->getOptionalIntTestValue("putSlideSaveAs", "height");
	utility::string_t paramPassword = utils->getTestValue("putSlideSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlideSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlideSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("putSlideSaveAs", "fontsFolder");
	paramOutPath = utils->getInvalidTestValue("putSlideSaveAs", "outPath", paramOutPath);
	utils->initialize("putSlideSaveAs", "outPath", paramOutPath);

	bool failed = true;
	try
	{
		api->saveSlide(paramName, paramSlideIndex, paramFormat, paramOutPath, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideSaveAs", "outPath");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideSaveAs", "outPath", paramOutPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideSaveAs", "outPath");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideSaveAs", "outPath", paramOutPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideSaveAs", "outPath"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideSaveAsInvalidOptions) {
	utility::string_t paramName = utils->getTestValue("putSlideSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSlideSaveAs", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("putSlideSaveAs", "format");
	utility::string_t paramOutPath = utils->getTestValue("putSlideSaveAs", "outPath");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("putSlideSaveAs", "options");
	auto paramWidth = utils->getOptionalIntTestValue("putSlideSaveAs", "width");
	auto paramHeight = utils->getOptionalIntTestValue("putSlideSaveAs", "height");
	utility::string_t paramPassword = utils->getTestValue("putSlideSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlideSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlideSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("putSlideSaveAs", "fontsFolder");
	paramOptions = utils->getInvalidTestValueForClass<>("putSlideSaveAs", "options", paramOptions);
	utils->initialize("putSlideSaveAs", "options", paramOptions);

	bool failed = true;
	try
	{
		api->saveSlide(paramName, paramSlideIndex, paramFormat, paramOutPath, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideSaveAs", "options");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideSaveAs", "options", paramOptions);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideSaveAs", "options");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideSaveAs", "options", paramOptions);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideSaveAs", "options"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideSaveAsInvalidWidth) {
	utility::string_t paramName = utils->getTestValue("putSlideSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSlideSaveAs", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("putSlideSaveAs", "format");
	utility::string_t paramOutPath = utils->getTestValue("putSlideSaveAs", "outPath");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("putSlideSaveAs", "options");
	auto paramWidth = utils->getOptionalIntTestValue("putSlideSaveAs", "width");
	auto paramHeight = utils->getOptionalIntTestValue("putSlideSaveAs", "height");
	utility::string_t paramPassword = utils->getTestValue("putSlideSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlideSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlideSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("putSlideSaveAs", "fontsFolder");
	paramWidth = utils->getInvalidIntTestValue("putSlideSaveAs", "width", paramWidth).value();
	utils->initialize("putSlideSaveAs", "width", paramWidth);

	bool failed = true;
	try
	{
		api->saveSlide(paramName, paramSlideIndex, paramFormat, paramOutPath, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideSaveAs", "width");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideSaveAs", "width", paramWidth);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideSaveAs", "width");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideSaveAs", "width", paramWidth);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideSaveAs", "width"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideSaveAsInvalidHeight) {
	utility::string_t paramName = utils->getTestValue("putSlideSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSlideSaveAs", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("putSlideSaveAs", "format");
	utility::string_t paramOutPath = utils->getTestValue("putSlideSaveAs", "outPath");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("putSlideSaveAs", "options");
	auto paramWidth = utils->getOptionalIntTestValue("putSlideSaveAs", "width");
	auto paramHeight = utils->getOptionalIntTestValue("putSlideSaveAs", "height");
	utility::string_t paramPassword = utils->getTestValue("putSlideSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlideSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlideSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("putSlideSaveAs", "fontsFolder");
	paramHeight = utils->getInvalidIntTestValue("putSlideSaveAs", "height", paramHeight).value();
	utils->initialize("putSlideSaveAs", "height", paramHeight);

	bool failed = true;
	try
	{
		api->saveSlide(paramName, paramSlideIndex, paramFormat, paramOutPath, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideSaveAs", "height");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideSaveAs", "height", paramHeight);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideSaveAs", "height");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideSaveAs", "height", paramHeight);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideSaveAs", "height"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideSaveAsInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("putSlideSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSlideSaveAs", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("putSlideSaveAs", "format");
	utility::string_t paramOutPath = utils->getTestValue("putSlideSaveAs", "outPath");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("putSlideSaveAs", "options");
	auto paramWidth = utils->getOptionalIntTestValue("putSlideSaveAs", "width");
	auto paramHeight = utils->getOptionalIntTestValue("putSlideSaveAs", "height");
	utility::string_t paramPassword = utils->getTestValue("putSlideSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlideSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlideSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("putSlideSaveAs", "fontsFolder");
	paramPassword = utils->getInvalidTestValue("putSlideSaveAs", "password", paramPassword);
	utils->initialize("putSlideSaveAs", "password", paramPassword);

	bool failed = true;
	try
	{
		api->saveSlide(paramName, paramSlideIndex, paramFormat, paramOutPath, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideSaveAs", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideSaveAs", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideSaveAs", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideSaveAs", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideSaveAs", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideSaveAsInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("putSlideSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSlideSaveAs", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("putSlideSaveAs", "format");
	utility::string_t paramOutPath = utils->getTestValue("putSlideSaveAs", "outPath");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("putSlideSaveAs", "options");
	auto paramWidth = utils->getOptionalIntTestValue("putSlideSaveAs", "width");
	auto paramHeight = utils->getOptionalIntTestValue("putSlideSaveAs", "height");
	utility::string_t paramPassword = utils->getTestValue("putSlideSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlideSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlideSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("putSlideSaveAs", "fontsFolder");
	paramFolder = utils->getInvalidTestValue("putSlideSaveAs", "folder", paramFolder);
	utils->initialize("putSlideSaveAs", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->saveSlide(paramName, paramSlideIndex, paramFormat, paramOutPath, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideSaveAs", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideSaveAs", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideSaveAs", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideSaveAs", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideSaveAs", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideSaveAsInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("putSlideSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSlideSaveAs", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("putSlideSaveAs", "format");
	utility::string_t paramOutPath = utils->getTestValue("putSlideSaveAs", "outPath");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("putSlideSaveAs", "options");
	auto paramWidth = utils->getOptionalIntTestValue("putSlideSaveAs", "width");
	auto paramHeight = utils->getOptionalIntTestValue("putSlideSaveAs", "height");
	utility::string_t paramPassword = utils->getTestValue("putSlideSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlideSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlideSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("putSlideSaveAs", "fontsFolder");
	paramStorage = utils->getInvalidTestValue("putSlideSaveAs", "storage", paramStorage);
	utils->initialize("putSlideSaveAs", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->saveSlide(paramName, paramSlideIndex, paramFormat, paramOutPath, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideSaveAs", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideSaveAs", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideSaveAs", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideSaveAs", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideSaveAs", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideSaveAsInvalidFontsFolder) {
	utility::string_t paramName = utils->getTestValue("putSlideSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSlideSaveAs", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("putSlideSaveAs", "format");
	utility::string_t paramOutPath = utils->getTestValue("putSlideSaveAs", "outPath");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("putSlideSaveAs", "options");
	auto paramWidth = utils->getOptionalIntTestValue("putSlideSaveAs", "width");
	auto paramHeight = utils->getOptionalIntTestValue("putSlideSaveAs", "height");
	utility::string_t paramPassword = utils->getTestValue("putSlideSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlideSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlideSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("putSlideSaveAs", "fontsFolder");
	paramFontsFolder = utils->getInvalidTestValue("putSlideSaveAs", "fontsFolder", paramFontsFolder);
	utils->initialize("putSlideSaveAs", "fontsFolder", paramFontsFolder);

	bool failed = true;
	try
	{
		api->saveSlide(paramName, paramSlideIndex, paramFormat, paramOutPath, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideSaveAs", "fontsFolder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideSaveAs", "fontsFolder", paramFontsFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideSaveAs", "fontsFolder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideSaveAs", "fontsFolder", paramFontsFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideSaveAs", "fontsFolder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideShapeInfo) {
	utility::string_t paramName = utils->getTestValue("putSlideShapeInfo", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSlideShapeInfo", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putSlideShapeInfo", "shapeIndex");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("putSlideShapeInfo", "dto");
	utility::string_t paramPassword = utils->getTestValue("putSlideShapeInfo", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlideShapeInfo", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlideShapeInfo", "storage");
	utils->initialize("putSlideShapeInfo", "");
	std::shared_ptr<ShapeBase> result = api->updateShape(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, putSlideShapeInfoInvalidName) {
	utility::string_t paramName = utils->getTestValue("putSlideShapeInfo", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSlideShapeInfo", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putSlideShapeInfo", "shapeIndex");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("putSlideShapeInfo", "dto");
	utility::string_t paramPassword = utils->getTestValue("putSlideShapeInfo", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlideShapeInfo", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlideShapeInfo", "storage");
	paramName = utils->getInvalidTestValue("putSlideShapeInfo", "name", paramName);
	utils->initialize("putSlideShapeInfo", "name", paramName);

	bool failed = true;
	try
	{
		api->updateShape(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideShapeInfo", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideShapeInfo", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideShapeInfo", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideShapeInfo", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideShapeInfo", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideShapeInfoInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("putSlideShapeInfo", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSlideShapeInfo", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putSlideShapeInfo", "shapeIndex");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("putSlideShapeInfo", "dto");
	utility::string_t paramPassword = utils->getTestValue("putSlideShapeInfo", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlideShapeInfo", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlideShapeInfo", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("putSlideShapeInfo", "slideIndex", paramSlideIndex).value();
	utils->initialize("putSlideShapeInfo", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->updateShape(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideShapeInfo", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideShapeInfo", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideShapeInfo", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideShapeInfo", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideShapeInfo", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideShapeInfoInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("putSlideShapeInfo", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSlideShapeInfo", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putSlideShapeInfo", "shapeIndex");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("putSlideShapeInfo", "dto");
	utility::string_t paramPassword = utils->getTestValue("putSlideShapeInfo", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlideShapeInfo", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlideShapeInfo", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("putSlideShapeInfo", "shapeIndex", paramShapeIndex).value();
	utils->initialize("putSlideShapeInfo", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->updateShape(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideShapeInfo", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideShapeInfo", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideShapeInfo", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideShapeInfo", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideShapeInfo", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideShapeInfoInvalidDto) {
	utility::string_t paramName = utils->getTestValue("putSlideShapeInfo", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSlideShapeInfo", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putSlideShapeInfo", "shapeIndex");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("putSlideShapeInfo", "dto");
	utility::string_t paramPassword = utils->getTestValue("putSlideShapeInfo", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlideShapeInfo", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlideShapeInfo", "storage");
	paramDto = utils->getInvalidTestValueForClass<>("putSlideShapeInfo", "dto", paramDto);
	utils->initialize("putSlideShapeInfo", "dto", paramDto);

	bool failed = true;
	try
	{
		api->updateShape(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideShapeInfo", "dto");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideShapeInfo", "dto", paramDto);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideShapeInfo", "dto");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideShapeInfo", "dto", paramDto);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideShapeInfo", "dto"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideShapeInfoInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("putSlideShapeInfo", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSlideShapeInfo", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putSlideShapeInfo", "shapeIndex");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("putSlideShapeInfo", "dto");
	utility::string_t paramPassword = utils->getTestValue("putSlideShapeInfo", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlideShapeInfo", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlideShapeInfo", "storage");
	paramPassword = utils->getInvalidTestValue("putSlideShapeInfo", "password", paramPassword);
	utils->initialize("putSlideShapeInfo", "password", paramPassword);

	bool failed = true;
	try
	{
		api->updateShape(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideShapeInfo", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideShapeInfo", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideShapeInfo", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideShapeInfo", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideShapeInfo", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideShapeInfoInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("putSlideShapeInfo", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSlideShapeInfo", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putSlideShapeInfo", "shapeIndex");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("putSlideShapeInfo", "dto");
	utility::string_t paramPassword = utils->getTestValue("putSlideShapeInfo", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlideShapeInfo", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlideShapeInfo", "storage");
	paramFolder = utils->getInvalidTestValue("putSlideShapeInfo", "folder", paramFolder);
	utils->initialize("putSlideShapeInfo", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->updateShape(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideShapeInfo", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideShapeInfo", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideShapeInfo", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideShapeInfo", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideShapeInfo", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideShapeInfoInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("putSlideShapeInfo", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSlideShapeInfo", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putSlideShapeInfo", "shapeIndex");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("putSlideShapeInfo", "dto");
	utility::string_t paramPassword = utils->getTestValue("putSlideShapeInfo", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlideShapeInfo", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlideShapeInfo", "storage");
	paramStorage = utils->getInvalidTestValue("putSlideShapeInfo", "storage", paramStorage);
	utils->initialize("putSlideShapeInfo", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->updateShape(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideShapeInfo", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideShapeInfo", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideShapeInfo", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideShapeInfo", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideShapeInfo", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideSubshapeInfo) {
	utility::string_t paramName = utils->getTestValue("putSlideSubshapeInfo", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSlideSubshapeInfo", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("putSlideSubshapeInfo", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("putSlideSubshapeInfo", "shapeIndex");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("putSlideSubshapeInfo", "dto");
	utility::string_t paramPassword = utils->getTestValue("putSlideSubshapeInfo", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlideSubshapeInfo", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlideSubshapeInfo", "storage");
	utils->initialize("putSlideSubshapeInfo", "");
	std::shared_ptr<ShapeBase> result = api->updateSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, putSlideSubshapeInfoInvalidName) {
	utility::string_t paramName = utils->getTestValue("putSlideSubshapeInfo", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSlideSubshapeInfo", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("putSlideSubshapeInfo", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("putSlideSubshapeInfo", "shapeIndex");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("putSlideSubshapeInfo", "dto");
	utility::string_t paramPassword = utils->getTestValue("putSlideSubshapeInfo", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlideSubshapeInfo", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlideSubshapeInfo", "storage");
	paramName = utils->getInvalidTestValue("putSlideSubshapeInfo", "name", paramName);
	utils->initialize("putSlideSubshapeInfo", "name", paramName);

	bool failed = true;
	try
	{
		api->updateSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideSubshapeInfo", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideSubshapeInfo", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideSubshapeInfo", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideSubshapeInfo", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideSubshapeInfo", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideSubshapeInfoInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("putSlideSubshapeInfo", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSlideSubshapeInfo", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("putSlideSubshapeInfo", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("putSlideSubshapeInfo", "shapeIndex");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("putSlideSubshapeInfo", "dto");
	utility::string_t paramPassword = utils->getTestValue("putSlideSubshapeInfo", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlideSubshapeInfo", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlideSubshapeInfo", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("putSlideSubshapeInfo", "slideIndex", paramSlideIndex).value();
	utils->initialize("putSlideSubshapeInfo", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->updateSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideSubshapeInfo", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideSubshapeInfo", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideSubshapeInfo", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideSubshapeInfo", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideSubshapeInfo", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideSubshapeInfoInvalidPath) {
	utility::string_t paramName = utils->getTestValue("putSlideSubshapeInfo", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSlideSubshapeInfo", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("putSlideSubshapeInfo", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("putSlideSubshapeInfo", "shapeIndex");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("putSlideSubshapeInfo", "dto");
	utility::string_t paramPassword = utils->getTestValue("putSlideSubshapeInfo", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlideSubshapeInfo", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlideSubshapeInfo", "storage");
	paramPath = utils->getInvalidTestValue("putSlideSubshapeInfo", "path", paramPath);
	utils->initialize("putSlideSubshapeInfo", "path", paramPath);

	bool failed = true;
	try
	{
		api->updateSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideSubshapeInfo", "path");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideSubshapeInfo", "path", paramPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideSubshapeInfo", "path");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideSubshapeInfo", "path", paramPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideSubshapeInfo", "path"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideSubshapeInfoInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("putSlideSubshapeInfo", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSlideSubshapeInfo", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("putSlideSubshapeInfo", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("putSlideSubshapeInfo", "shapeIndex");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("putSlideSubshapeInfo", "dto");
	utility::string_t paramPassword = utils->getTestValue("putSlideSubshapeInfo", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlideSubshapeInfo", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlideSubshapeInfo", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("putSlideSubshapeInfo", "shapeIndex", paramShapeIndex).value();
	utils->initialize("putSlideSubshapeInfo", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->updateSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideSubshapeInfo", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideSubshapeInfo", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideSubshapeInfo", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideSubshapeInfo", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideSubshapeInfo", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideSubshapeInfoInvalidDto) {
	utility::string_t paramName = utils->getTestValue("putSlideSubshapeInfo", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSlideSubshapeInfo", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("putSlideSubshapeInfo", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("putSlideSubshapeInfo", "shapeIndex");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("putSlideSubshapeInfo", "dto");
	utility::string_t paramPassword = utils->getTestValue("putSlideSubshapeInfo", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlideSubshapeInfo", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlideSubshapeInfo", "storage");
	paramDto = utils->getInvalidTestValueForClass<>("putSlideSubshapeInfo", "dto", paramDto);
	utils->initialize("putSlideSubshapeInfo", "dto", paramDto);

	bool failed = true;
	try
	{
		api->updateSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideSubshapeInfo", "dto");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideSubshapeInfo", "dto", paramDto);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideSubshapeInfo", "dto");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideSubshapeInfo", "dto", paramDto);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideSubshapeInfo", "dto"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideSubshapeInfoInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("putSlideSubshapeInfo", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSlideSubshapeInfo", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("putSlideSubshapeInfo", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("putSlideSubshapeInfo", "shapeIndex");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("putSlideSubshapeInfo", "dto");
	utility::string_t paramPassword = utils->getTestValue("putSlideSubshapeInfo", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlideSubshapeInfo", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlideSubshapeInfo", "storage");
	paramPassword = utils->getInvalidTestValue("putSlideSubshapeInfo", "password", paramPassword);
	utils->initialize("putSlideSubshapeInfo", "password", paramPassword);

	bool failed = true;
	try
	{
		api->updateSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideSubshapeInfo", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideSubshapeInfo", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideSubshapeInfo", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideSubshapeInfo", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideSubshapeInfo", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideSubshapeInfoInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("putSlideSubshapeInfo", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSlideSubshapeInfo", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("putSlideSubshapeInfo", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("putSlideSubshapeInfo", "shapeIndex");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("putSlideSubshapeInfo", "dto");
	utility::string_t paramPassword = utils->getTestValue("putSlideSubshapeInfo", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlideSubshapeInfo", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlideSubshapeInfo", "storage");
	paramFolder = utils->getInvalidTestValue("putSlideSubshapeInfo", "folder", paramFolder);
	utils->initialize("putSlideSubshapeInfo", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->updateSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideSubshapeInfo", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideSubshapeInfo", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideSubshapeInfo", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideSubshapeInfo", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideSubshapeInfo", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideSubshapeInfoInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("putSlideSubshapeInfo", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSlideSubshapeInfo", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("putSlideSubshapeInfo", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("putSlideSubshapeInfo", "shapeIndex");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("putSlideSubshapeInfo", "dto");
	utility::string_t paramPassword = utils->getTestValue("putSlideSubshapeInfo", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlideSubshapeInfo", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlideSubshapeInfo", "storage");
	paramStorage = utils->getInvalidTestValue("putSlideSubshapeInfo", "storage", paramStorage);
	utils->initialize("putSlideSubshapeInfo", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->updateSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideSubshapeInfo", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideSubshapeInfo", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideSubshapeInfo", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideSubshapeInfo", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideSubshapeInfo", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesConvert) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("putSlidesConvert", "document");
	utility::string_t paramFormat = utils->getTestValue("putSlidesConvert", "format");
	utility::string_t paramOutPath = utils->getTestValue("putSlidesConvert", "outPath");
	utility::string_t paramPassword = utils->getTestValue("putSlidesConvert", "password");
	utility::string_t paramStorage = utils->getTestValue("putSlidesConvert", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("putSlidesConvert", "fontsFolder");
	utils->initialize("putSlidesConvert", "");
	api->convertAndSave(paramDocument, paramFormat, paramOutPath, paramPassword, paramStorage, paramFontsFolder).wait();
}

TEST_F(SlidesApiTest, putSlidesConvertInvalidDocument) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("putSlidesConvert", "document");
	utility::string_t paramFormat = utils->getTestValue("putSlidesConvert", "format");
	utility::string_t paramOutPath = utils->getTestValue("putSlidesConvert", "outPath");
	utility::string_t paramPassword = utils->getTestValue("putSlidesConvert", "password");
	utility::string_t paramStorage = utils->getTestValue("putSlidesConvert", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("putSlidesConvert", "fontsFolder");
	paramDocument = utils->getInvalidBinaryTestValue("putSlidesConvert", "document", paramDocument);
	utils->initialize("putSlidesConvert", "document", paramDocument);

	bool failed = true;
	try
	{
		api->convertAndSave(paramDocument, paramFormat, paramOutPath, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesConvert", "document");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesConvert", "document", paramDocument);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesConvert", "document");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesConvert", "document", paramDocument);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesConvert", "document"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesConvertInvalidFormat) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("putSlidesConvert", "document");
	utility::string_t paramFormat = utils->getTestValue("putSlidesConvert", "format");
	utility::string_t paramOutPath = utils->getTestValue("putSlidesConvert", "outPath");
	utility::string_t paramPassword = utils->getTestValue("putSlidesConvert", "password");
	utility::string_t paramStorage = utils->getTestValue("putSlidesConvert", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("putSlidesConvert", "fontsFolder");
	paramFormat = utils->getInvalidTestValue("putSlidesConvert", "format", paramFormat);
	utils->initialize("putSlidesConvert", "format", paramFormat);

	bool failed = true;
	try
	{
		api->convertAndSave(paramDocument, paramFormat, paramOutPath, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesConvert", "format");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesConvert", "format", paramFormat);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesConvert", "format");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesConvert", "format", paramFormat);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesConvert", "format"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesConvertInvalidOutPath) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("putSlidesConvert", "document");
	utility::string_t paramFormat = utils->getTestValue("putSlidesConvert", "format");
	utility::string_t paramOutPath = utils->getTestValue("putSlidesConvert", "outPath");
	utility::string_t paramPassword = utils->getTestValue("putSlidesConvert", "password");
	utility::string_t paramStorage = utils->getTestValue("putSlidesConvert", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("putSlidesConvert", "fontsFolder");
	paramOutPath = utils->getInvalidTestValue("putSlidesConvert", "outPath", paramOutPath);
	utils->initialize("putSlidesConvert", "outPath", paramOutPath);

	bool failed = true;
	try
	{
		api->convertAndSave(paramDocument, paramFormat, paramOutPath, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesConvert", "outPath");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesConvert", "outPath", paramOutPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesConvert", "outPath");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesConvert", "outPath", paramOutPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesConvert", "outPath"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesConvertInvalidPassword) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("putSlidesConvert", "document");
	utility::string_t paramFormat = utils->getTestValue("putSlidesConvert", "format");
	utility::string_t paramOutPath = utils->getTestValue("putSlidesConvert", "outPath");
	utility::string_t paramPassword = utils->getTestValue("putSlidesConvert", "password");
	utility::string_t paramStorage = utils->getTestValue("putSlidesConvert", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("putSlidesConvert", "fontsFolder");
	paramPassword = utils->getInvalidTestValue("putSlidesConvert", "password", paramPassword);
	utils->initialize("putSlidesConvert", "password", paramPassword);

	bool failed = true;
	try
	{
		api->convertAndSave(paramDocument, paramFormat, paramOutPath, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesConvert", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesConvert", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesConvert", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesConvert", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesConvert", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesConvertInvalidStorage) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("putSlidesConvert", "document");
	utility::string_t paramFormat = utils->getTestValue("putSlidesConvert", "format");
	utility::string_t paramOutPath = utils->getTestValue("putSlidesConvert", "outPath");
	utility::string_t paramPassword = utils->getTestValue("putSlidesConvert", "password");
	utility::string_t paramStorage = utils->getTestValue("putSlidesConvert", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("putSlidesConvert", "fontsFolder");
	paramStorage = utils->getInvalidTestValue("putSlidesConvert", "storage", paramStorage);
	utils->initialize("putSlidesConvert", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->convertAndSave(paramDocument, paramFormat, paramOutPath, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesConvert", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesConvert", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesConvert", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesConvert", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesConvert", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesConvertInvalidFontsFolder) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("putSlidesConvert", "document");
	utility::string_t paramFormat = utils->getTestValue("putSlidesConvert", "format");
	utility::string_t paramOutPath = utils->getTestValue("putSlidesConvert", "outPath");
	utility::string_t paramPassword = utils->getTestValue("putSlidesConvert", "password");
	utility::string_t paramStorage = utils->getTestValue("putSlidesConvert", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("putSlidesConvert", "fontsFolder");
	paramFontsFolder = utils->getInvalidTestValue("putSlidesConvert", "fontsFolder", paramFontsFolder);
	utils->initialize("putSlidesConvert", "fontsFolder", paramFontsFolder);

	bool failed = true;
	try
	{
		api->convertAndSave(paramDocument, paramFormat, paramOutPath, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesConvert", "fontsFolder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesConvert", "fontsFolder", paramFontsFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesConvert", "fontsFolder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesConvert", "fontsFolder", paramFontsFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesConvert", "fontsFolder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesDocumentFromHtml) {
	utility::string_t paramName = utils->getTestValue("putSlidesDocumentFromHtml", "name");
	utility::string_t paramHtml = utils->getTestValue("putSlidesDocumentFromHtml", "html");
	utility::string_t paramPassword = utils->getTestValue("putSlidesDocumentFromHtml", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlidesDocumentFromHtml", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlidesDocumentFromHtml", "storage");
	utils->initialize("putSlidesDocumentFromHtml", "");
	std::shared_ptr<Document> result = api->putSlidesDocumentFromHtml(paramName, paramHtml, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, putSlidesDocumentFromHtmlInvalidName) {
	utility::string_t paramName = utils->getTestValue("putSlidesDocumentFromHtml", "name");
	utility::string_t paramHtml = utils->getTestValue("putSlidesDocumentFromHtml", "html");
	utility::string_t paramPassword = utils->getTestValue("putSlidesDocumentFromHtml", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlidesDocumentFromHtml", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlidesDocumentFromHtml", "storage");
	paramName = utils->getInvalidTestValue("putSlidesDocumentFromHtml", "name", paramName);
	utils->initialize("putSlidesDocumentFromHtml", "name", paramName);

	bool failed = true;
	try
	{
		api->putSlidesDocumentFromHtml(paramName, paramHtml, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesDocumentFromHtml", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesDocumentFromHtml", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesDocumentFromHtml", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesDocumentFromHtml", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesDocumentFromHtml", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesDocumentFromHtmlInvalidHtml) {
	utility::string_t paramName = utils->getTestValue("putSlidesDocumentFromHtml", "name");
	utility::string_t paramHtml = utils->getTestValue("putSlidesDocumentFromHtml", "html");
	utility::string_t paramPassword = utils->getTestValue("putSlidesDocumentFromHtml", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlidesDocumentFromHtml", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlidesDocumentFromHtml", "storage");
	paramHtml = utils->getInvalidTestValue("putSlidesDocumentFromHtml", "html", paramHtml);
	utils->initialize("putSlidesDocumentFromHtml", "html", paramHtml);

	bool failed = true;
	try
	{
		api->putSlidesDocumentFromHtml(paramName, paramHtml, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesDocumentFromHtml", "html");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesDocumentFromHtml", "html", paramHtml);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesDocumentFromHtml", "html");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesDocumentFromHtml", "html", paramHtml);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesDocumentFromHtml", "html"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesDocumentFromHtmlInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("putSlidesDocumentFromHtml", "name");
	utility::string_t paramHtml = utils->getTestValue("putSlidesDocumentFromHtml", "html");
	utility::string_t paramPassword = utils->getTestValue("putSlidesDocumentFromHtml", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlidesDocumentFromHtml", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlidesDocumentFromHtml", "storage");
	paramPassword = utils->getInvalidTestValue("putSlidesDocumentFromHtml", "password", paramPassword);
	utils->initialize("putSlidesDocumentFromHtml", "password", paramPassword);

	bool failed = true;
	try
	{
		api->putSlidesDocumentFromHtml(paramName, paramHtml, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesDocumentFromHtml", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesDocumentFromHtml", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesDocumentFromHtml", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesDocumentFromHtml", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesDocumentFromHtml", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesDocumentFromHtmlInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("putSlidesDocumentFromHtml", "name");
	utility::string_t paramHtml = utils->getTestValue("putSlidesDocumentFromHtml", "html");
	utility::string_t paramPassword = utils->getTestValue("putSlidesDocumentFromHtml", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlidesDocumentFromHtml", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlidesDocumentFromHtml", "storage");
	paramFolder = utils->getInvalidTestValue("putSlidesDocumentFromHtml", "folder", paramFolder);
	utils->initialize("putSlidesDocumentFromHtml", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->putSlidesDocumentFromHtml(paramName, paramHtml, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesDocumentFromHtml", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesDocumentFromHtml", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesDocumentFromHtml", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesDocumentFromHtml", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesDocumentFromHtml", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesDocumentFromHtmlInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("putSlidesDocumentFromHtml", "name");
	utility::string_t paramHtml = utils->getTestValue("putSlidesDocumentFromHtml", "html");
	utility::string_t paramPassword = utils->getTestValue("putSlidesDocumentFromHtml", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlidesDocumentFromHtml", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlidesDocumentFromHtml", "storage");
	paramStorage = utils->getInvalidTestValue("putSlidesDocumentFromHtml", "storage", paramStorage);
	utils->initialize("putSlidesDocumentFromHtml", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->putSlidesDocumentFromHtml(paramName, paramHtml, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesDocumentFromHtml", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesDocumentFromHtml", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesDocumentFromHtml", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesDocumentFromHtml", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesDocumentFromHtml", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesHeaderFooter) {
	utility::string_t paramName = utils->getTestValue("putSlidesHeaderFooter", "name");
	std::shared_ptr<HeaderFooter> paramDto = utils->getTestValueForClass<HeaderFooter>("putSlidesHeaderFooter", "dto");
	utility::string_t paramPassword = utils->getTestValue("putSlidesHeaderFooter", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlidesHeaderFooter", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlidesHeaderFooter", "storage");
	utils->initialize("putSlidesHeaderFooter", "");
	std::shared_ptr<Document> result = api->setPresentationHeaderFooter(paramName, paramDto, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, putSlidesHeaderFooterInvalidName) {
	utility::string_t paramName = utils->getTestValue("putSlidesHeaderFooter", "name");
	std::shared_ptr<HeaderFooter> paramDto = utils->getTestValueForClass<HeaderFooter>("putSlidesHeaderFooter", "dto");
	utility::string_t paramPassword = utils->getTestValue("putSlidesHeaderFooter", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlidesHeaderFooter", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlidesHeaderFooter", "storage");
	paramName = utils->getInvalidTestValue("putSlidesHeaderFooter", "name", paramName);
	utils->initialize("putSlidesHeaderFooter", "name", paramName);

	bool failed = true;
	try
	{
		api->setPresentationHeaderFooter(paramName, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesHeaderFooter", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesHeaderFooter", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesHeaderFooter", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesHeaderFooter", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesHeaderFooter", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesHeaderFooterInvalidDto) {
	utility::string_t paramName = utils->getTestValue("putSlidesHeaderFooter", "name");
	std::shared_ptr<HeaderFooter> paramDto = utils->getTestValueForClass<HeaderFooter>("putSlidesHeaderFooter", "dto");
	utility::string_t paramPassword = utils->getTestValue("putSlidesHeaderFooter", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlidesHeaderFooter", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlidesHeaderFooter", "storage");
	paramDto = utils->getInvalidTestValueForClass<>("putSlidesHeaderFooter", "dto", paramDto);
	utils->initialize("putSlidesHeaderFooter", "dto", paramDto);

	bool failed = true;
	try
	{
		api->setPresentationHeaderFooter(paramName, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesHeaderFooter", "dto");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesHeaderFooter", "dto", paramDto);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesHeaderFooter", "dto");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesHeaderFooter", "dto", paramDto);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesHeaderFooter", "dto"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesHeaderFooterInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("putSlidesHeaderFooter", "name");
	std::shared_ptr<HeaderFooter> paramDto = utils->getTestValueForClass<HeaderFooter>("putSlidesHeaderFooter", "dto");
	utility::string_t paramPassword = utils->getTestValue("putSlidesHeaderFooter", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlidesHeaderFooter", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlidesHeaderFooter", "storage");
	paramPassword = utils->getInvalidTestValue("putSlidesHeaderFooter", "password", paramPassword);
	utils->initialize("putSlidesHeaderFooter", "password", paramPassword);

	bool failed = true;
	try
	{
		api->setPresentationHeaderFooter(paramName, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesHeaderFooter", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesHeaderFooter", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesHeaderFooter", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesHeaderFooter", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesHeaderFooter", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesHeaderFooterInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("putSlidesHeaderFooter", "name");
	std::shared_ptr<HeaderFooter> paramDto = utils->getTestValueForClass<HeaderFooter>("putSlidesHeaderFooter", "dto");
	utility::string_t paramPassword = utils->getTestValue("putSlidesHeaderFooter", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlidesHeaderFooter", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlidesHeaderFooter", "storage");
	paramFolder = utils->getInvalidTestValue("putSlidesHeaderFooter", "folder", paramFolder);
	utils->initialize("putSlidesHeaderFooter", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->setPresentationHeaderFooter(paramName, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesHeaderFooter", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesHeaderFooter", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesHeaderFooter", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesHeaderFooter", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesHeaderFooter", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesHeaderFooterInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("putSlidesHeaderFooter", "name");
	std::shared_ptr<HeaderFooter> paramDto = utils->getTestValueForClass<HeaderFooter>("putSlidesHeaderFooter", "dto");
	utility::string_t paramPassword = utils->getTestValue("putSlidesHeaderFooter", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlidesHeaderFooter", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlidesHeaderFooter", "storage");
	paramStorage = utils->getInvalidTestValue("putSlidesHeaderFooter", "storage", paramStorage);
	utils->initialize("putSlidesHeaderFooter", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->setPresentationHeaderFooter(paramName, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesHeaderFooter", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesHeaderFooter", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesHeaderFooter", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesHeaderFooter", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesHeaderFooter", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesMerge) {
	utility::string_t paramOutPath = utils->getTestValue("putSlidesMerge", "outPath");
	std::vector<std::shared_ptr<HttpContent>> paramFiles = utils->getBinArrayTestValue("putSlidesMerge", "files");
	std::shared_ptr<OrderedMergeRequest> paramRequest = utils->getTestValueForClass<OrderedMergeRequest>("putSlidesMerge", "request");
	utility::string_t paramPassword = utils->getTestValue("putSlidesMerge", "password");
	utility::string_t paramStorage = utils->getTestValue("putSlidesMerge", "storage");
	utils->initialize("putSlidesMerge", "");
	api->mergeAndSaveOnline(paramOutPath, paramFiles, paramRequest, paramPassword, paramStorage).wait();
}

TEST_F(SlidesApiTest, putSlidesMergeInvalidOutPath) {
	utility::string_t paramOutPath = utils->getTestValue("putSlidesMerge", "outPath");
	std::vector<std::shared_ptr<HttpContent>> paramFiles = utils->getBinArrayTestValue("putSlidesMerge", "files");
	std::shared_ptr<OrderedMergeRequest> paramRequest = utils->getTestValueForClass<OrderedMergeRequest>("putSlidesMerge", "request");
	utility::string_t paramPassword = utils->getTestValue("putSlidesMerge", "password");
	utility::string_t paramStorage = utils->getTestValue("putSlidesMerge", "storage");
	paramOutPath = utils->getInvalidTestValue("putSlidesMerge", "outPath", paramOutPath);
	utils->initialize("putSlidesMerge", "outPath", paramOutPath);

	bool failed = true;
	try
	{
		api->mergeAndSaveOnline(paramOutPath, paramFiles, paramRequest, paramPassword, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesMerge", "outPath");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesMerge", "outPath", paramOutPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesMerge", "outPath");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesMerge", "outPath", paramOutPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesMerge", "outPath"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesMergeInvalidFiles) {
	utility::string_t paramOutPath = utils->getTestValue("putSlidesMerge", "outPath");
	std::vector<std::shared_ptr<HttpContent>> paramFiles = utils->getBinArrayTestValue("putSlidesMerge", "files");
	std::shared_ptr<OrderedMergeRequest> paramRequest = utils->getTestValueForClass<OrderedMergeRequest>("putSlidesMerge", "request");
	utility::string_t paramPassword = utils->getTestValue("putSlidesMerge", "password");
	utility::string_t paramStorage = utils->getTestValue("putSlidesMerge", "storage");
	paramFiles = utils->getInvalidBinArrayTestValue("putSlidesMerge", "files", paramFiles);
	utils->initialize("putSlidesMerge", "files", paramFiles);

	bool failed = true;
	try
	{
		api->mergeAndSaveOnline(paramOutPath, paramFiles, paramRequest, paramPassword, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesMerge", "files");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesMerge", "files", paramFiles);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesMerge", "files");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesMerge", "files", paramFiles);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesMerge", "files"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesMergeInvalidRequest) {
	utility::string_t paramOutPath = utils->getTestValue("putSlidesMerge", "outPath");
	std::vector<std::shared_ptr<HttpContent>> paramFiles = utils->getBinArrayTestValue("putSlidesMerge", "files");
	std::shared_ptr<OrderedMergeRequest> paramRequest = utils->getTestValueForClass<OrderedMergeRequest>("putSlidesMerge", "request");
	utility::string_t paramPassword = utils->getTestValue("putSlidesMerge", "password");
	utility::string_t paramStorage = utils->getTestValue("putSlidesMerge", "storage");
	paramRequest = utils->getInvalidTestValueForClass<>("putSlidesMerge", "request", paramRequest);
	utils->initialize("putSlidesMerge", "request", paramRequest);

	bool failed = true;
	try
	{
		api->mergeAndSaveOnline(paramOutPath, paramFiles, paramRequest, paramPassword, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesMerge", "request");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesMerge", "request", paramRequest);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesMerge", "request");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesMerge", "request", paramRequest);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesMerge", "request"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesMergeInvalidPassword) {
	utility::string_t paramOutPath = utils->getTestValue("putSlidesMerge", "outPath");
	std::vector<std::shared_ptr<HttpContent>> paramFiles = utils->getBinArrayTestValue("putSlidesMerge", "files");
	std::shared_ptr<OrderedMergeRequest> paramRequest = utils->getTestValueForClass<OrderedMergeRequest>("putSlidesMerge", "request");
	utility::string_t paramPassword = utils->getTestValue("putSlidesMerge", "password");
	utility::string_t paramStorage = utils->getTestValue("putSlidesMerge", "storage");
	paramPassword = utils->getInvalidTestValue("putSlidesMerge", "password", paramPassword);
	utils->initialize("putSlidesMerge", "password", paramPassword);

	bool failed = true;
	try
	{
		api->mergeAndSaveOnline(paramOutPath, paramFiles, paramRequest, paramPassword, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesMerge", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesMerge", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesMerge", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesMerge", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesMerge", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesMergeInvalidStorage) {
	utility::string_t paramOutPath = utils->getTestValue("putSlidesMerge", "outPath");
	std::vector<std::shared_ptr<HttpContent>> paramFiles = utils->getBinArrayTestValue("putSlidesMerge", "files");
	std::shared_ptr<OrderedMergeRequest> paramRequest = utils->getTestValueForClass<OrderedMergeRequest>("putSlidesMerge", "request");
	utility::string_t paramPassword = utils->getTestValue("putSlidesMerge", "password");
	utility::string_t paramStorage = utils->getTestValue("putSlidesMerge", "storage");
	paramStorage = utils->getInvalidTestValue("putSlidesMerge", "storage", paramStorage);
	utils->initialize("putSlidesMerge", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->mergeAndSaveOnline(paramOutPath, paramFiles, paramRequest, paramPassword, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesMerge", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesMerge", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesMerge", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesMerge", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesMerge", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesProtectionProperties) {
	utility::string_t paramName = utils->getTestValue("putSlidesProtectionProperties", "name");
	std::shared_ptr<ProtectionProperties> paramDto = utils->getTestValueForClass<ProtectionProperties>("putSlidesProtectionProperties", "dto");
	utility::string_t paramPassword = utils->getTestValue("putSlidesProtectionProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlidesProtectionProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlidesProtectionProperties", "storage");
	utils->initialize("putSlidesProtectionProperties", "");
	std::shared_ptr<ProtectionProperties> result = api->setProtectionProperties(paramName, paramDto, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, putSlidesProtectionPropertiesInvalidName) {
	utility::string_t paramName = utils->getTestValue("putSlidesProtectionProperties", "name");
	std::shared_ptr<ProtectionProperties> paramDto = utils->getTestValueForClass<ProtectionProperties>("putSlidesProtectionProperties", "dto");
	utility::string_t paramPassword = utils->getTestValue("putSlidesProtectionProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlidesProtectionProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlidesProtectionProperties", "storage");
	paramName = utils->getInvalidTestValue("putSlidesProtectionProperties", "name", paramName);
	utils->initialize("putSlidesProtectionProperties", "name", paramName);

	bool failed = true;
	try
	{
		api->setProtectionProperties(paramName, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesProtectionProperties", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesProtectionProperties", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesProtectionProperties", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesProtectionProperties", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesProtectionProperties", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesProtectionPropertiesInvalidDto) {
	utility::string_t paramName = utils->getTestValue("putSlidesProtectionProperties", "name");
	std::shared_ptr<ProtectionProperties> paramDto = utils->getTestValueForClass<ProtectionProperties>("putSlidesProtectionProperties", "dto");
	utility::string_t paramPassword = utils->getTestValue("putSlidesProtectionProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlidesProtectionProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlidesProtectionProperties", "storage");
	paramDto = utils->getInvalidTestValueForClass<>("putSlidesProtectionProperties", "dto", paramDto);
	utils->initialize("putSlidesProtectionProperties", "dto", paramDto);

	bool failed = true;
	try
	{
		api->setProtectionProperties(paramName, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesProtectionProperties", "dto");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesProtectionProperties", "dto", paramDto);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesProtectionProperties", "dto");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesProtectionProperties", "dto", paramDto);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesProtectionProperties", "dto"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesProtectionPropertiesInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("putSlidesProtectionProperties", "name");
	std::shared_ptr<ProtectionProperties> paramDto = utils->getTestValueForClass<ProtectionProperties>("putSlidesProtectionProperties", "dto");
	utility::string_t paramPassword = utils->getTestValue("putSlidesProtectionProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlidesProtectionProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlidesProtectionProperties", "storage");
	paramPassword = utils->getInvalidTestValue("putSlidesProtectionProperties", "password", paramPassword);
	utils->initialize("putSlidesProtectionProperties", "password", paramPassword);

	bool failed = true;
	try
	{
		api->setProtectionProperties(paramName, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesProtectionProperties", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesProtectionProperties", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesProtectionProperties", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesProtectionProperties", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesProtectionProperties", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesProtectionPropertiesInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("putSlidesProtectionProperties", "name");
	std::shared_ptr<ProtectionProperties> paramDto = utils->getTestValueForClass<ProtectionProperties>("putSlidesProtectionProperties", "dto");
	utility::string_t paramPassword = utils->getTestValue("putSlidesProtectionProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlidesProtectionProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlidesProtectionProperties", "storage");
	paramFolder = utils->getInvalidTestValue("putSlidesProtectionProperties", "folder", paramFolder);
	utils->initialize("putSlidesProtectionProperties", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->setProtectionProperties(paramName, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesProtectionProperties", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesProtectionProperties", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesProtectionProperties", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesProtectionProperties", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesProtectionProperties", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesProtectionPropertiesInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("putSlidesProtectionProperties", "name");
	std::shared_ptr<ProtectionProperties> paramDto = utils->getTestValueForClass<ProtectionProperties>("putSlidesProtectionProperties", "dto");
	utility::string_t paramPassword = utils->getTestValue("putSlidesProtectionProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlidesProtectionProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlidesProtectionProperties", "storage");
	paramStorage = utils->getInvalidTestValue("putSlidesProtectionProperties", "storage", paramStorage);
	utils->initialize("putSlidesProtectionProperties", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->setProtectionProperties(paramName, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesProtectionProperties", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesProtectionProperties", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesProtectionProperties", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesProtectionProperties", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesProtectionProperties", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesSaveAs) {
	utility::string_t paramName = utils->getTestValue("putSlidesSaveAs", "name");
	utility::string_t paramFormat = utils->getTestValue("putSlidesSaveAs", "format");
	utility::string_t paramOutPath = utils->getTestValue("putSlidesSaveAs", "outPath");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("putSlidesSaveAs", "options");
	utility::string_t paramPassword = utils->getTestValue("putSlidesSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlidesSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlidesSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("putSlidesSaveAs", "fontsFolder");
	utils->initialize("putSlidesSaveAs", "");
	api->savePresentation(paramName, paramFormat, paramOutPath, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
}

TEST_F(SlidesApiTest, putSlidesSaveAsInvalidName) {
	utility::string_t paramName = utils->getTestValue("putSlidesSaveAs", "name");
	utility::string_t paramFormat = utils->getTestValue("putSlidesSaveAs", "format");
	utility::string_t paramOutPath = utils->getTestValue("putSlidesSaveAs", "outPath");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("putSlidesSaveAs", "options");
	utility::string_t paramPassword = utils->getTestValue("putSlidesSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlidesSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlidesSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("putSlidesSaveAs", "fontsFolder");
	paramName = utils->getInvalidTestValue("putSlidesSaveAs", "name", paramName);
	utils->initialize("putSlidesSaveAs", "name", paramName);

	bool failed = true;
	try
	{
		api->savePresentation(paramName, paramFormat, paramOutPath, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesSaveAs", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesSaveAs", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesSaveAs", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesSaveAs", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesSaveAs", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesSaveAsInvalidFormat) {
	utility::string_t paramName = utils->getTestValue("putSlidesSaveAs", "name");
	utility::string_t paramFormat = utils->getTestValue("putSlidesSaveAs", "format");
	utility::string_t paramOutPath = utils->getTestValue("putSlidesSaveAs", "outPath");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("putSlidesSaveAs", "options");
	utility::string_t paramPassword = utils->getTestValue("putSlidesSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlidesSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlidesSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("putSlidesSaveAs", "fontsFolder");
	paramFormat = utils->getInvalidTestValue("putSlidesSaveAs", "format", paramFormat);
	utils->initialize("putSlidesSaveAs", "format", paramFormat);

	bool failed = true;
	try
	{
		api->savePresentation(paramName, paramFormat, paramOutPath, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesSaveAs", "format");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesSaveAs", "format", paramFormat);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesSaveAs", "format");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesSaveAs", "format", paramFormat);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesSaveAs", "format"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesSaveAsInvalidOutPath) {
	utility::string_t paramName = utils->getTestValue("putSlidesSaveAs", "name");
	utility::string_t paramFormat = utils->getTestValue("putSlidesSaveAs", "format");
	utility::string_t paramOutPath = utils->getTestValue("putSlidesSaveAs", "outPath");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("putSlidesSaveAs", "options");
	utility::string_t paramPassword = utils->getTestValue("putSlidesSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlidesSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlidesSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("putSlidesSaveAs", "fontsFolder");
	paramOutPath = utils->getInvalidTestValue("putSlidesSaveAs", "outPath", paramOutPath);
	utils->initialize("putSlidesSaveAs", "outPath", paramOutPath);

	bool failed = true;
	try
	{
		api->savePresentation(paramName, paramFormat, paramOutPath, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesSaveAs", "outPath");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesSaveAs", "outPath", paramOutPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesSaveAs", "outPath");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesSaveAs", "outPath", paramOutPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesSaveAs", "outPath"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesSaveAsInvalidOptions) {
	utility::string_t paramName = utils->getTestValue("putSlidesSaveAs", "name");
	utility::string_t paramFormat = utils->getTestValue("putSlidesSaveAs", "format");
	utility::string_t paramOutPath = utils->getTestValue("putSlidesSaveAs", "outPath");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("putSlidesSaveAs", "options");
	utility::string_t paramPassword = utils->getTestValue("putSlidesSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlidesSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlidesSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("putSlidesSaveAs", "fontsFolder");
	paramOptions = utils->getInvalidTestValueForClass<>("putSlidesSaveAs", "options", paramOptions);
	utils->initialize("putSlidesSaveAs", "options", paramOptions);

	bool failed = true;
	try
	{
		api->savePresentation(paramName, paramFormat, paramOutPath, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesSaveAs", "options");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesSaveAs", "options", paramOptions);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesSaveAs", "options");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesSaveAs", "options", paramOptions);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesSaveAs", "options"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesSaveAsInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("putSlidesSaveAs", "name");
	utility::string_t paramFormat = utils->getTestValue("putSlidesSaveAs", "format");
	utility::string_t paramOutPath = utils->getTestValue("putSlidesSaveAs", "outPath");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("putSlidesSaveAs", "options");
	utility::string_t paramPassword = utils->getTestValue("putSlidesSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlidesSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlidesSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("putSlidesSaveAs", "fontsFolder");
	paramPassword = utils->getInvalidTestValue("putSlidesSaveAs", "password", paramPassword);
	utils->initialize("putSlidesSaveAs", "password", paramPassword);

	bool failed = true;
	try
	{
		api->savePresentation(paramName, paramFormat, paramOutPath, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesSaveAs", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesSaveAs", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesSaveAs", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesSaveAs", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesSaveAs", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesSaveAsInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("putSlidesSaveAs", "name");
	utility::string_t paramFormat = utils->getTestValue("putSlidesSaveAs", "format");
	utility::string_t paramOutPath = utils->getTestValue("putSlidesSaveAs", "outPath");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("putSlidesSaveAs", "options");
	utility::string_t paramPassword = utils->getTestValue("putSlidesSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlidesSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlidesSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("putSlidesSaveAs", "fontsFolder");
	paramFolder = utils->getInvalidTestValue("putSlidesSaveAs", "folder", paramFolder);
	utils->initialize("putSlidesSaveAs", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->savePresentation(paramName, paramFormat, paramOutPath, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesSaveAs", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesSaveAs", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesSaveAs", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesSaveAs", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesSaveAs", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesSaveAsInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("putSlidesSaveAs", "name");
	utility::string_t paramFormat = utils->getTestValue("putSlidesSaveAs", "format");
	utility::string_t paramOutPath = utils->getTestValue("putSlidesSaveAs", "outPath");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("putSlidesSaveAs", "options");
	utility::string_t paramPassword = utils->getTestValue("putSlidesSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlidesSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlidesSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("putSlidesSaveAs", "fontsFolder");
	paramStorage = utils->getInvalidTestValue("putSlidesSaveAs", "storage", paramStorage);
	utils->initialize("putSlidesSaveAs", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->savePresentation(paramName, paramFormat, paramOutPath, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesSaveAs", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesSaveAs", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesSaveAs", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesSaveAs", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesSaveAs", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesSaveAsInvalidFontsFolder) {
	utility::string_t paramName = utils->getTestValue("putSlidesSaveAs", "name");
	utility::string_t paramFormat = utils->getTestValue("putSlidesSaveAs", "format");
	utility::string_t paramOutPath = utils->getTestValue("putSlidesSaveAs", "outPath");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("putSlidesSaveAs", "options");
	utility::string_t paramPassword = utils->getTestValue("putSlidesSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlidesSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlidesSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("putSlidesSaveAs", "fontsFolder");
	paramFontsFolder = utils->getInvalidTestValue("putSlidesSaveAs", "fontsFolder", paramFontsFolder);
	utils->initialize("putSlidesSaveAs", "fontsFolder", paramFontsFolder);

	bool failed = true;
	try
	{
		api->savePresentation(paramName, paramFormat, paramOutPath, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesSaveAs", "fontsFolder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesSaveAs", "fontsFolder", paramFontsFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesSaveAs", "fontsFolder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesSaveAs", "fontsFolder", paramFontsFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesSaveAs", "fontsFolder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesSetDocumentProperty) {
	utility::string_t paramName = utils->getTestValue("putSlidesSetDocumentProperty", "name");
	utility::string_t paramPropertyName = utils->getTestValue("putSlidesSetDocumentProperty", "propertyName");
	std::shared_ptr<DocumentProperty> paramProperty = utils->getTestValueForClass<DocumentProperty>("putSlidesSetDocumentProperty", "property");
	utility::string_t paramPassword = utils->getTestValue("putSlidesSetDocumentProperty", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlidesSetDocumentProperty", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlidesSetDocumentProperty", "storage");
	utils->initialize("putSlidesSetDocumentProperty", "");
	std::shared_ptr<DocumentProperty> result = api->setDocumentProperty(paramName, paramPropertyName, paramProperty, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, putSlidesSetDocumentPropertyInvalidName) {
	utility::string_t paramName = utils->getTestValue("putSlidesSetDocumentProperty", "name");
	utility::string_t paramPropertyName = utils->getTestValue("putSlidesSetDocumentProperty", "propertyName");
	std::shared_ptr<DocumentProperty> paramProperty = utils->getTestValueForClass<DocumentProperty>("putSlidesSetDocumentProperty", "property");
	utility::string_t paramPassword = utils->getTestValue("putSlidesSetDocumentProperty", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlidesSetDocumentProperty", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlidesSetDocumentProperty", "storage");
	paramName = utils->getInvalidTestValue("putSlidesSetDocumentProperty", "name", paramName);
	utils->initialize("putSlidesSetDocumentProperty", "name", paramName);

	bool failed = true;
	try
	{
		api->setDocumentProperty(paramName, paramPropertyName, paramProperty, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesSetDocumentProperty", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesSetDocumentProperty", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesSetDocumentProperty", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesSetDocumentProperty", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesSetDocumentProperty", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesSetDocumentPropertyInvalidPropertyName) {
	utility::string_t paramName = utils->getTestValue("putSlidesSetDocumentProperty", "name");
	utility::string_t paramPropertyName = utils->getTestValue("putSlidesSetDocumentProperty", "propertyName");
	std::shared_ptr<DocumentProperty> paramProperty = utils->getTestValueForClass<DocumentProperty>("putSlidesSetDocumentProperty", "property");
	utility::string_t paramPassword = utils->getTestValue("putSlidesSetDocumentProperty", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlidesSetDocumentProperty", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlidesSetDocumentProperty", "storage");
	paramPropertyName = utils->getInvalidTestValue("putSlidesSetDocumentProperty", "propertyName", paramPropertyName);
	utils->initialize("putSlidesSetDocumentProperty", "propertyName", paramPropertyName);

	bool failed = true;
	try
	{
		api->setDocumentProperty(paramName, paramPropertyName, paramProperty, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesSetDocumentProperty", "propertyName");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesSetDocumentProperty", "propertyName", paramPropertyName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesSetDocumentProperty", "propertyName");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesSetDocumentProperty", "propertyName", paramPropertyName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesSetDocumentProperty", "propertyName"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesSetDocumentPropertyInvalidProperty) {
	utility::string_t paramName = utils->getTestValue("putSlidesSetDocumentProperty", "name");
	utility::string_t paramPropertyName = utils->getTestValue("putSlidesSetDocumentProperty", "propertyName");
	std::shared_ptr<DocumentProperty> paramProperty = utils->getTestValueForClass<DocumentProperty>("putSlidesSetDocumentProperty", "property");
	utility::string_t paramPassword = utils->getTestValue("putSlidesSetDocumentProperty", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlidesSetDocumentProperty", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlidesSetDocumentProperty", "storage");
	paramProperty = utils->getInvalidTestValueForClass<>("putSlidesSetDocumentProperty", "property", paramProperty);
	utils->initialize("putSlidesSetDocumentProperty", "property", paramProperty);

	bool failed = true;
	try
	{
		api->setDocumentProperty(paramName, paramPropertyName, paramProperty, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesSetDocumentProperty", "property");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesSetDocumentProperty", "property", paramProperty);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesSetDocumentProperty", "property");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesSetDocumentProperty", "property", paramProperty);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesSetDocumentProperty", "property"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesSetDocumentPropertyInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("putSlidesSetDocumentProperty", "name");
	utility::string_t paramPropertyName = utils->getTestValue("putSlidesSetDocumentProperty", "propertyName");
	std::shared_ptr<DocumentProperty> paramProperty = utils->getTestValueForClass<DocumentProperty>("putSlidesSetDocumentProperty", "property");
	utility::string_t paramPassword = utils->getTestValue("putSlidesSetDocumentProperty", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlidesSetDocumentProperty", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlidesSetDocumentProperty", "storage");
	paramPassword = utils->getInvalidTestValue("putSlidesSetDocumentProperty", "password", paramPassword);
	utils->initialize("putSlidesSetDocumentProperty", "password", paramPassword);

	bool failed = true;
	try
	{
		api->setDocumentProperty(paramName, paramPropertyName, paramProperty, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesSetDocumentProperty", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesSetDocumentProperty", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesSetDocumentProperty", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesSetDocumentProperty", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesSetDocumentProperty", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesSetDocumentPropertyInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("putSlidesSetDocumentProperty", "name");
	utility::string_t paramPropertyName = utils->getTestValue("putSlidesSetDocumentProperty", "propertyName");
	std::shared_ptr<DocumentProperty> paramProperty = utils->getTestValueForClass<DocumentProperty>("putSlidesSetDocumentProperty", "property");
	utility::string_t paramPassword = utils->getTestValue("putSlidesSetDocumentProperty", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlidesSetDocumentProperty", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlidesSetDocumentProperty", "storage");
	paramFolder = utils->getInvalidTestValue("putSlidesSetDocumentProperty", "folder", paramFolder);
	utils->initialize("putSlidesSetDocumentProperty", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->setDocumentProperty(paramName, paramPropertyName, paramProperty, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesSetDocumentProperty", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesSetDocumentProperty", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesSetDocumentProperty", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesSetDocumentProperty", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesSetDocumentProperty", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesSetDocumentPropertyInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("putSlidesSetDocumentProperty", "name");
	utility::string_t paramPropertyName = utils->getTestValue("putSlidesSetDocumentProperty", "propertyName");
	std::shared_ptr<DocumentProperty> paramProperty = utils->getTestValueForClass<DocumentProperty>("putSlidesSetDocumentProperty", "property");
	utility::string_t paramPassword = utils->getTestValue("putSlidesSetDocumentProperty", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlidesSetDocumentProperty", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlidesSetDocumentProperty", "storage");
	paramStorage = utils->getInvalidTestValue("putSlidesSetDocumentProperty", "storage", paramStorage);
	utils->initialize("putSlidesSetDocumentProperty", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->setDocumentProperty(paramName, paramPropertyName, paramProperty, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesSetDocumentProperty", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesSetDocumentProperty", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesSetDocumentProperty", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesSetDocumentProperty", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesSetDocumentProperty", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesSlide) {
	utility::string_t paramName = utils->getTestValue("putSlidesSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSlidesSlide", "slideIndex");
	std::shared_ptr<Slide> paramSlideDto = utils->getTestValueForClass<Slide>("putSlidesSlide", "slideDto");
	utility::string_t paramPassword = utils->getTestValue("putSlidesSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlidesSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlidesSlide", "storage");
	utils->initialize("putSlidesSlide", "");
	std::shared_ptr<Slide> result = api->updateSlide(paramName, paramSlideIndex, paramSlideDto, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, putSlidesSlideInvalidName) {
	utility::string_t paramName = utils->getTestValue("putSlidesSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSlidesSlide", "slideIndex");
	std::shared_ptr<Slide> paramSlideDto = utils->getTestValueForClass<Slide>("putSlidesSlide", "slideDto");
	utility::string_t paramPassword = utils->getTestValue("putSlidesSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlidesSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlidesSlide", "storage");
	paramName = utils->getInvalidTestValue("putSlidesSlide", "name", paramName);
	utils->initialize("putSlidesSlide", "name", paramName);

	bool failed = true;
	try
	{
		api->updateSlide(paramName, paramSlideIndex, paramSlideDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesSlide", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesSlide", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesSlide", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesSlide", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesSlide", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesSlideInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("putSlidesSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSlidesSlide", "slideIndex");
	std::shared_ptr<Slide> paramSlideDto = utils->getTestValueForClass<Slide>("putSlidesSlide", "slideDto");
	utility::string_t paramPassword = utils->getTestValue("putSlidesSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlidesSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlidesSlide", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("putSlidesSlide", "slideIndex", paramSlideIndex).value();
	utils->initialize("putSlidesSlide", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->updateSlide(paramName, paramSlideIndex, paramSlideDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesSlide", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesSlide", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesSlide", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesSlide", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesSlide", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesSlideInvalidSlideDto) {
	utility::string_t paramName = utils->getTestValue("putSlidesSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSlidesSlide", "slideIndex");
	std::shared_ptr<Slide> paramSlideDto = utils->getTestValueForClass<Slide>("putSlidesSlide", "slideDto");
	utility::string_t paramPassword = utils->getTestValue("putSlidesSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlidesSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlidesSlide", "storage");
	paramSlideDto = utils->getInvalidTestValueForClass<>("putSlidesSlide", "slideDto", paramSlideDto);
	utils->initialize("putSlidesSlide", "slideDto", paramSlideDto);

	bool failed = true;
	try
	{
		api->updateSlide(paramName, paramSlideIndex, paramSlideDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesSlide", "slideDto");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesSlide", "slideDto", paramSlideDto);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesSlide", "slideDto");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesSlide", "slideDto", paramSlideDto);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesSlide", "slideDto"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesSlideInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("putSlidesSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSlidesSlide", "slideIndex");
	std::shared_ptr<Slide> paramSlideDto = utils->getTestValueForClass<Slide>("putSlidesSlide", "slideDto");
	utility::string_t paramPassword = utils->getTestValue("putSlidesSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlidesSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlidesSlide", "storage");
	paramPassword = utils->getInvalidTestValue("putSlidesSlide", "password", paramPassword);
	utils->initialize("putSlidesSlide", "password", paramPassword);

	bool failed = true;
	try
	{
		api->updateSlide(paramName, paramSlideIndex, paramSlideDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesSlide", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesSlide", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesSlide", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesSlide", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesSlide", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesSlideInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("putSlidesSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSlidesSlide", "slideIndex");
	std::shared_ptr<Slide> paramSlideDto = utils->getTestValueForClass<Slide>("putSlidesSlide", "slideDto");
	utility::string_t paramPassword = utils->getTestValue("putSlidesSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlidesSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlidesSlide", "storage");
	paramFolder = utils->getInvalidTestValue("putSlidesSlide", "folder", paramFolder);
	utils->initialize("putSlidesSlide", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->updateSlide(paramName, paramSlideIndex, paramSlideDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesSlide", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesSlide", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesSlide", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesSlide", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesSlide", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesSlideInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("putSlidesSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSlidesSlide", "slideIndex");
	std::shared_ptr<Slide> paramSlideDto = utils->getTestValueForClass<Slide>("putSlidesSlide", "slideDto");
	utility::string_t paramPassword = utils->getTestValue("putSlidesSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlidesSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlidesSlide", "storage");
	paramStorage = utils->getInvalidTestValue("putSlidesSlide", "storage", paramStorage);
	utils->initialize("putSlidesSlide", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->updateSlide(paramName, paramSlideIndex, paramSlideDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesSlide", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesSlide", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesSlide", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesSlide", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesSlide", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesSlideBackground) {
	utility::string_t paramName = utils->getTestValue("putSlidesSlideBackground", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSlidesSlideBackground", "slideIndex");
	std::shared_ptr<SlideBackground> paramBackground = utils->getTestValueForClass<SlideBackground>("putSlidesSlideBackground", "background");
	utility::string_t paramPassword = utils->getTestValue("putSlidesSlideBackground", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlidesSlideBackground", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlidesSlideBackground", "storage");
	utils->initialize("putSlidesSlideBackground", "");
	std::shared_ptr<SlideBackground> result = api->setBackground(paramName, paramSlideIndex, paramBackground, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, putSlidesSlideBackgroundInvalidName) {
	utility::string_t paramName = utils->getTestValue("putSlidesSlideBackground", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSlidesSlideBackground", "slideIndex");
	std::shared_ptr<SlideBackground> paramBackground = utils->getTestValueForClass<SlideBackground>("putSlidesSlideBackground", "background");
	utility::string_t paramPassword = utils->getTestValue("putSlidesSlideBackground", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlidesSlideBackground", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlidesSlideBackground", "storage");
	paramName = utils->getInvalidTestValue("putSlidesSlideBackground", "name", paramName);
	utils->initialize("putSlidesSlideBackground", "name", paramName);

	bool failed = true;
	try
	{
		api->setBackground(paramName, paramSlideIndex, paramBackground, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesSlideBackground", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesSlideBackground", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesSlideBackground", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesSlideBackground", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesSlideBackground", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesSlideBackgroundInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("putSlidesSlideBackground", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSlidesSlideBackground", "slideIndex");
	std::shared_ptr<SlideBackground> paramBackground = utils->getTestValueForClass<SlideBackground>("putSlidesSlideBackground", "background");
	utility::string_t paramPassword = utils->getTestValue("putSlidesSlideBackground", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlidesSlideBackground", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlidesSlideBackground", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("putSlidesSlideBackground", "slideIndex", paramSlideIndex).value();
	utils->initialize("putSlidesSlideBackground", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->setBackground(paramName, paramSlideIndex, paramBackground, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesSlideBackground", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesSlideBackground", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesSlideBackground", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesSlideBackground", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesSlideBackground", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesSlideBackgroundInvalidBackground) {
	utility::string_t paramName = utils->getTestValue("putSlidesSlideBackground", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSlidesSlideBackground", "slideIndex");
	std::shared_ptr<SlideBackground> paramBackground = utils->getTestValueForClass<SlideBackground>("putSlidesSlideBackground", "background");
	utility::string_t paramPassword = utils->getTestValue("putSlidesSlideBackground", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlidesSlideBackground", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlidesSlideBackground", "storage");
	paramBackground = utils->getInvalidTestValueForClass<>("putSlidesSlideBackground", "background", paramBackground);
	utils->initialize("putSlidesSlideBackground", "background", paramBackground);

	bool failed = true;
	try
	{
		api->setBackground(paramName, paramSlideIndex, paramBackground, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesSlideBackground", "background");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesSlideBackground", "background", paramBackground);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesSlideBackground", "background");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesSlideBackground", "background", paramBackground);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesSlideBackground", "background"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesSlideBackgroundInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("putSlidesSlideBackground", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSlidesSlideBackground", "slideIndex");
	std::shared_ptr<SlideBackground> paramBackground = utils->getTestValueForClass<SlideBackground>("putSlidesSlideBackground", "background");
	utility::string_t paramPassword = utils->getTestValue("putSlidesSlideBackground", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlidesSlideBackground", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlidesSlideBackground", "storage");
	paramPassword = utils->getInvalidTestValue("putSlidesSlideBackground", "password", paramPassword);
	utils->initialize("putSlidesSlideBackground", "password", paramPassword);

	bool failed = true;
	try
	{
		api->setBackground(paramName, paramSlideIndex, paramBackground, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesSlideBackground", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesSlideBackground", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesSlideBackground", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesSlideBackground", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesSlideBackground", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesSlideBackgroundInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("putSlidesSlideBackground", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSlidesSlideBackground", "slideIndex");
	std::shared_ptr<SlideBackground> paramBackground = utils->getTestValueForClass<SlideBackground>("putSlidesSlideBackground", "background");
	utility::string_t paramPassword = utils->getTestValue("putSlidesSlideBackground", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlidesSlideBackground", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlidesSlideBackground", "storage");
	paramFolder = utils->getInvalidTestValue("putSlidesSlideBackground", "folder", paramFolder);
	utils->initialize("putSlidesSlideBackground", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->setBackground(paramName, paramSlideIndex, paramBackground, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesSlideBackground", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesSlideBackground", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesSlideBackground", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesSlideBackground", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesSlideBackground", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesSlideBackgroundInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("putSlidesSlideBackground", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSlidesSlideBackground", "slideIndex");
	std::shared_ptr<SlideBackground> paramBackground = utils->getTestValueForClass<SlideBackground>("putSlidesSlideBackground", "background");
	utility::string_t paramPassword = utils->getTestValue("putSlidesSlideBackground", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlidesSlideBackground", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlidesSlideBackground", "storage");
	paramStorage = utils->getInvalidTestValue("putSlidesSlideBackground", "storage", paramStorage);
	utils->initialize("putSlidesSlideBackground", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->setBackground(paramName, paramSlideIndex, paramBackground, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesSlideBackground", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesSlideBackground", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesSlideBackground", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesSlideBackground", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesSlideBackground", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesSlideBackgroundColor) {
	utility::string_t paramName = utils->getTestValue("putSlidesSlideBackgroundColor", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSlidesSlideBackgroundColor", "slideIndex");
	utility::string_t paramColor = utils->getTestValue("putSlidesSlideBackgroundColor", "color");
	utility::string_t paramPassword = utils->getTestValue("putSlidesSlideBackgroundColor", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlidesSlideBackgroundColor", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlidesSlideBackgroundColor", "storage");
	utils->initialize("putSlidesSlideBackgroundColor", "");
	std::shared_ptr<SlideBackground> result = api->setBackgroundColor(paramName, paramSlideIndex, paramColor, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, putSlidesSlideBackgroundColorInvalidName) {
	utility::string_t paramName = utils->getTestValue("putSlidesSlideBackgroundColor", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSlidesSlideBackgroundColor", "slideIndex");
	utility::string_t paramColor = utils->getTestValue("putSlidesSlideBackgroundColor", "color");
	utility::string_t paramPassword = utils->getTestValue("putSlidesSlideBackgroundColor", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlidesSlideBackgroundColor", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlidesSlideBackgroundColor", "storage");
	paramName = utils->getInvalidTestValue("putSlidesSlideBackgroundColor", "name", paramName);
	utils->initialize("putSlidesSlideBackgroundColor", "name", paramName);

	bool failed = true;
	try
	{
		api->setBackgroundColor(paramName, paramSlideIndex, paramColor, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesSlideBackgroundColor", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesSlideBackgroundColor", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesSlideBackgroundColor", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesSlideBackgroundColor", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesSlideBackgroundColor", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesSlideBackgroundColorInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("putSlidesSlideBackgroundColor", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSlidesSlideBackgroundColor", "slideIndex");
	utility::string_t paramColor = utils->getTestValue("putSlidesSlideBackgroundColor", "color");
	utility::string_t paramPassword = utils->getTestValue("putSlidesSlideBackgroundColor", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlidesSlideBackgroundColor", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlidesSlideBackgroundColor", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("putSlidesSlideBackgroundColor", "slideIndex", paramSlideIndex).value();
	utils->initialize("putSlidesSlideBackgroundColor", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->setBackgroundColor(paramName, paramSlideIndex, paramColor, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesSlideBackgroundColor", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesSlideBackgroundColor", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesSlideBackgroundColor", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesSlideBackgroundColor", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesSlideBackgroundColor", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesSlideBackgroundColorInvalidColor) {
	utility::string_t paramName = utils->getTestValue("putSlidesSlideBackgroundColor", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSlidesSlideBackgroundColor", "slideIndex");
	utility::string_t paramColor = utils->getTestValue("putSlidesSlideBackgroundColor", "color");
	utility::string_t paramPassword = utils->getTestValue("putSlidesSlideBackgroundColor", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlidesSlideBackgroundColor", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlidesSlideBackgroundColor", "storage");
	paramColor = utils->getInvalidTestValue("putSlidesSlideBackgroundColor", "color", paramColor);
	utils->initialize("putSlidesSlideBackgroundColor", "color", paramColor);

	bool failed = true;
	try
	{
		api->setBackgroundColor(paramName, paramSlideIndex, paramColor, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesSlideBackgroundColor", "color");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesSlideBackgroundColor", "color", paramColor);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesSlideBackgroundColor", "color");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesSlideBackgroundColor", "color", paramColor);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesSlideBackgroundColor", "color"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesSlideBackgroundColorInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("putSlidesSlideBackgroundColor", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSlidesSlideBackgroundColor", "slideIndex");
	utility::string_t paramColor = utils->getTestValue("putSlidesSlideBackgroundColor", "color");
	utility::string_t paramPassword = utils->getTestValue("putSlidesSlideBackgroundColor", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlidesSlideBackgroundColor", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlidesSlideBackgroundColor", "storage");
	paramPassword = utils->getInvalidTestValue("putSlidesSlideBackgroundColor", "password", paramPassword);
	utils->initialize("putSlidesSlideBackgroundColor", "password", paramPassword);

	bool failed = true;
	try
	{
		api->setBackgroundColor(paramName, paramSlideIndex, paramColor, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesSlideBackgroundColor", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesSlideBackgroundColor", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesSlideBackgroundColor", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesSlideBackgroundColor", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesSlideBackgroundColor", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesSlideBackgroundColorInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("putSlidesSlideBackgroundColor", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSlidesSlideBackgroundColor", "slideIndex");
	utility::string_t paramColor = utils->getTestValue("putSlidesSlideBackgroundColor", "color");
	utility::string_t paramPassword = utils->getTestValue("putSlidesSlideBackgroundColor", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlidesSlideBackgroundColor", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlidesSlideBackgroundColor", "storage");
	paramFolder = utils->getInvalidTestValue("putSlidesSlideBackgroundColor", "folder", paramFolder);
	utils->initialize("putSlidesSlideBackgroundColor", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->setBackgroundColor(paramName, paramSlideIndex, paramColor, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesSlideBackgroundColor", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesSlideBackgroundColor", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesSlideBackgroundColor", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesSlideBackgroundColor", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesSlideBackgroundColor", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesSlideBackgroundColorInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("putSlidesSlideBackgroundColor", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSlidesSlideBackgroundColor", "slideIndex");
	utility::string_t paramColor = utils->getTestValue("putSlidesSlideBackgroundColor", "color");
	utility::string_t paramPassword = utils->getTestValue("putSlidesSlideBackgroundColor", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlidesSlideBackgroundColor", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlidesSlideBackgroundColor", "storage");
	paramStorage = utils->getInvalidTestValue("putSlidesSlideBackgroundColor", "storage", paramStorage);
	utils->initialize("putSlidesSlideBackgroundColor", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->setBackgroundColor(paramName, paramSlideIndex, paramColor, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesSlideBackgroundColor", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesSlideBackgroundColor", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesSlideBackgroundColor", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesSlideBackgroundColor", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesSlideBackgroundColor", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesSlideProperties) {
	utility::string_t paramName = utils->getTestValue("putSlidesSlideProperties", "name");
	std::shared_ptr<SlideProperties> paramDto = utils->getTestValueForClass<SlideProperties>("putSlidesSlideProperties", "dto");
	utility::string_t paramPassword = utils->getTestValue("putSlidesSlideProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlidesSlideProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlidesSlideProperties", "storage");
	utils->initialize("putSlidesSlideProperties", "");
	std::shared_ptr<SlideProperties> result = api->setSlideProperties(paramName, paramDto, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, putSlidesSlidePropertiesInvalidName) {
	utility::string_t paramName = utils->getTestValue("putSlidesSlideProperties", "name");
	std::shared_ptr<SlideProperties> paramDto = utils->getTestValueForClass<SlideProperties>("putSlidesSlideProperties", "dto");
	utility::string_t paramPassword = utils->getTestValue("putSlidesSlideProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlidesSlideProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlidesSlideProperties", "storage");
	paramName = utils->getInvalidTestValue("putSlidesSlideProperties", "name", paramName);
	utils->initialize("putSlidesSlideProperties", "name", paramName);

	bool failed = true;
	try
	{
		api->setSlideProperties(paramName, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesSlideProperties", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesSlideProperties", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesSlideProperties", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesSlideProperties", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesSlideProperties", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesSlidePropertiesInvalidDto) {
	utility::string_t paramName = utils->getTestValue("putSlidesSlideProperties", "name");
	std::shared_ptr<SlideProperties> paramDto = utils->getTestValueForClass<SlideProperties>("putSlidesSlideProperties", "dto");
	utility::string_t paramPassword = utils->getTestValue("putSlidesSlideProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlidesSlideProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlidesSlideProperties", "storage");
	paramDto = utils->getInvalidTestValueForClass<>("putSlidesSlideProperties", "dto", paramDto);
	utils->initialize("putSlidesSlideProperties", "dto", paramDto);

	bool failed = true;
	try
	{
		api->setSlideProperties(paramName, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesSlideProperties", "dto");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesSlideProperties", "dto", paramDto);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesSlideProperties", "dto");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesSlideProperties", "dto", paramDto);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesSlideProperties", "dto"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesSlidePropertiesInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("putSlidesSlideProperties", "name");
	std::shared_ptr<SlideProperties> paramDto = utils->getTestValueForClass<SlideProperties>("putSlidesSlideProperties", "dto");
	utility::string_t paramPassword = utils->getTestValue("putSlidesSlideProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlidesSlideProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlidesSlideProperties", "storage");
	paramPassword = utils->getInvalidTestValue("putSlidesSlideProperties", "password", paramPassword);
	utils->initialize("putSlidesSlideProperties", "password", paramPassword);

	bool failed = true;
	try
	{
		api->setSlideProperties(paramName, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesSlideProperties", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesSlideProperties", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesSlideProperties", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesSlideProperties", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesSlideProperties", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesSlidePropertiesInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("putSlidesSlideProperties", "name");
	std::shared_ptr<SlideProperties> paramDto = utils->getTestValueForClass<SlideProperties>("putSlidesSlideProperties", "dto");
	utility::string_t paramPassword = utils->getTestValue("putSlidesSlideProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlidesSlideProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlidesSlideProperties", "storage");
	paramFolder = utils->getInvalidTestValue("putSlidesSlideProperties", "folder", paramFolder);
	utils->initialize("putSlidesSlideProperties", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->setSlideProperties(paramName, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesSlideProperties", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesSlideProperties", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesSlideProperties", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesSlideProperties", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesSlideProperties", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesSlidePropertiesInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("putSlidesSlideProperties", "name");
	std::shared_ptr<SlideProperties> paramDto = utils->getTestValueForClass<SlideProperties>("putSlidesSlideProperties", "dto");
	utility::string_t paramPassword = utils->getTestValue("putSlidesSlideProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlidesSlideProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlidesSlideProperties", "storage");
	paramStorage = utils->getInvalidTestValue("putSlidesSlideProperties", "storage", paramStorage);
	utils->initialize("putSlidesSlideProperties", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->setSlideProperties(paramName, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesSlideProperties", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesSlideProperties", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesSlideProperties", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesSlideProperties", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesSlideProperties", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesSlideSize) {
	utility::string_t paramName = utils->getTestValue("putSlidesSlideSize", "name");
	auto paramWidth = utils->getOptionalIntTestValue("putSlidesSlideSize", "width");
	auto paramHeight = utils->getOptionalIntTestValue("putSlidesSlideSize", "height");
	utility::string_t paramSizeType = utils->getTestValue("putSlidesSlideSize", "sizeType");
	utility::string_t paramScaleType = utils->getTestValue("putSlidesSlideSize", "scaleType");
	utility::string_t paramPassword = utils->getTestValue("putSlidesSlideSize", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlidesSlideSize", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlidesSlideSize", "storage");
	utils->initialize("putSlidesSlideSize", "");
	std::shared_ptr<Document> result = api->putSlidesSlideSize(paramName, paramWidth, paramHeight, paramSizeType, paramScaleType, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, putSlidesSlideSizeInvalidName) {
	utility::string_t paramName = utils->getTestValue("putSlidesSlideSize", "name");
	auto paramWidth = utils->getOptionalIntTestValue("putSlidesSlideSize", "width");
	auto paramHeight = utils->getOptionalIntTestValue("putSlidesSlideSize", "height");
	utility::string_t paramSizeType = utils->getTestValue("putSlidesSlideSize", "sizeType");
	utility::string_t paramScaleType = utils->getTestValue("putSlidesSlideSize", "scaleType");
	utility::string_t paramPassword = utils->getTestValue("putSlidesSlideSize", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlidesSlideSize", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlidesSlideSize", "storage");
	paramName = utils->getInvalidTestValue("putSlidesSlideSize", "name", paramName);
	utils->initialize("putSlidesSlideSize", "name", paramName);

	bool failed = true;
	try
	{
		api->putSlidesSlideSize(paramName, paramWidth, paramHeight, paramSizeType, paramScaleType, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesSlideSize", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesSlideSize", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesSlideSize", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesSlideSize", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesSlideSize", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesSlideSizeInvalidWidth) {
	utility::string_t paramName = utils->getTestValue("putSlidesSlideSize", "name");
	auto paramWidth = utils->getOptionalIntTestValue("putSlidesSlideSize", "width");
	auto paramHeight = utils->getOptionalIntTestValue("putSlidesSlideSize", "height");
	utility::string_t paramSizeType = utils->getTestValue("putSlidesSlideSize", "sizeType");
	utility::string_t paramScaleType = utils->getTestValue("putSlidesSlideSize", "scaleType");
	utility::string_t paramPassword = utils->getTestValue("putSlidesSlideSize", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlidesSlideSize", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlidesSlideSize", "storage");
	paramWidth = utils->getInvalidIntTestValue("putSlidesSlideSize", "width", paramWidth).value();
	utils->initialize("putSlidesSlideSize", "width", paramWidth);

	bool failed = true;
	try
	{
		api->putSlidesSlideSize(paramName, paramWidth, paramHeight, paramSizeType, paramScaleType, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesSlideSize", "width");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesSlideSize", "width", paramWidth);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesSlideSize", "width");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesSlideSize", "width", paramWidth);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesSlideSize", "width"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesSlideSizeInvalidHeight) {
	utility::string_t paramName = utils->getTestValue("putSlidesSlideSize", "name");
	auto paramWidth = utils->getOptionalIntTestValue("putSlidesSlideSize", "width");
	auto paramHeight = utils->getOptionalIntTestValue("putSlidesSlideSize", "height");
	utility::string_t paramSizeType = utils->getTestValue("putSlidesSlideSize", "sizeType");
	utility::string_t paramScaleType = utils->getTestValue("putSlidesSlideSize", "scaleType");
	utility::string_t paramPassword = utils->getTestValue("putSlidesSlideSize", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlidesSlideSize", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlidesSlideSize", "storage");
	paramHeight = utils->getInvalidIntTestValue("putSlidesSlideSize", "height", paramHeight).value();
	utils->initialize("putSlidesSlideSize", "height", paramHeight);

	bool failed = true;
	try
	{
		api->putSlidesSlideSize(paramName, paramWidth, paramHeight, paramSizeType, paramScaleType, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesSlideSize", "height");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesSlideSize", "height", paramHeight);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesSlideSize", "height");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesSlideSize", "height", paramHeight);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesSlideSize", "height"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesSlideSizeInvalidSizeType) {
	utility::string_t paramName = utils->getTestValue("putSlidesSlideSize", "name");
	auto paramWidth = utils->getOptionalIntTestValue("putSlidesSlideSize", "width");
	auto paramHeight = utils->getOptionalIntTestValue("putSlidesSlideSize", "height");
	utility::string_t paramSizeType = utils->getTestValue("putSlidesSlideSize", "sizeType");
	utility::string_t paramScaleType = utils->getTestValue("putSlidesSlideSize", "scaleType");
	utility::string_t paramPassword = utils->getTestValue("putSlidesSlideSize", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlidesSlideSize", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlidesSlideSize", "storage");
	paramSizeType = utils->getInvalidTestValue("putSlidesSlideSize", "sizeType", paramSizeType);
	utils->initialize("putSlidesSlideSize", "sizeType", paramSizeType);

	bool failed = true;
	try
	{
		api->putSlidesSlideSize(paramName, paramWidth, paramHeight, paramSizeType, paramScaleType, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesSlideSize", "sizeType");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesSlideSize", "sizeType", paramSizeType);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesSlideSize", "sizeType");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesSlideSize", "sizeType", paramSizeType);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesSlideSize", "sizeType"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesSlideSizeInvalidScaleType) {
	utility::string_t paramName = utils->getTestValue("putSlidesSlideSize", "name");
	auto paramWidth = utils->getOptionalIntTestValue("putSlidesSlideSize", "width");
	auto paramHeight = utils->getOptionalIntTestValue("putSlidesSlideSize", "height");
	utility::string_t paramSizeType = utils->getTestValue("putSlidesSlideSize", "sizeType");
	utility::string_t paramScaleType = utils->getTestValue("putSlidesSlideSize", "scaleType");
	utility::string_t paramPassword = utils->getTestValue("putSlidesSlideSize", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlidesSlideSize", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlidesSlideSize", "storage");
	paramScaleType = utils->getInvalidTestValue("putSlidesSlideSize", "scaleType", paramScaleType);
	utils->initialize("putSlidesSlideSize", "scaleType", paramScaleType);

	bool failed = true;
	try
	{
		api->putSlidesSlideSize(paramName, paramWidth, paramHeight, paramSizeType, paramScaleType, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesSlideSize", "scaleType");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesSlideSize", "scaleType", paramScaleType);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesSlideSize", "scaleType");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesSlideSize", "scaleType", paramScaleType);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesSlideSize", "scaleType"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesSlideSizeInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("putSlidesSlideSize", "name");
	auto paramWidth = utils->getOptionalIntTestValue("putSlidesSlideSize", "width");
	auto paramHeight = utils->getOptionalIntTestValue("putSlidesSlideSize", "height");
	utility::string_t paramSizeType = utils->getTestValue("putSlidesSlideSize", "sizeType");
	utility::string_t paramScaleType = utils->getTestValue("putSlidesSlideSize", "scaleType");
	utility::string_t paramPassword = utils->getTestValue("putSlidesSlideSize", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlidesSlideSize", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlidesSlideSize", "storage");
	paramPassword = utils->getInvalidTestValue("putSlidesSlideSize", "password", paramPassword);
	utils->initialize("putSlidesSlideSize", "password", paramPassword);

	bool failed = true;
	try
	{
		api->putSlidesSlideSize(paramName, paramWidth, paramHeight, paramSizeType, paramScaleType, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesSlideSize", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesSlideSize", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesSlideSize", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesSlideSize", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesSlideSize", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesSlideSizeInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("putSlidesSlideSize", "name");
	auto paramWidth = utils->getOptionalIntTestValue("putSlidesSlideSize", "width");
	auto paramHeight = utils->getOptionalIntTestValue("putSlidesSlideSize", "height");
	utility::string_t paramSizeType = utils->getTestValue("putSlidesSlideSize", "sizeType");
	utility::string_t paramScaleType = utils->getTestValue("putSlidesSlideSize", "scaleType");
	utility::string_t paramPassword = utils->getTestValue("putSlidesSlideSize", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlidesSlideSize", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlidesSlideSize", "storage");
	paramFolder = utils->getInvalidTestValue("putSlidesSlideSize", "folder", paramFolder);
	utils->initialize("putSlidesSlideSize", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->putSlidesSlideSize(paramName, paramWidth, paramHeight, paramSizeType, paramScaleType, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesSlideSize", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesSlideSize", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesSlideSize", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesSlideSize", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesSlideSize", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesSlideSizeInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("putSlidesSlideSize", "name");
	auto paramWidth = utils->getOptionalIntTestValue("putSlidesSlideSize", "width");
	auto paramHeight = utils->getOptionalIntTestValue("putSlidesSlideSize", "height");
	utility::string_t paramSizeType = utils->getTestValue("putSlidesSlideSize", "sizeType");
	utility::string_t paramScaleType = utils->getTestValue("putSlidesSlideSize", "scaleType");
	utility::string_t paramPassword = utils->getTestValue("putSlidesSlideSize", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlidesSlideSize", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlidesSlideSize", "storage");
	paramStorage = utils->getInvalidTestValue("putSlidesSlideSize", "storage", paramStorage);
	utils->initialize("putSlidesSlideSize", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->putSlidesSlideSize(paramName, paramWidth, paramHeight, paramSizeType, paramScaleType, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesSlideSize", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesSlideSize", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesSlideSize", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesSlideSize", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesSlideSize", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesViewProperties) {
	utility::string_t paramName = utils->getTestValue("putSlidesViewProperties", "name");
	std::shared_ptr<ViewProperties> paramDto = utils->getTestValueForClass<ViewProperties>("putSlidesViewProperties", "dto");
	utility::string_t paramPassword = utils->getTestValue("putSlidesViewProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlidesViewProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlidesViewProperties", "storage");
	utils->initialize("putSlidesViewProperties", "");
	std::shared_ptr<ViewProperties> result = api->setViewProperties(paramName, paramDto, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, putSlidesViewPropertiesInvalidName) {
	utility::string_t paramName = utils->getTestValue("putSlidesViewProperties", "name");
	std::shared_ptr<ViewProperties> paramDto = utils->getTestValueForClass<ViewProperties>("putSlidesViewProperties", "dto");
	utility::string_t paramPassword = utils->getTestValue("putSlidesViewProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlidesViewProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlidesViewProperties", "storage");
	paramName = utils->getInvalidTestValue("putSlidesViewProperties", "name", paramName);
	utils->initialize("putSlidesViewProperties", "name", paramName);

	bool failed = true;
	try
	{
		api->setViewProperties(paramName, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesViewProperties", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesViewProperties", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesViewProperties", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesViewProperties", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesViewProperties", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesViewPropertiesInvalidDto) {
	utility::string_t paramName = utils->getTestValue("putSlidesViewProperties", "name");
	std::shared_ptr<ViewProperties> paramDto = utils->getTestValueForClass<ViewProperties>("putSlidesViewProperties", "dto");
	utility::string_t paramPassword = utils->getTestValue("putSlidesViewProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlidesViewProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlidesViewProperties", "storage");
	paramDto = utils->getInvalidTestValueForClass<>("putSlidesViewProperties", "dto", paramDto);
	utils->initialize("putSlidesViewProperties", "dto", paramDto);

	bool failed = true;
	try
	{
		api->setViewProperties(paramName, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesViewProperties", "dto");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesViewProperties", "dto", paramDto);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesViewProperties", "dto");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesViewProperties", "dto", paramDto);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesViewProperties", "dto"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesViewPropertiesInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("putSlidesViewProperties", "name");
	std::shared_ptr<ViewProperties> paramDto = utils->getTestValueForClass<ViewProperties>("putSlidesViewProperties", "dto");
	utility::string_t paramPassword = utils->getTestValue("putSlidesViewProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlidesViewProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlidesViewProperties", "storage");
	paramPassword = utils->getInvalidTestValue("putSlidesViewProperties", "password", paramPassword);
	utils->initialize("putSlidesViewProperties", "password", paramPassword);

	bool failed = true;
	try
	{
		api->setViewProperties(paramName, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesViewProperties", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesViewProperties", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesViewProperties", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesViewProperties", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesViewProperties", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesViewPropertiesInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("putSlidesViewProperties", "name");
	std::shared_ptr<ViewProperties> paramDto = utils->getTestValueForClass<ViewProperties>("putSlidesViewProperties", "dto");
	utility::string_t paramPassword = utils->getTestValue("putSlidesViewProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlidesViewProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlidesViewProperties", "storage");
	paramFolder = utils->getInvalidTestValue("putSlidesViewProperties", "folder", paramFolder);
	utils->initialize("putSlidesViewProperties", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->setViewProperties(paramName, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesViewProperties", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesViewProperties", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesViewProperties", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesViewProperties", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesViewProperties", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesViewPropertiesInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("putSlidesViewProperties", "name");
	std::shared_ptr<ViewProperties> paramDto = utils->getTestValueForClass<ViewProperties>("putSlidesViewProperties", "dto");
	utility::string_t paramPassword = utils->getTestValue("putSlidesViewProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("putSlidesViewProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSlidesViewProperties", "storage");
	paramStorage = utils->getInvalidTestValue("putSlidesViewProperties", "storage", paramStorage);
	utils->initialize("putSlidesViewProperties", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->setViewProperties(paramName, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesViewProperties", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesViewProperties", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesViewProperties", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesViewProperties", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesViewProperties", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSubshapeSaveAs) {
	utility::string_t paramName = utils->getTestValue("putSubshapeSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSubshapeSaveAs", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("putSubshapeSaveAs", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("putSubshapeSaveAs", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("putSubshapeSaveAs", "format");
	utility::string_t paramOutPath = utils->getTestValue("putSubshapeSaveAs", "outPath");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("putSubshapeSaveAs", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("putSubshapeSaveAs", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("putSubshapeSaveAs", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("putSubshapeSaveAs", "bounds");
	utility::string_t paramPassword = utils->getTestValue("putSubshapeSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("putSubshapeSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSubshapeSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("putSubshapeSaveAs", "fontsFolder");
	utils->initialize("putSubshapeSaveAs", "");
	api->saveSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
}

TEST_F(SlidesApiTest, putSubshapeSaveAsInvalidName) {
	utility::string_t paramName = utils->getTestValue("putSubshapeSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSubshapeSaveAs", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("putSubshapeSaveAs", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("putSubshapeSaveAs", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("putSubshapeSaveAs", "format");
	utility::string_t paramOutPath = utils->getTestValue("putSubshapeSaveAs", "outPath");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("putSubshapeSaveAs", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("putSubshapeSaveAs", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("putSubshapeSaveAs", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("putSubshapeSaveAs", "bounds");
	utility::string_t paramPassword = utils->getTestValue("putSubshapeSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("putSubshapeSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSubshapeSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("putSubshapeSaveAs", "fontsFolder");
	paramName = utils->getInvalidTestValue("putSubshapeSaveAs", "name", paramName);
	utils->initialize("putSubshapeSaveAs", "name", paramName);

	bool failed = true;
	try
	{
		api->saveSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSubshapeSaveAs", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSubshapeSaveAs", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSubshapeSaveAs", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSubshapeSaveAs", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSubshapeSaveAs", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSubshapeSaveAsInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("putSubshapeSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSubshapeSaveAs", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("putSubshapeSaveAs", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("putSubshapeSaveAs", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("putSubshapeSaveAs", "format");
	utility::string_t paramOutPath = utils->getTestValue("putSubshapeSaveAs", "outPath");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("putSubshapeSaveAs", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("putSubshapeSaveAs", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("putSubshapeSaveAs", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("putSubshapeSaveAs", "bounds");
	utility::string_t paramPassword = utils->getTestValue("putSubshapeSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("putSubshapeSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSubshapeSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("putSubshapeSaveAs", "fontsFolder");
	paramSlideIndex = utils->getInvalidIntTestValue("putSubshapeSaveAs", "slideIndex", paramSlideIndex).value();
	utils->initialize("putSubshapeSaveAs", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->saveSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSubshapeSaveAs", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSubshapeSaveAs", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSubshapeSaveAs", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSubshapeSaveAs", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSubshapeSaveAs", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSubshapeSaveAsInvalidPath) {
	utility::string_t paramName = utils->getTestValue("putSubshapeSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSubshapeSaveAs", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("putSubshapeSaveAs", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("putSubshapeSaveAs", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("putSubshapeSaveAs", "format");
	utility::string_t paramOutPath = utils->getTestValue("putSubshapeSaveAs", "outPath");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("putSubshapeSaveAs", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("putSubshapeSaveAs", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("putSubshapeSaveAs", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("putSubshapeSaveAs", "bounds");
	utility::string_t paramPassword = utils->getTestValue("putSubshapeSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("putSubshapeSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSubshapeSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("putSubshapeSaveAs", "fontsFolder");
	paramPath = utils->getInvalidTestValue("putSubshapeSaveAs", "path", paramPath);
	utils->initialize("putSubshapeSaveAs", "path", paramPath);

	bool failed = true;
	try
	{
		api->saveSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSubshapeSaveAs", "path");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSubshapeSaveAs", "path", paramPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSubshapeSaveAs", "path");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSubshapeSaveAs", "path", paramPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSubshapeSaveAs", "path"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSubshapeSaveAsInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("putSubshapeSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSubshapeSaveAs", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("putSubshapeSaveAs", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("putSubshapeSaveAs", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("putSubshapeSaveAs", "format");
	utility::string_t paramOutPath = utils->getTestValue("putSubshapeSaveAs", "outPath");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("putSubshapeSaveAs", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("putSubshapeSaveAs", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("putSubshapeSaveAs", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("putSubshapeSaveAs", "bounds");
	utility::string_t paramPassword = utils->getTestValue("putSubshapeSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("putSubshapeSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSubshapeSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("putSubshapeSaveAs", "fontsFolder");
	paramShapeIndex = utils->getInvalidIntTestValue("putSubshapeSaveAs", "shapeIndex", paramShapeIndex).value();
	utils->initialize("putSubshapeSaveAs", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->saveSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSubshapeSaveAs", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSubshapeSaveAs", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSubshapeSaveAs", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSubshapeSaveAs", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSubshapeSaveAs", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSubshapeSaveAsInvalidFormat) {
	utility::string_t paramName = utils->getTestValue("putSubshapeSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSubshapeSaveAs", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("putSubshapeSaveAs", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("putSubshapeSaveAs", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("putSubshapeSaveAs", "format");
	utility::string_t paramOutPath = utils->getTestValue("putSubshapeSaveAs", "outPath");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("putSubshapeSaveAs", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("putSubshapeSaveAs", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("putSubshapeSaveAs", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("putSubshapeSaveAs", "bounds");
	utility::string_t paramPassword = utils->getTestValue("putSubshapeSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("putSubshapeSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSubshapeSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("putSubshapeSaveAs", "fontsFolder");
	paramFormat = utils->getInvalidTestValue("putSubshapeSaveAs", "format", paramFormat);
	utils->initialize("putSubshapeSaveAs", "format", paramFormat);

	bool failed = true;
	try
	{
		api->saveSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSubshapeSaveAs", "format");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSubshapeSaveAs", "format", paramFormat);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSubshapeSaveAs", "format");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSubshapeSaveAs", "format", paramFormat);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSubshapeSaveAs", "format"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSubshapeSaveAsInvalidOutPath) {
	utility::string_t paramName = utils->getTestValue("putSubshapeSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSubshapeSaveAs", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("putSubshapeSaveAs", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("putSubshapeSaveAs", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("putSubshapeSaveAs", "format");
	utility::string_t paramOutPath = utils->getTestValue("putSubshapeSaveAs", "outPath");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("putSubshapeSaveAs", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("putSubshapeSaveAs", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("putSubshapeSaveAs", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("putSubshapeSaveAs", "bounds");
	utility::string_t paramPassword = utils->getTestValue("putSubshapeSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("putSubshapeSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSubshapeSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("putSubshapeSaveAs", "fontsFolder");
	paramOutPath = utils->getInvalidTestValue("putSubshapeSaveAs", "outPath", paramOutPath);
	utils->initialize("putSubshapeSaveAs", "outPath", paramOutPath);

	bool failed = true;
	try
	{
		api->saveSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSubshapeSaveAs", "outPath");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSubshapeSaveAs", "outPath", paramOutPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSubshapeSaveAs", "outPath");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSubshapeSaveAs", "outPath", paramOutPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSubshapeSaveAs", "outPath"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSubshapeSaveAsInvalidOptions) {
	utility::string_t paramName = utils->getTestValue("putSubshapeSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSubshapeSaveAs", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("putSubshapeSaveAs", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("putSubshapeSaveAs", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("putSubshapeSaveAs", "format");
	utility::string_t paramOutPath = utils->getTestValue("putSubshapeSaveAs", "outPath");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("putSubshapeSaveAs", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("putSubshapeSaveAs", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("putSubshapeSaveAs", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("putSubshapeSaveAs", "bounds");
	utility::string_t paramPassword = utils->getTestValue("putSubshapeSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("putSubshapeSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSubshapeSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("putSubshapeSaveAs", "fontsFolder");
	paramOptions = utils->getInvalidTestValueForClass<>("putSubshapeSaveAs", "options", paramOptions);
	utils->initialize("putSubshapeSaveAs", "options", paramOptions);

	bool failed = true;
	try
	{
		api->saveSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSubshapeSaveAs", "options");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSubshapeSaveAs", "options", paramOptions);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSubshapeSaveAs", "options");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSubshapeSaveAs", "options", paramOptions);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSubshapeSaveAs", "options"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSubshapeSaveAsInvalidScaleX) {
	utility::string_t paramName = utils->getTestValue("putSubshapeSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSubshapeSaveAs", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("putSubshapeSaveAs", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("putSubshapeSaveAs", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("putSubshapeSaveAs", "format");
	utility::string_t paramOutPath = utils->getTestValue("putSubshapeSaveAs", "outPath");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("putSubshapeSaveAs", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("putSubshapeSaveAs", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("putSubshapeSaveAs", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("putSubshapeSaveAs", "bounds");
	utility::string_t paramPassword = utils->getTestValue("putSubshapeSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("putSubshapeSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSubshapeSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("putSubshapeSaveAs", "fontsFolder");
	paramScaleX = utils->getInvalidDoubleTestValue("putSubshapeSaveAs", "scaleX", paramScaleX).value();
	utils->initialize("putSubshapeSaveAs", "scaleX", paramScaleX);

	bool failed = true;
	try
	{
		api->saveSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSubshapeSaveAs", "scaleX");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSubshapeSaveAs", "scaleX", paramScaleX);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSubshapeSaveAs", "scaleX");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSubshapeSaveAs", "scaleX", paramScaleX);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSubshapeSaveAs", "scaleX"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSubshapeSaveAsInvalidScaleY) {
	utility::string_t paramName = utils->getTestValue("putSubshapeSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSubshapeSaveAs", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("putSubshapeSaveAs", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("putSubshapeSaveAs", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("putSubshapeSaveAs", "format");
	utility::string_t paramOutPath = utils->getTestValue("putSubshapeSaveAs", "outPath");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("putSubshapeSaveAs", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("putSubshapeSaveAs", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("putSubshapeSaveAs", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("putSubshapeSaveAs", "bounds");
	utility::string_t paramPassword = utils->getTestValue("putSubshapeSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("putSubshapeSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSubshapeSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("putSubshapeSaveAs", "fontsFolder");
	paramScaleY = utils->getInvalidDoubleTestValue("putSubshapeSaveAs", "scaleY", paramScaleY).value();
	utils->initialize("putSubshapeSaveAs", "scaleY", paramScaleY);

	bool failed = true;
	try
	{
		api->saveSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSubshapeSaveAs", "scaleY");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSubshapeSaveAs", "scaleY", paramScaleY);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSubshapeSaveAs", "scaleY");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSubshapeSaveAs", "scaleY", paramScaleY);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSubshapeSaveAs", "scaleY"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSubshapeSaveAsInvalidBounds) {
	utility::string_t paramName = utils->getTestValue("putSubshapeSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSubshapeSaveAs", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("putSubshapeSaveAs", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("putSubshapeSaveAs", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("putSubshapeSaveAs", "format");
	utility::string_t paramOutPath = utils->getTestValue("putSubshapeSaveAs", "outPath");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("putSubshapeSaveAs", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("putSubshapeSaveAs", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("putSubshapeSaveAs", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("putSubshapeSaveAs", "bounds");
	utility::string_t paramPassword = utils->getTestValue("putSubshapeSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("putSubshapeSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSubshapeSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("putSubshapeSaveAs", "fontsFolder");
	paramBounds = utils->getInvalidTestValue("putSubshapeSaveAs", "bounds", paramBounds);
	utils->initialize("putSubshapeSaveAs", "bounds", paramBounds);

	bool failed = true;
	try
	{
		api->saveSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSubshapeSaveAs", "bounds");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSubshapeSaveAs", "bounds", paramBounds);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSubshapeSaveAs", "bounds");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSubshapeSaveAs", "bounds", paramBounds);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSubshapeSaveAs", "bounds"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSubshapeSaveAsInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("putSubshapeSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSubshapeSaveAs", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("putSubshapeSaveAs", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("putSubshapeSaveAs", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("putSubshapeSaveAs", "format");
	utility::string_t paramOutPath = utils->getTestValue("putSubshapeSaveAs", "outPath");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("putSubshapeSaveAs", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("putSubshapeSaveAs", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("putSubshapeSaveAs", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("putSubshapeSaveAs", "bounds");
	utility::string_t paramPassword = utils->getTestValue("putSubshapeSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("putSubshapeSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSubshapeSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("putSubshapeSaveAs", "fontsFolder");
	paramPassword = utils->getInvalidTestValue("putSubshapeSaveAs", "password", paramPassword);
	utils->initialize("putSubshapeSaveAs", "password", paramPassword);

	bool failed = true;
	try
	{
		api->saveSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSubshapeSaveAs", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSubshapeSaveAs", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSubshapeSaveAs", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSubshapeSaveAs", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSubshapeSaveAs", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSubshapeSaveAsInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("putSubshapeSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSubshapeSaveAs", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("putSubshapeSaveAs", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("putSubshapeSaveAs", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("putSubshapeSaveAs", "format");
	utility::string_t paramOutPath = utils->getTestValue("putSubshapeSaveAs", "outPath");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("putSubshapeSaveAs", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("putSubshapeSaveAs", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("putSubshapeSaveAs", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("putSubshapeSaveAs", "bounds");
	utility::string_t paramPassword = utils->getTestValue("putSubshapeSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("putSubshapeSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSubshapeSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("putSubshapeSaveAs", "fontsFolder");
	paramFolder = utils->getInvalidTestValue("putSubshapeSaveAs", "folder", paramFolder);
	utils->initialize("putSubshapeSaveAs", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->saveSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSubshapeSaveAs", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSubshapeSaveAs", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSubshapeSaveAs", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSubshapeSaveAs", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSubshapeSaveAs", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSubshapeSaveAsInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("putSubshapeSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSubshapeSaveAs", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("putSubshapeSaveAs", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("putSubshapeSaveAs", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("putSubshapeSaveAs", "format");
	utility::string_t paramOutPath = utils->getTestValue("putSubshapeSaveAs", "outPath");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("putSubshapeSaveAs", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("putSubshapeSaveAs", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("putSubshapeSaveAs", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("putSubshapeSaveAs", "bounds");
	utility::string_t paramPassword = utils->getTestValue("putSubshapeSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("putSubshapeSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSubshapeSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("putSubshapeSaveAs", "fontsFolder");
	paramStorage = utils->getInvalidTestValue("putSubshapeSaveAs", "storage", paramStorage);
	utils->initialize("putSubshapeSaveAs", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->saveSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSubshapeSaveAs", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSubshapeSaveAs", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSubshapeSaveAs", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSubshapeSaveAs", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSubshapeSaveAs", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSubshapeSaveAsInvalidFontsFolder) {
	utility::string_t paramName = utils->getTestValue("putSubshapeSaveAs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putSubshapeSaveAs", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("putSubshapeSaveAs", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("putSubshapeSaveAs", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("putSubshapeSaveAs", "format");
	utility::string_t paramOutPath = utils->getTestValue("putSubshapeSaveAs", "outPath");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("putSubshapeSaveAs", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("putSubshapeSaveAs", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("putSubshapeSaveAs", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("putSubshapeSaveAs", "bounds");
	utility::string_t paramPassword = utils->getTestValue("putSubshapeSaveAs", "password");
	utility::string_t paramFolder = utils->getTestValue("putSubshapeSaveAs", "folder");
	utility::string_t paramStorage = utils->getTestValue("putSubshapeSaveAs", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("putSubshapeSaveAs", "fontsFolder");
	paramFontsFolder = utils->getInvalidTestValue("putSubshapeSaveAs", "fontsFolder", paramFontsFolder);
	utils->initialize("putSubshapeSaveAs", "fontsFolder", paramFontsFolder);

	bool failed = true;
	try
	{
		api->saveSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSubshapeSaveAs", "fontsFolder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSubshapeSaveAs", "fontsFolder", paramFontsFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSubshapeSaveAs", "fontsFolder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSubshapeSaveAs", "fontsFolder", paramFontsFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSubshapeSaveAs", "fontsFolder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putUpdateNotesSlide) {
	utility::string_t paramName = utils->getTestValue("putUpdateNotesSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putUpdateNotesSlide", "slideIndex");
	std::shared_ptr<NotesSlide> paramDto = utils->getTestValueForClass<NotesSlide>("putUpdateNotesSlide", "dto");
	utility::string_t paramPassword = utils->getTestValue("putUpdateNotesSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("putUpdateNotesSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("putUpdateNotesSlide", "storage");
	utils->initialize("putUpdateNotesSlide", "");
	std::shared_ptr<NotesSlide> result = api->updateNotesSlide(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, putUpdateNotesSlideInvalidName) {
	utility::string_t paramName = utils->getTestValue("putUpdateNotesSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putUpdateNotesSlide", "slideIndex");
	std::shared_ptr<NotesSlide> paramDto = utils->getTestValueForClass<NotesSlide>("putUpdateNotesSlide", "dto");
	utility::string_t paramPassword = utils->getTestValue("putUpdateNotesSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("putUpdateNotesSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("putUpdateNotesSlide", "storage");
	paramName = utils->getInvalidTestValue("putUpdateNotesSlide", "name", paramName);
	utils->initialize("putUpdateNotesSlide", "name", paramName);

	bool failed = true;
	try
	{
		api->updateNotesSlide(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlide", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlide", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlide", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlide", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putUpdateNotesSlide", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putUpdateNotesSlideInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("putUpdateNotesSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putUpdateNotesSlide", "slideIndex");
	std::shared_ptr<NotesSlide> paramDto = utils->getTestValueForClass<NotesSlide>("putUpdateNotesSlide", "dto");
	utility::string_t paramPassword = utils->getTestValue("putUpdateNotesSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("putUpdateNotesSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("putUpdateNotesSlide", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("putUpdateNotesSlide", "slideIndex", paramSlideIndex).value();
	utils->initialize("putUpdateNotesSlide", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->updateNotesSlide(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlide", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlide", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlide", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlide", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putUpdateNotesSlide", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putUpdateNotesSlideInvalidDto) {
	utility::string_t paramName = utils->getTestValue("putUpdateNotesSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putUpdateNotesSlide", "slideIndex");
	std::shared_ptr<NotesSlide> paramDto = utils->getTestValueForClass<NotesSlide>("putUpdateNotesSlide", "dto");
	utility::string_t paramPassword = utils->getTestValue("putUpdateNotesSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("putUpdateNotesSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("putUpdateNotesSlide", "storage");
	paramDto = utils->getInvalidTestValueForClass<>("putUpdateNotesSlide", "dto", paramDto);
	utils->initialize("putUpdateNotesSlide", "dto", paramDto);

	bool failed = true;
	try
	{
		api->updateNotesSlide(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlide", "dto");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlide", "dto", paramDto);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlide", "dto");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlide", "dto", paramDto);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putUpdateNotesSlide", "dto"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putUpdateNotesSlideInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("putUpdateNotesSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putUpdateNotesSlide", "slideIndex");
	std::shared_ptr<NotesSlide> paramDto = utils->getTestValueForClass<NotesSlide>("putUpdateNotesSlide", "dto");
	utility::string_t paramPassword = utils->getTestValue("putUpdateNotesSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("putUpdateNotesSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("putUpdateNotesSlide", "storage");
	paramPassword = utils->getInvalidTestValue("putUpdateNotesSlide", "password", paramPassword);
	utils->initialize("putUpdateNotesSlide", "password", paramPassword);

	bool failed = true;
	try
	{
		api->updateNotesSlide(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlide", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlide", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlide", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlide", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putUpdateNotesSlide", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putUpdateNotesSlideInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("putUpdateNotesSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putUpdateNotesSlide", "slideIndex");
	std::shared_ptr<NotesSlide> paramDto = utils->getTestValueForClass<NotesSlide>("putUpdateNotesSlide", "dto");
	utility::string_t paramPassword = utils->getTestValue("putUpdateNotesSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("putUpdateNotesSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("putUpdateNotesSlide", "storage");
	paramFolder = utils->getInvalidTestValue("putUpdateNotesSlide", "folder", paramFolder);
	utils->initialize("putUpdateNotesSlide", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->updateNotesSlide(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlide", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlide", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlide", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlide", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putUpdateNotesSlide", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putUpdateNotesSlideInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("putUpdateNotesSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putUpdateNotesSlide", "slideIndex");
	std::shared_ptr<NotesSlide> paramDto = utils->getTestValueForClass<NotesSlide>("putUpdateNotesSlide", "dto");
	utility::string_t paramPassword = utils->getTestValue("putUpdateNotesSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("putUpdateNotesSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("putUpdateNotesSlide", "storage");
	paramStorage = utils->getInvalidTestValue("putUpdateNotesSlide", "storage", paramStorage);
	utils->initialize("putUpdateNotesSlide", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->updateNotesSlide(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlide", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlide", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlide", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlide", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putUpdateNotesSlide", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putUpdateNotesSlideShape) {
	utility::string_t paramName = utils->getTestValue("putUpdateNotesSlideShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putUpdateNotesSlideShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putUpdateNotesSlideShape", "shapeIndex");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("putUpdateNotesSlideShape", "dto");
	utility::string_t paramPassword = utils->getTestValue("putUpdateNotesSlideShape", "password");
	utility::string_t paramFolder = utils->getTestValue("putUpdateNotesSlideShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("putUpdateNotesSlideShape", "storage");
	utils->initialize("putUpdateNotesSlideShape", "");
	std::shared_ptr<ShapeBase> result = api->updateNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, putUpdateNotesSlideShapeInvalidName) {
	utility::string_t paramName = utils->getTestValue("putUpdateNotesSlideShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putUpdateNotesSlideShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putUpdateNotesSlideShape", "shapeIndex");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("putUpdateNotesSlideShape", "dto");
	utility::string_t paramPassword = utils->getTestValue("putUpdateNotesSlideShape", "password");
	utility::string_t paramFolder = utils->getTestValue("putUpdateNotesSlideShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("putUpdateNotesSlideShape", "storage");
	paramName = utils->getInvalidTestValue("putUpdateNotesSlideShape", "name", paramName);
	utils->initialize("putUpdateNotesSlideShape", "name", paramName);

	bool failed = true;
	try
	{
		api->updateNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlideShape", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlideShape", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlideShape", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlideShape", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putUpdateNotesSlideShape", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putUpdateNotesSlideShapeInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("putUpdateNotesSlideShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putUpdateNotesSlideShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putUpdateNotesSlideShape", "shapeIndex");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("putUpdateNotesSlideShape", "dto");
	utility::string_t paramPassword = utils->getTestValue("putUpdateNotesSlideShape", "password");
	utility::string_t paramFolder = utils->getTestValue("putUpdateNotesSlideShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("putUpdateNotesSlideShape", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("putUpdateNotesSlideShape", "slideIndex", paramSlideIndex).value();
	utils->initialize("putUpdateNotesSlideShape", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->updateNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlideShape", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlideShape", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlideShape", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlideShape", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putUpdateNotesSlideShape", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putUpdateNotesSlideShapeInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("putUpdateNotesSlideShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putUpdateNotesSlideShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putUpdateNotesSlideShape", "shapeIndex");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("putUpdateNotesSlideShape", "dto");
	utility::string_t paramPassword = utils->getTestValue("putUpdateNotesSlideShape", "password");
	utility::string_t paramFolder = utils->getTestValue("putUpdateNotesSlideShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("putUpdateNotesSlideShape", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("putUpdateNotesSlideShape", "shapeIndex", paramShapeIndex).value();
	utils->initialize("putUpdateNotesSlideShape", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->updateNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlideShape", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlideShape", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlideShape", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlideShape", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putUpdateNotesSlideShape", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putUpdateNotesSlideShapeInvalidDto) {
	utility::string_t paramName = utils->getTestValue("putUpdateNotesSlideShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putUpdateNotesSlideShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putUpdateNotesSlideShape", "shapeIndex");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("putUpdateNotesSlideShape", "dto");
	utility::string_t paramPassword = utils->getTestValue("putUpdateNotesSlideShape", "password");
	utility::string_t paramFolder = utils->getTestValue("putUpdateNotesSlideShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("putUpdateNotesSlideShape", "storage");
	paramDto = utils->getInvalidTestValueForClass<>("putUpdateNotesSlideShape", "dto", paramDto);
	utils->initialize("putUpdateNotesSlideShape", "dto", paramDto);

	bool failed = true;
	try
	{
		api->updateNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlideShape", "dto");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlideShape", "dto", paramDto);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlideShape", "dto");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlideShape", "dto", paramDto);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putUpdateNotesSlideShape", "dto"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putUpdateNotesSlideShapeInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("putUpdateNotesSlideShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putUpdateNotesSlideShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putUpdateNotesSlideShape", "shapeIndex");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("putUpdateNotesSlideShape", "dto");
	utility::string_t paramPassword = utils->getTestValue("putUpdateNotesSlideShape", "password");
	utility::string_t paramFolder = utils->getTestValue("putUpdateNotesSlideShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("putUpdateNotesSlideShape", "storage");
	paramPassword = utils->getInvalidTestValue("putUpdateNotesSlideShape", "password", paramPassword);
	utils->initialize("putUpdateNotesSlideShape", "password", paramPassword);

	bool failed = true;
	try
	{
		api->updateNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlideShape", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlideShape", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlideShape", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlideShape", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putUpdateNotesSlideShape", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putUpdateNotesSlideShapeInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("putUpdateNotesSlideShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putUpdateNotesSlideShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putUpdateNotesSlideShape", "shapeIndex");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("putUpdateNotesSlideShape", "dto");
	utility::string_t paramPassword = utils->getTestValue("putUpdateNotesSlideShape", "password");
	utility::string_t paramFolder = utils->getTestValue("putUpdateNotesSlideShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("putUpdateNotesSlideShape", "storage");
	paramFolder = utils->getInvalidTestValue("putUpdateNotesSlideShape", "folder", paramFolder);
	utils->initialize("putUpdateNotesSlideShape", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->updateNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlideShape", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlideShape", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlideShape", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlideShape", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putUpdateNotesSlideShape", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putUpdateNotesSlideShapeInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("putUpdateNotesSlideShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putUpdateNotesSlideShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putUpdateNotesSlideShape", "shapeIndex");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("putUpdateNotesSlideShape", "dto");
	utility::string_t paramPassword = utils->getTestValue("putUpdateNotesSlideShape", "password");
	utility::string_t paramFolder = utils->getTestValue("putUpdateNotesSlideShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("putUpdateNotesSlideShape", "storage");
	paramStorage = utils->getInvalidTestValue("putUpdateNotesSlideShape", "storage", paramStorage);
	utils->initialize("putUpdateNotesSlideShape", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->updateNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlideShape", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlideShape", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlideShape", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlideShape", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putUpdateNotesSlideShape", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putUpdateNotesSlideShapeParagraph) {
	utility::string_t paramName = utils->getTestValue("putUpdateNotesSlideShapeParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putUpdateNotesSlideShapeParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putUpdateNotesSlideShapeParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("putUpdateNotesSlideShapeParagraph", "paragraphIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("putUpdateNotesSlideShapeParagraph", "dto");
	utility::string_t paramPassword = utils->getTestValue("putUpdateNotesSlideShapeParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("putUpdateNotesSlideShapeParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("putUpdateNotesSlideShapeParagraph", "storage");
	utils->initialize("putUpdateNotesSlideShapeParagraph", "");
	std::shared_ptr<Paragraph> result = api->updateNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, putUpdateNotesSlideShapeParagraphInvalidName) {
	utility::string_t paramName = utils->getTestValue("putUpdateNotesSlideShapeParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putUpdateNotesSlideShapeParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putUpdateNotesSlideShapeParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("putUpdateNotesSlideShapeParagraph", "paragraphIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("putUpdateNotesSlideShapeParagraph", "dto");
	utility::string_t paramPassword = utils->getTestValue("putUpdateNotesSlideShapeParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("putUpdateNotesSlideShapeParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("putUpdateNotesSlideShapeParagraph", "storage");
	paramName = utils->getInvalidTestValue("putUpdateNotesSlideShapeParagraph", "name", paramName);
	utils->initialize("putUpdateNotesSlideShapeParagraph", "name", paramName);

	bool failed = true;
	try
	{
		api->updateNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlideShapeParagraph", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlideShapeParagraph", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlideShapeParagraph", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlideShapeParagraph", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putUpdateNotesSlideShapeParagraph", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putUpdateNotesSlideShapeParagraphInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("putUpdateNotesSlideShapeParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putUpdateNotesSlideShapeParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putUpdateNotesSlideShapeParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("putUpdateNotesSlideShapeParagraph", "paragraphIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("putUpdateNotesSlideShapeParagraph", "dto");
	utility::string_t paramPassword = utils->getTestValue("putUpdateNotesSlideShapeParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("putUpdateNotesSlideShapeParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("putUpdateNotesSlideShapeParagraph", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("putUpdateNotesSlideShapeParagraph", "slideIndex", paramSlideIndex).value();
	utils->initialize("putUpdateNotesSlideShapeParagraph", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->updateNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlideShapeParagraph", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlideShapeParagraph", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlideShapeParagraph", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlideShapeParagraph", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putUpdateNotesSlideShapeParagraph", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putUpdateNotesSlideShapeParagraphInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("putUpdateNotesSlideShapeParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putUpdateNotesSlideShapeParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putUpdateNotesSlideShapeParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("putUpdateNotesSlideShapeParagraph", "paragraphIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("putUpdateNotesSlideShapeParagraph", "dto");
	utility::string_t paramPassword = utils->getTestValue("putUpdateNotesSlideShapeParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("putUpdateNotesSlideShapeParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("putUpdateNotesSlideShapeParagraph", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("putUpdateNotesSlideShapeParagraph", "shapeIndex", paramShapeIndex).value();
	utils->initialize("putUpdateNotesSlideShapeParagraph", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->updateNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlideShapeParagraph", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlideShapeParagraph", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlideShapeParagraph", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlideShapeParagraph", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putUpdateNotesSlideShapeParagraph", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putUpdateNotesSlideShapeParagraphInvalidParagraphIndex) {
	utility::string_t paramName = utils->getTestValue("putUpdateNotesSlideShapeParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putUpdateNotesSlideShapeParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putUpdateNotesSlideShapeParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("putUpdateNotesSlideShapeParagraph", "paragraphIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("putUpdateNotesSlideShapeParagraph", "dto");
	utility::string_t paramPassword = utils->getTestValue("putUpdateNotesSlideShapeParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("putUpdateNotesSlideShapeParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("putUpdateNotesSlideShapeParagraph", "storage");
	paramParagraphIndex = utils->getInvalidIntTestValue("putUpdateNotesSlideShapeParagraph", "paragraphIndex", paramParagraphIndex).value();
	utils->initialize("putUpdateNotesSlideShapeParagraph", "paragraphIndex", paramParagraphIndex);

	bool failed = true;
	try
	{
		api->updateNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlideShapeParagraph", "paragraphIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlideShapeParagraph", "paragraphIndex", paramParagraphIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlideShapeParagraph", "paragraphIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlideShapeParagraph", "paragraphIndex", paramParagraphIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putUpdateNotesSlideShapeParagraph", "paragraphIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putUpdateNotesSlideShapeParagraphInvalidDto) {
	utility::string_t paramName = utils->getTestValue("putUpdateNotesSlideShapeParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putUpdateNotesSlideShapeParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putUpdateNotesSlideShapeParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("putUpdateNotesSlideShapeParagraph", "paragraphIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("putUpdateNotesSlideShapeParagraph", "dto");
	utility::string_t paramPassword = utils->getTestValue("putUpdateNotesSlideShapeParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("putUpdateNotesSlideShapeParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("putUpdateNotesSlideShapeParagraph", "storage");
	paramDto = utils->getInvalidTestValueForClass<>("putUpdateNotesSlideShapeParagraph", "dto", paramDto);
	utils->initialize("putUpdateNotesSlideShapeParagraph", "dto", paramDto);

	bool failed = true;
	try
	{
		api->updateNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlideShapeParagraph", "dto");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlideShapeParagraph", "dto", paramDto);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlideShapeParagraph", "dto");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlideShapeParagraph", "dto", paramDto);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putUpdateNotesSlideShapeParagraph", "dto"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putUpdateNotesSlideShapeParagraphInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("putUpdateNotesSlideShapeParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putUpdateNotesSlideShapeParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putUpdateNotesSlideShapeParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("putUpdateNotesSlideShapeParagraph", "paragraphIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("putUpdateNotesSlideShapeParagraph", "dto");
	utility::string_t paramPassword = utils->getTestValue("putUpdateNotesSlideShapeParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("putUpdateNotesSlideShapeParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("putUpdateNotesSlideShapeParagraph", "storage");
	paramPassword = utils->getInvalidTestValue("putUpdateNotesSlideShapeParagraph", "password", paramPassword);
	utils->initialize("putUpdateNotesSlideShapeParagraph", "password", paramPassword);

	bool failed = true;
	try
	{
		api->updateNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlideShapeParagraph", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlideShapeParagraph", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlideShapeParagraph", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlideShapeParagraph", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putUpdateNotesSlideShapeParagraph", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putUpdateNotesSlideShapeParagraphInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("putUpdateNotesSlideShapeParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putUpdateNotesSlideShapeParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putUpdateNotesSlideShapeParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("putUpdateNotesSlideShapeParagraph", "paragraphIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("putUpdateNotesSlideShapeParagraph", "dto");
	utility::string_t paramPassword = utils->getTestValue("putUpdateNotesSlideShapeParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("putUpdateNotesSlideShapeParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("putUpdateNotesSlideShapeParagraph", "storage");
	paramFolder = utils->getInvalidTestValue("putUpdateNotesSlideShapeParagraph", "folder", paramFolder);
	utils->initialize("putUpdateNotesSlideShapeParagraph", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->updateNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlideShapeParagraph", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlideShapeParagraph", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlideShapeParagraph", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlideShapeParagraph", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putUpdateNotesSlideShapeParagraph", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putUpdateNotesSlideShapeParagraphInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("putUpdateNotesSlideShapeParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putUpdateNotesSlideShapeParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putUpdateNotesSlideShapeParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("putUpdateNotesSlideShapeParagraph", "paragraphIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("putUpdateNotesSlideShapeParagraph", "dto");
	utility::string_t paramPassword = utils->getTestValue("putUpdateNotesSlideShapeParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("putUpdateNotesSlideShapeParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("putUpdateNotesSlideShapeParagraph", "storage");
	paramStorage = utils->getInvalidTestValue("putUpdateNotesSlideShapeParagraph", "storage", paramStorage);
	utils->initialize("putUpdateNotesSlideShapeParagraph", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->updateNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlideShapeParagraph", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlideShapeParagraph", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlideShapeParagraph", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlideShapeParagraph", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putUpdateNotesSlideShapeParagraph", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putUpdateNotesSlideShapePortion) {
	utility::string_t paramName = utils->getTestValue("putUpdateNotesSlideShapePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putUpdateNotesSlideShapePortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putUpdateNotesSlideShapePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("putUpdateNotesSlideShapePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("putUpdateNotesSlideShapePortion", "portionIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("putUpdateNotesSlideShapePortion", "dto");
	utility::string_t paramPassword = utils->getTestValue("putUpdateNotesSlideShapePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("putUpdateNotesSlideShapePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("putUpdateNotesSlideShapePortion", "storage");
	utils->initialize("putUpdateNotesSlideShapePortion", "");
	std::shared_ptr<Portion> result = api->updateNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, putUpdateNotesSlideShapePortionInvalidName) {
	utility::string_t paramName = utils->getTestValue("putUpdateNotesSlideShapePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putUpdateNotesSlideShapePortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putUpdateNotesSlideShapePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("putUpdateNotesSlideShapePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("putUpdateNotesSlideShapePortion", "portionIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("putUpdateNotesSlideShapePortion", "dto");
	utility::string_t paramPassword = utils->getTestValue("putUpdateNotesSlideShapePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("putUpdateNotesSlideShapePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("putUpdateNotesSlideShapePortion", "storage");
	paramName = utils->getInvalidTestValue("putUpdateNotesSlideShapePortion", "name", paramName);
	utils->initialize("putUpdateNotesSlideShapePortion", "name", paramName);

	bool failed = true;
	try
	{
		api->updateNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlideShapePortion", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlideShapePortion", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlideShapePortion", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlideShapePortion", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putUpdateNotesSlideShapePortion", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putUpdateNotesSlideShapePortionInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("putUpdateNotesSlideShapePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putUpdateNotesSlideShapePortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putUpdateNotesSlideShapePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("putUpdateNotesSlideShapePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("putUpdateNotesSlideShapePortion", "portionIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("putUpdateNotesSlideShapePortion", "dto");
	utility::string_t paramPassword = utils->getTestValue("putUpdateNotesSlideShapePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("putUpdateNotesSlideShapePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("putUpdateNotesSlideShapePortion", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("putUpdateNotesSlideShapePortion", "slideIndex", paramSlideIndex).value();
	utils->initialize("putUpdateNotesSlideShapePortion", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->updateNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlideShapePortion", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlideShapePortion", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlideShapePortion", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlideShapePortion", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putUpdateNotesSlideShapePortion", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putUpdateNotesSlideShapePortionInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("putUpdateNotesSlideShapePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putUpdateNotesSlideShapePortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putUpdateNotesSlideShapePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("putUpdateNotesSlideShapePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("putUpdateNotesSlideShapePortion", "portionIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("putUpdateNotesSlideShapePortion", "dto");
	utility::string_t paramPassword = utils->getTestValue("putUpdateNotesSlideShapePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("putUpdateNotesSlideShapePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("putUpdateNotesSlideShapePortion", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("putUpdateNotesSlideShapePortion", "shapeIndex", paramShapeIndex).value();
	utils->initialize("putUpdateNotesSlideShapePortion", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->updateNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlideShapePortion", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlideShapePortion", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlideShapePortion", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlideShapePortion", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putUpdateNotesSlideShapePortion", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putUpdateNotesSlideShapePortionInvalidParagraphIndex) {
	utility::string_t paramName = utils->getTestValue("putUpdateNotesSlideShapePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putUpdateNotesSlideShapePortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putUpdateNotesSlideShapePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("putUpdateNotesSlideShapePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("putUpdateNotesSlideShapePortion", "portionIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("putUpdateNotesSlideShapePortion", "dto");
	utility::string_t paramPassword = utils->getTestValue("putUpdateNotesSlideShapePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("putUpdateNotesSlideShapePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("putUpdateNotesSlideShapePortion", "storage");
	paramParagraphIndex = utils->getInvalidIntTestValue("putUpdateNotesSlideShapePortion", "paragraphIndex", paramParagraphIndex).value();
	utils->initialize("putUpdateNotesSlideShapePortion", "paragraphIndex", paramParagraphIndex);

	bool failed = true;
	try
	{
		api->updateNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlideShapePortion", "paragraphIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlideShapePortion", "paragraphIndex", paramParagraphIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlideShapePortion", "paragraphIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlideShapePortion", "paragraphIndex", paramParagraphIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putUpdateNotesSlideShapePortion", "paragraphIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putUpdateNotesSlideShapePortionInvalidPortionIndex) {
	utility::string_t paramName = utils->getTestValue("putUpdateNotesSlideShapePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putUpdateNotesSlideShapePortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putUpdateNotesSlideShapePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("putUpdateNotesSlideShapePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("putUpdateNotesSlideShapePortion", "portionIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("putUpdateNotesSlideShapePortion", "dto");
	utility::string_t paramPassword = utils->getTestValue("putUpdateNotesSlideShapePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("putUpdateNotesSlideShapePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("putUpdateNotesSlideShapePortion", "storage");
	paramPortionIndex = utils->getInvalidIntTestValue("putUpdateNotesSlideShapePortion", "portionIndex", paramPortionIndex).value();
	utils->initialize("putUpdateNotesSlideShapePortion", "portionIndex", paramPortionIndex);

	bool failed = true;
	try
	{
		api->updateNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlideShapePortion", "portionIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlideShapePortion", "portionIndex", paramPortionIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlideShapePortion", "portionIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlideShapePortion", "portionIndex", paramPortionIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putUpdateNotesSlideShapePortion", "portionIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putUpdateNotesSlideShapePortionInvalidDto) {
	utility::string_t paramName = utils->getTestValue("putUpdateNotesSlideShapePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putUpdateNotesSlideShapePortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putUpdateNotesSlideShapePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("putUpdateNotesSlideShapePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("putUpdateNotesSlideShapePortion", "portionIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("putUpdateNotesSlideShapePortion", "dto");
	utility::string_t paramPassword = utils->getTestValue("putUpdateNotesSlideShapePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("putUpdateNotesSlideShapePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("putUpdateNotesSlideShapePortion", "storage");
	paramDto = utils->getInvalidTestValueForClass<>("putUpdateNotesSlideShapePortion", "dto", paramDto);
	utils->initialize("putUpdateNotesSlideShapePortion", "dto", paramDto);

	bool failed = true;
	try
	{
		api->updateNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlideShapePortion", "dto");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlideShapePortion", "dto", paramDto);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlideShapePortion", "dto");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlideShapePortion", "dto", paramDto);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putUpdateNotesSlideShapePortion", "dto"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putUpdateNotesSlideShapePortionInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("putUpdateNotesSlideShapePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putUpdateNotesSlideShapePortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putUpdateNotesSlideShapePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("putUpdateNotesSlideShapePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("putUpdateNotesSlideShapePortion", "portionIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("putUpdateNotesSlideShapePortion", "dto");
	utility::string_t paramPassword = utils->getTestValue("putUpdateNotesSlideShapePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("putUpdateNotesSlideShapePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("putUpdateNotesSlideShapePortion", "storage");
	paramPassword = utils->getInvalidTestValue("putUpdateNotesSlideShapePortion", "password", paramPassword);
	utils->initialize("putUpdateNotesSlideShapePortion", "password", paramPassword);

	bool failed = true;
	try
	{
		api->updateNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlideShapePortion", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlideShapePortion", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlideShapePortion", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlideShapePortion", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putUpdateNotesSlideShapePortion", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putUpdateNotesSlideShapePortionInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("putUpdateNotesSlideShapePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putUpdateNotesSlideShapePortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putUpdateNotesSlideShapePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("putUpdateNotesSlideShapePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("putUpdateNotesSlideShapePortion", "portionIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("putUpdateNotesSlideShapePortion", "dto");
	utility::string_t paramPassword = utils->getTestValue("putUpdateNotesSlideShapePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("putUpdateNotesSlideShapePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("putUpdateNotesSlideShapePortion", "storage");
	paramFolder = utils->getInvalidTestValue("putUpdateNotesSlideShapePortion", "folder", paramFolder);
	utils->initialize("putUpdateNotesSlideShapePortion", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->updateNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlideShapePortion", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlideShapePortion", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlideShapePortion", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlideShapePortion", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putUpdateNotesSlideShapePortion", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putUpdateNotesSlideShapePortionInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("putUpdateNotesSlideShapePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("putUpdateNotesSlideShapePortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("putUpdateNotesSlideShapePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("putUpdateNotesSlideShapePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("putUpdateNotesSlideShapePortion", "portionIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("putUpdateNotesSlideShapePortion", "dto");
	utility::string_t paramPassword = utils->getTestValue("putUpdateNotesSlideShapePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("putUpdateNotesSlideShapePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("putUpdateNotesSlideShapePortion", "storage");
	paramStorage = utils->getInvalidTestValue("putUpdateNotesSlideShapePortion", "storage", paramStorage);
	utils->initialize("putUpdateNotesSlideShapePortion", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->updateNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlideShapePortion", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlideShapePortion", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlideShapePortion", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlideShapePortion", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putUpdateNotesSlideShapePortion", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, storageExists) {
	utility::string_t paramStorageName = utils->getTestValue("storageExists", "storageName");
	utils->initialize("storageExists", "");
	std::shared_ptr<StorageExist> result = api->storageExists(paramStorageName).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, storageExistsInvalidStorageName) {
	utility::string_t paramStorageName = utils->getTestValue("storageExists", "storageName");
	paramStorageName = utils->getInvalidTestValue("storageExists", "storageName", paramStorageName);
	utils->initialize("storageExists", "storageName", paramStorageName);

	bool failed = true;
	try
	{
		api->storageExists(paramStorageName).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("storageExists", "storageName");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("storageExists", "storageName", paramStorageName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("storageExists", "storageName");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("storageExists", "storageName", paramStorageName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("storageExists", "storageName"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, uploadFile) {
	utility::string_t paramPath = utils->getTestValue("uploadFile", "path");
	std::shared_ptr<HttpContent> paramFile = utils->getBinaryTestValue("uploadFile", "file");
	utility::string_t paramStorageName = utils->getTestValue("uploadFile", "storageName");
	utils->initialize("uploadFile", "");
	std::shared_ptr<FilesUploadResult> result = api->uploadFile(paramPath, paramFile, paramStorageName).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, uploadFileInvalidPath) {
	utility::string_t paramPath = utils->getTestValue("uploadFile", "path");
	std::shared_ptr<HttpContent> paramFile = utils->getBinaryTestValue("uploadFile", "file");
	utility::string_t paramStorageName = utils->getTestValue("uploadFile", "storageName");
	paramPath = utils->getInvalidTestValue("uploadFile", "path", paramPath);
	utils->initialize("uploadFile", "path", paramPath);

	bool failed = true;
	try
	{
		api->uploadFile(paramPath, paramFile, paramStorageName).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("uploadFile", "path");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("uploadFile", "path", paramPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("uploadFile", "path");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("uploadFile", "path", paramPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("uploadFile", "path"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, uploadFileInvalidFile) {
	utility::string_t paramPath = utils->getTestValue("uploadFile", "path");
	std::shared_ptr<HttpContent> paramFile = utils->getBinaryTestValue("uploadFile", "file");
	utility::string_t paramStorageName = utils->getTestValue("uploadFile", "storageName");
	paramFile = utils->getInvalidBinaryTestValue("uploadFile", "file", paramFile);
	utils->initialize("uploadFile", "file", paramFile);

	bool failed = true;
	try
	{
		api->uploadFile(paramPath, paramFile, paramStorageName).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("uploadFile", "file");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("uploadFile", "file", paramFile);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("uploadFile", "file");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("uploadFile", "file", paramFile);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("uploadFile", "file"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, uploadFileInvalidStorageName) {
	utility::string_t paramPath = utils->getTestValue("uploadFile", "path");
	std::shared_ptr<HttpContent> paramFile = utils->getBinaryTestValue("uploadFile", "file");
	utility::string_t paramStorageName = utils->getTestValue("uploadFile", "storageName");
	paramStorageName = utils->getInvalidTestValue("uploadFile", "storageName", paramStorageName);
	utils->initialize("uploadFile", "storageName", paramStorageName);

	bool failed = true;
	try
	{
		api->uploadFile(paramPath, paramFile, paramStorageName).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("uploadFile", "storageName");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("uploadFile", "storageName", paramStorageName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("uploadFile", "storageName");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("uploadFile", "storageName", paramStorageName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("uploadFile", "storageName"))
	{
		FAIL() << "Must have failed";
	}
}
